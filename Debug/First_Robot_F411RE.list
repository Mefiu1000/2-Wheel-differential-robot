
First_Robot_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800644c  0800644c  0001644c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d4  080064d4  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064dc  080064dc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064dc  080064dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064e0  080064e0  000164e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080064e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000064  08006548  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08006548  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff4c  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002951  00000000  00000000  00030023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00032978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac0  00000000  00000000  00033768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001794e  00000000  00000000  00034228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012628  00000000  00000000  0004bb76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e920  00000000  00000000  0005e19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e84  00000000  00000000  000ecac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f0944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006434 	.word	0x08006434

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08006434 	.word	0x08006434

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b970 	b.w	8000be4 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9e08      	ldr	r6, [sp, #32]
 8000922:	460d      	mov	r5, r1
 8000924:	4604      	mov	r4, r0
 8000926:	460f      	mov	r7, r1
 8000928:	2b00      	cmp	r3, #0
 800092a:	d14a      	bne.n	80009c2 <__udivmoddi4+0xa6>
 800092c:	428a      	cmp	r2, r1
 800092e:	4694      	mov	ip, r2
 8000930:	d965      	bls.n	80009fe <__udivmoddi4+0xe2>
 8000932:	fab2 f382 	clz	r3, r2
 8000936:	b143      	cbz	r3, 800094a <__udivmoddi4+0x2e>
 8000938:	fa02 fc03 	lsl.w	ip, r2, r3
 800093c:	f1c3 0220 	rsb	r2, r3, #32
 8000940:	409f      	lsls	r7, r3
 8000942:	fa20 f202 	lsr.w	r2, r0, r2
 8000946:	4317      	orrs	r7, r2
 8000948:	409c      	lsls	r4, r3
 800094a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800094e:	fa1f f58c 	uxth.w	r5, ip
 8000952:	fbb7 f1fe 	udiv	r1, r7, lr
 8000956:	0c22      	lsrs	r2, r4, #16
 8000958:	fb0e 7711 	mls	r7, lr, r1, r7
 800095c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000960:	fb01 f005 	mul.w	r0, r1, r5
 8000964:	4290      	cmp	r0, r2
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x62>
 8000968:	eb1c 0202 	adds.w	r2, ip, r2
 800096c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000970:	f080 811c 	bcs.w	8000bac <__udivmoddi4+0x290>
 8000974:	4290      	cmp	r0, r2
 8000976:	f240 8119 	bls.w	8000bac <__udivmoddi4+0x290>
 800097a:	3902      	subs	r1, #2
 800097c:	4462      	add	r2, ip
 800097e:	1a12      	subs	r2, r2, r0
 8000980:	b2a4      	uxth	r4, r4
 8000982:	fbb2 f0fe 	udiv	r0, r2, lr
 8000986:	fb0e 2210 	mls	r2, lr, r0, r2
 800098a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800098e:	fb00 f505 	mul.w	r5, r0, r5
 8000992:	42a5      	cmp	r5, r4
 8000994:	d90a      	bls.n	80009ac <__udivmoddi4+0x90>
 8000996:	eb1c 0404 	adds.w	r4, ip, r4
 800099a:	f100 32ff 	add.w	r2, r0, #4294967295
 800099e:	f080 8107 	bcs.w	8000bb0 <__udivmoddi4+0x294>
 80009a2:	42a5      	cmp	r5, r4
 80009a4:	f240 8104 	bls.w	8000bb0 <__udivmoddi4+0x294>
 80009a8:	4464      	add	r4, ip
 80009aa:	3802      	subs	r0, #2
 80009ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	2100      	movs	r1, #0
 80009b4:	b11e      	cbz	r6, 80009be <__udivmoddi4+0xa2>
 80009b6:	40dc      	lsrs	r4, r3
 80009b8:	2300      	movs	r3, #0
 80009ba:	e9c6 4300 	strd	r4, r3, [r6]
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0xbc>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	f000 80ed 	beq.w	8000ba6 <__udivmoddi4+0x28a>
 80009cc:	2100      	movs	r1, #0
 80009ce:	e9c6 0500 	strd	r0, r5, [r6]
 80009d2:	4608      	mov	r0, r1
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	fab3 f183 	clz	r1, r3
 80009dc:	2900      	cmp	r1, #0
 80009de:	d149      	bne.n	8000a74 <__udivmoddi4+0x158>
 80009e0:	42ab      	cmp	r3, r5
 80009e2:	d302      	bcc.n	80009ea <__udivmoddi4+0xce>
 80009e4:	4282      	cmp	r2, r0
 80009e6:	f200 80f8 	bhi.w	8000bda <__udivmoddi4+0x2be>
 80009ea:	1a84      	subs	r4, r0, r2
 80009ec:	eb65 0203 	sbc.w	r2, r5, r3
 80009f0:	2001      	movs	r0, #1
 80009f2:	4617      	mov	r7, r2
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d0e2      	beq.n	80009be <__udivmoddi4+0xa2>
 80009f8:	e9c6 4700 	strd	r4, r7, [r6]
 80009fc:	e7df      	b.n	80009be <__udivmoddi4+0xa2>
 80009fe:	b902      	cbnz	r2, 8000a02 <__udivmoddi4+0xe6>
 8000a00:	deff      	udf	#255	; 0xff
 8000a02:	fab2 f382 	clz	r3, r2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f040 8090 	bne.w	8000b2c <__udivmoddi4+0x210>
 8000a0c:	1a8a      	subs	r2, r1, r2
 8000a0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a12:	fa1f fe8c 	uxth.w	lr, ip
 8000a16:	2101      	movs	r1, #1
 8000a18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a20:	0c22      	lsrs	r2, r4, #16
 8000a22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a26:	fb0e f005 	mul.w	r0, lr, r5
 8000a2a:	4290      	cmp	r0, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x124>
 8000a2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a36:	d202      	bcs.n	8000a3e <__udivmoddi4+0x122>
 8000a38:	4290      	cmp	r0, r2
 8000a3a:	f200 80cb 	bhi.w	8000bd4 <__udivmoddi4+0x2b8>
 8000a3e:	4645      	mov	r5, r8
 8000a40:	1a12      	subs	r2, r2, r0
 8000a42:	b2a4      	uxth	r4, r4
 8000a44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a48:	fb07 2210 	mls	r2, r7, r0, r2
 8000a4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a50:	fb0e fe00 	mul.w	lr, lr, r0
 8000a54:	45a6      	cmp	lr, r4
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x14e>
 8000a58:	eb1c 0404 	adds.w	r4, ip, r4
 8000a5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a60:	d202      	bcs.n	8000a68 <__udivmoddi4+0x14c>
 8000a62:	45a6      	cmp	lr, r4
 8000a64:	f200 80bb 	bhi.w	8000bde <__udivmoddi4+0x2c2>
 8000a68:	4610      	mov	r0, r2
 8000a6a:	eba4 040e 	sub.w	r4, r4, lr
 8000a6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a72:	e79f      	b.n	80009b4 <__udivmoddi4+0x98>
 8000a74:	f1c1 0720 	rsb	r7, r1, #32
 8000a78:	408b      	lsls	r3, r1
 8000a7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a82:	fa05 f401 	lsl.w	r4, r5, r1
 8000a86:	fa20 f307 	lsr.w	r3, r0, r7
 8000a8a:	40fd      	lsrs	r5, r7
 8000a8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a90:	4323      	orrs	r3, r4
 8000a92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a96:	fa1f fe8c 	uxth.w	lr, ip
 8000a9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a9e:	0c1c      	lsrs	r4, r3, #16
 8000aa0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000aa4:	fb08 f50e 	mul.w	r5, r8, lr
 8000aa8:	42a5      	cmp	r5, r4
 8000aaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000aae:	fa00 f001 	lsl.w	r0, r0, r1
 8000ab2:	d90b      	bls.n	8000acc <__udivmoddi4+0x1b0>
 8000ab4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000abc:	f080 8088 	bcs.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac0:	42a5      	cmp	r5, r4
 8000ac2:	f240 8085 	bls.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aca:	4464      	add	r4, ip
 8000acc:	1b64      	subs	r4, r4, r5
 8000ace:	b29d      	uxth	r5, r3
 8000ad0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ad4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ad8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000adc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x1da>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000aec:	d26c      	bcs.n	8000bc8 <__udivmoddi4+0x2ac>
 8000aee:	45a6      	cmp	lr, r4
 8000af0:	d96a      	bls.n	8000bc8 <__udivmoddi4+0x2ac>
 8000af2:	3b02      	subs	r3, #2
 8000af4:	4464      	add	r4, ip
 8000af6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000afa:	fba3 9502 	umull	r9, r5, r3, r2
 8000afe:	eba4 040e 	sub.w	r4, r4, lr
 8000b02:	42ac      	cmp	r4, r5
 8000b04:	46c8      	mov	r8, r9
 8000b06:	46ae      	mov	lr, r5
 8000b08:	d356      	bcc.n	8000bb8 <__udivmoddi4+0x29c>
 8000b0a:	d053      	beq.n	8000bb4 <__udivmoddi4+0x298>
 8000b0c:	b156      	cbz	r6, 8000b24 <__udivmoddi4+0x208>
 8000b0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b12:	eb64 040e 	sbc.w	r4, r4, lr
 8000b16:	fa04 f707 	lsl.w	r7, r4, r7
 8000b1a:	40ca      	lsrs	r2, r1
 8000b1c:	40cc      	lsrs	r4, r1
 8000b1e:	4317      	orrs	r7, r2
 8000b20:	e9c6 7400 	strd	r7, r4, [r6]
 8000b24:	4618      	mov	r0, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2c:	f1c3 0120 	rsb	r1, r3, #32
 8000b30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b34:	fa20 f201 	lsr.w	r2, r0, r1
 8000b38:	fa25 f101 	lsr.w	r1, r5, r1
 8000b3c:	409d      	lsls	r5, r3
 8000b3e:	432a      	orrs	r2, r5
 8000b40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b44:	fa1f fe8c 	uxth.w	lr, ip
 8000b48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b50:	0c11      	lsrs	r1, r2, #16
 8000b52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b56:	fb00 f50e 	mul.w	r5, r0, lr
 8000b5a:	428d      	cmp	r5, r1
 8000b5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x258>
 8000b62:	eb1c 0101 	adds.w	r1, ip, r1
 8000b66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b6a:	d22f      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b6c:	428d      	cmp	r5, r1
 8000b6e:	d92d      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000b70:	3802      	subs	r0, #2
 8000b72:	4461      	add	r1, ip
 8000b74:	1b49      	subs	r1, r1, r5
 8000b76:	b292      	uxth	r2, r2
 8000b78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b84:	fb05 f10e 	mul.w	r1, r5, lr
 8000b88:	4291      	cmp	r1, r2
 8000b8a:	d908      	bls.n	8000b9e <__udivmoddi4+0x282>
 8000b8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b94:	d216      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b96:	4291      	cmp	r1, r2
 8000b98:	d914      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b9a:	3d02      	subs	r5, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a52      	subs	r2, r2, r1
 8000ba0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ba4:	e738      	b.n	8000a18 <__udivmoddi4+0xfc>
 8000ba6:	4631      	mov	r1, r6
 8000ba8:	4630      	mov	r0, r6
 8000baa:	e708      	b.n	80009be <__udivmoddi4+0xa2>
 8000bac:	4639      	mov	r1, r7
 8000bae:	e6e6      	b.n	800097e <__udivmoddi4+0x62>
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	e6fb      	b.n	80009ac <__udivmoddi4+0x90>
 8000bb4:	4548      	cmp	r0, r9
 8000bb6:	d2a9      	bcs.n	8000b0c <__udivmoddi4+0x1f0>
 8000bb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	e7a3      	b.n	8000b0c <__udivmoddi4+0x1f0>
 8000bc4:	4645      	mov	r5, r8
 8000bc6:	e7ea      	b.n	8000b9e <__udivmoddi4+0x282>
 8000bc8:	462b      	mov	r3, r5
 8000bca:	e794      	b.n	8000af6 <__udivmoddi4+0x1da>
 8000bcc:	4640      	mov	r0, r8
 8000bce:	e7d1      	b.n	8000b74 <__udivmoddi4+0x258>
 8000bd0:	46d0      	mov	r8, sl
 8000bd2:	e77b      	b.n	8000acc <__udivmoddi4+0x1b0>
 8000bd4:	3d02      	subs	r5, #2
 8000bd6:	4462      	add	r2, ip
 8000bd8:	e732      	b.n	8000a40 <__udivmoddi4+0x124>
 8000bda:	4608      	mov	r0, r1
 8000bdc:	e70a      	b.n	80009f4 <__udivmoddi4+0xd8>
 8000bde:	4464      	add	r4, ip
 8000be0:	3802      	subs	r0, #2
 8000be2:	e742      	b.n	8000a6a <__udivmoddi4+0x14e>

08000be4 <__aeabi_idiv0>:
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <Button_Init>:

extern bool* ptrRobotEnable;
//Init

void Button_Init(Button_t* key, GPIO_TypeDef* Gpio_Port, uint16_t Gpio_Pin, uint32_t TimerDebounce)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	80fb      	strh	r3, [r7, #6]
	key->State = IDLE;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]

	key->Gpio_Port = Gpio_Port;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	605a      	str	r2, [r3, #4]
	key->Gpio_Pin = Gpio_Pin;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	88fa      	ldrh	r2, [r7, #6]
 8000c08:	811a      	strh	r2, [r3, #8]

	key->TimerDebounce = TimerDebounce;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	60da      	str	r2, [r3, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <Button_IdleRoutine>:

void Button_IdleRoutine(Button_t* key)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(key->Gpio_Port, key->Gpio_Pin) == GPIO_PIN_RESET)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	891b      	ldrh	r3, [r3, #8]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4610      	mov	r0, r2
 8000c30:	f001 fdf6 	bl	8002820 <HAL_GPIO_ReadPin>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d107      	bne.n	8000c4a <Button_IdleRoutine+0x2e>
	{
		key->State = DEBOUNCE;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
		key->LastTick = HAL_GetTick();
 8000c40:	f001 fa96 	bl	8002170 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	611a      	str	r2, [r3, #16]
	}

}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <Button_DebounceRoutine>:

void Button_DebounceRoutine(Button_t* key)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
	if( (HAL_GetTick() - key->LastTick) > key->TimerDebounce)
 8000c5a:	f001 fa89 	bl	8002170 <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	1ad2      	subs	r2, r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d911      	bls.n	8000c92 <Button_DebounceRoutine+0x40>
	{

		if(HAL_GPIO_ReadPin(key->Gpio_Port, key->Gpio_Pin) == GPIO_PIN_RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	891b      	ldrh	r3, [r3, #8]
 8000c76:	4619      	mov	r1, r3
 8000c78:	4610      	mov	r0, r2
 8000c7a:	f001 fdd1 	bl	8002820 <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d103      	bne.n	8000c8c <Button_DebounceRoutine+0x3a>
		{
			key->State = PRESSED;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2202      	movs	r2, #2
 8000c88:	701a      	strb	r2, [r3, #0]
		else
		{
			key->State = IDLE;
		}
	}
}
 8000c8a:	e002      	b.n	8000c92 <Button_DebounceRoutine+0x40>
			key->State = IDLE;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <Button_PressedRoutine>:

void Button_PressedRoutine(Button_t* key)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(key->Gpio_Port, key->Gpio_Pin) == GPIO_PIN_SET)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	891b      	ldrh	r3, [r3, #8]
 8000cac:	4619      	mov	r1, r3
 8000cae:	4610      	mov	r0, r2
 8000cb0:	f001 fdb6 	bl	8002820 <HAL_GPIO_ReadPin>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d114      	bne.n	8000ce4 <Button_PressedRoutine+0x48>
	{
		key->State = IDLE;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
		*ptrRobotEnable = !(*ptrRobotEnable);
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <Button_PressedRoutine+0x50>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	f083 0301 	eor.w	r3, r3, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <Button_PressedRoutine+0x50>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f002 0201 	and.w	r2, r2, #1
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	701a      	strb	r2, [r3, #0]

	}
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000000 	.word	0x20000000

08000cf0 <Button_Task>:
void Button_Task(Button_t* key)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	switch(key->State)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d00e      	beq.n	8000d1e <Button_Task+0x2e>
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	dc10      	bgt.n	8000d26 <Button_Task+0x36>
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d002      	beq.n	8000d0e <Button_Task+0x1e>
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d004      	beq.n	8000d16 <Button_Task+0x26>
		break;
	case PRESSED:
		Button_PressedRoutine(key);
		break;
	}
}
 8000d0c:	e00b      	b.n	8000d26 <Button_Task+0x36>
		Button_IdleRoutine(key);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ff84 	bl	8000c1c <Button_IdleRoutine>
		break;
 8000d14:	e007      	b.n	8000d26 <Button_Task+0x36>
		Button_DebounceRoutine(key);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ff9b 	bl	8000c52 <Button_DebounceRoutine>
		break;
 8000d1c:	e003      	b.n	8000d26 <Button_Task+0x36>
		Button_PressedRoutine(key);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffbc 	bl	8000c9c <Button_PressedRoutine>
		break;
 8000d24:	bf00      	nop
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HCSR04p_Init>:

volatile uint16_t Time_uc;

void HCSR04p_Init(HCSR04p_t *hcsr04p,  TIM_HandleTypeDef *timer_trigger, uint32_t Trigger_TimChannel, TIM_HandleTypeDef *timer_echo,
		uint32_t Echo_TimChannel_Start, uint32_t Echo_TimChannel_Stop)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	603b      	str	r3, [r7, #0]
	hcsr04p->htim_trigger = timer_trigger;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	601a      	str	r2, [r3, #0]
	hcsr04p->htim_echo = timer_echo;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	605a      	str	r2, [r3, #4]

	hcsr04p->Trigger_TimChannel = Trigger_TimChannel;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	609a      	str	r2, [r3, #8]

	hcsr04p->Echo_TimChannel_Start = Echo_TimChannel_Start;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	60da      	str	r2, [r3, #12]
	hcsr04p->Echo_TimChannel_Stop = Echo_TimChannel_Stop;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	69fa      	ldr	r2, [r7, #28]
 8000d58:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start(hcsr04p->htim_echo);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fa92 	bl	8003288 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(hcsr04p->htim_echo, hcsr04p->Echo_TimChannel_Start);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4610      	mov	r0, r2
 8000d70:	f002 fc48 	bl	8003604 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start_IT(hcsr04p->htim_echo, hcsr04p->Echo_TimChannel_Stop);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4610      	mov	r0, r2
 8000d80:	f002 fd0e 	bl	80037a0 <HAL_TIM_IC_Start_IT>

	HAL_TIM_Base_Start(hcsr04p->htim_trigger);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 fa7d 	bl	8003288 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(hcsr04p->htim_trigger, hcsr04p->Trigger_TimChannel);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4610      	mov	r0, r2
 8000d9a:	f002 fb29 	bl	80033f0 <HAL_TIM_PWM_Start>
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HCSR04p_ReadFloat>:
void HCSR04p_ReadInteger(HCSR04p_t *hcsr04p, uint16_t *Read_distance)
{
	*Read_distance = hcsr04p->Result_us / 58; //in cm
}
void HCSR04p_ReadFloat(HCSR04p_t *hcsr04p, float *Read_distance)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	*Read_distance = (float)hcsr04p->Result_us * HCSR04p_FLOAT_CONST; //in cm
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	8a9b      	ldrh	r3, [r3, #20]
 8000db6:	ee07 3a90 	vmov	s15, r3
 8000dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dbe:	ee17 0a90 	vmov	r0, s15
 8000dc2:	f7ff fceb 	bl	800079c <__aeabi_f2d>
 8000dc6:	a30a      	add	r3, pc, #40	; (adr r3, 8000df0 <HCSR04p_ReadFloat+0x48>)
 8000dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dcc:	f7ff fa58 	bl	8000280 <__aeabi_dmul>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f7ff fd38 	bl	800084c <__aeabi_d2f>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	601a      	str	r2, [r3, #0]
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	f3af 8000 	nop.w
 8000df0:	04816f00 	.word	0x04816f00
 8000df4:	3f918fc5 	.word	0x3f918fc5

08000df8 <HCSR04p_InteruptHandler>:
void HCSR04p_InteruptHandler(HCSR04p_t *hcsr04p)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	hcsr04p->Result_us = (uint16_t)hcsr04p->htim_echo->Instance->CCR2 - (uint16_t)hcsr04p->htim_echo->Instance->CCR1; //pulse width
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	829a      	strh	r2, [r3, #20]
	//HAL_TIM_IC_Start_IT(htim, HCSR04p_STOP_CHANNEL);
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <L298N_MotorInit>:
#include <L298N.h>


void L298N_MotorInit(Motor_t* motor, GPIO_TypeDef* MotorForward_Port, uint16_t MotorForward_Pin,
		GPIO_TypeDef* MotorBackward_Port, uint16_t MotorBackward_Pin)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	4613      	mov	r3, r2
 8000e36:	80fb      	strh	r3, [r7, #6]
	motor->State = OPERATION;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]

	motor->MotorForward_Port = MotorForward_Port;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	605a      	str	r2, [r3, #4]
	motor->MotorForward_Pin = MotorForward_Pin;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	88fa      	ldrh	r2, [r7, #6]
 8000e48:	811a      	strh	r2, [r3, #8]

	motor->MotorBackward_Port = MotorBackward_Port;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	60da      	str	r2, [r3, #12]
	motor->MotorBackward_Pin = MotorBackward_Pin;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	8b3a      	ldrh	r2, [r7, #24]
 8000e54:	821a      	strh	r2, [r3, #16]
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <L298N_MotorTask>:

void L298N_MotorTask(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
	switch(Leftmotor->State)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d010      	beq.n	8000e96 <L298N_MotorTask+0x34>
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	dc13      	bgt.n	8000ea0 <L298N_MotorTask+0x3e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <L298N_MotorTask+0x20>
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d005      	beq.n	8000e8c <L298N_MotorTask+0x2a>
		break;
	case MAINTAIN_DISTANCE:
		L298N_MotorHoldDistanceRoutine(Leftmotor, Rightmotor);
		break;
	}
}
 8000e80:	e00e      	b.n	8000ea0 <L298N_MotorTask+0x3e>
		L298N_MotorOperationRoutine(Leftmotor, Rightmotor);
 8000e82:	6839      	ldr	r1, [r7, #0]
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 f80f 	bl	8000ea8 <L298N_MotorOperationRoutine>
		break;
 8000e8a:	e009      	b.n	8000ea0 <L298N_MotorTask+0x3e>
		L298N_MotorChangeOperationRoutine(Leftmotor, Rightmotor);
 8000e8c:	6839      	ldr	r1, [r7, #0]
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 f82a 	bl	8000ee8 <L298N_MotorChangeOperationRoutine>
		break;
 8000e94:	e004      	b.n	8000ea0 <L298N_MotorTask+0x3e>
		L298N_MotorHoldDistanceRoutine(Leftmotor, Rightmotor);
 8000e96:	6839      	ldr	r1, [r7, #0]
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 f8d9 	bl	8001050 <L298N_MotorHoldDistanceRoutine>
		break;
 8000e9e:	bf00      	nop
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <L298N_MotorOperationRoutine>:

void L298N_MotorOperationRoutine(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	if(*ptrMotor_Action_Flag == true)
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <L298N_MotorOperationRoutine+0x3c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d00d      	beq.n	8000ed8 <L298N_MotorOperationRoutine+0x30>
	{
		Leftmotor->LastState = Leftmotor->State;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	705a      	strb	r2, [r3, #1]
		Rightmotor->LastState = Leftmotor->State;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	781a      	ldrb	r2, [r3, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	705a      	strb	r2, [r3, #1]

		Leftmotor->State = CHANGE_OPERATION;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
		Rightmotor->State = CHANGE_OPERATION;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
	}
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <L298N_MotorChangeOperationRoutine>:

void L298N_MotorChangeOperationRoutine(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	uint8_t State = OPERATION;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]

	//Parser_Parse();
	switch(HC05_Command[0])
 8000ef6:	4b3c      	ldr	r3, [pc, #240]	; (8000fe8 <L298N_MotorChangeOperationRoutine+0x100>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	3b42      	subs	r3, #66	; 0x42
 8000efc:	2b14      	cmp	r3, #20
 8000efe:	d85e      	bhi.n	8000fbe <L298N_MotorChangeOperationRoutine+0xd6>
 8000f00:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <L298N_MotorChangeOperationRoutine+0x20>)
 8000f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f06:	bf00      	nop
 8000f08:	08000f67 	.word	0x08000f67
 8000f0c:	08000fbf 	.word	0x08000fbf
 8000f10:	08000fbf 	.word	0x08000fbf
 8000f14:	08000fbf 	.word	0x08000fbf
 8000f18:	08000f5d 	.word	0x08000f5d
 8000f1c:	08000fbf 	.word	0x08000fbf
 8000f20:	08000fb9 	.word	0x08000fb9
 8000f24:	08000fbf 	.word	0x08000fbf
 8000f28:	08000fbf 	.word	0x08000fbf
 8000f2c:	08000fbf 	.word	0x08000fbf
 8000f30:	08000f71 	.word	0x08000f71
 8000f34:	08000fbf 	.word	0x08000fbf
 8000f38:	08000fbf 	.word	0x08000fbf
 8000f3c:	08000fbf 	.word	0x08000fbf
 8000f40:	08000fbf 	.word	0x08000fbf
 8000f44:	08000fbf 	.word	0x08000fbf
 8000f48:	08000f7b 	.word	0x08000f7b
 8000f4c:	08000f85 	.word	0x08000f85
 8000f50:	08000fbf 	.word	0x08000fbf
 8000f54:	08000fbf 	.word	0x08000fbf
 8000f58:	08000f8f 	.word	0x08000f8f
	{
	case MOVE_FORWARD:
		Move_Forward(Leftmotor, Rightmotor);
 8000f5c:	6839      	ldr	r1, [r7, #0]
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f8d2 	bl	8001108 <Move_Forward>
		break;
 8000f64:	e031      	b.n	8000fca <L298N_MotorChangeOperationRoutine+0xe2>
	case MOVE_BACKWARD:
		Move_Backward(Leftmotor, Rightmotor);
 8000f66:	6839      	ldr	r1, [r7, #0]
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 f907 	bl	800117c <Move_Backward>
		break;
 8000f6e:	e02c      	b.n	8000fca <L298N_MotorChangeOperationRoutine+0xe2>
	case MOVE_LEFT:
		Move_Left(Leftmotor, Rightmotor);
 8000f70:	6839      	ldr	r1, [r7, #0]
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f93c 	bl	80011f0 <Move_Left>
		break;
 8000f78:	e027      	b.n	8000fca <L298N_MotorChangeOperationRoutine+0xe2>
	case MOVE_RIGHT:
		Move_Right(Leftmotor, Rightmotor);
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 f971 	bl	8001264 <Move_Right>
		break;
 8000f82:	e022      	b.n	8000fca <L298N_MotorChangeOperationRoutine+0xe2>
	case STOP:
		Move_Stop(Leftmotor, Rightmotor);
 8000f84:	6839      	ldr	r1, [r7, #0]
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f9a6 	bl	80012d8 <Move_Stop>
		break;
 8000f8c:	e01d      	b.n	8000fca <L298N_MotorChangeOperationRoutine+0xe2>
	case CHANGE_SPEED:
		uint16_t Speed;
		Speed = Motor_CalculateSpeed(HC05_Command[1],HC05_Command[2], HC05_Command[3]);
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <L298N_MotorChangeOperationRoutine+0x100>)
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <L298N_MotorChangeOperationRoutine+0x100>)
 8000f94:	7891      	ldrb	r1, [r2, #2]
 8000f96:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <L298N_MotorChangeOperationRoutine+0x100>)
 8000f98:	78d2      	ldrb	r2, [r2, #3]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f82a 	bl	8000ff4 <Motor_CalculateSpeed>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	81bb      	strh	r3, [r7, #12]
		Motor_SetSpeed(Speed, Speed);
 8000fa4:	89ba      	ldrh	r2, [r7, #12]
 8000fa6:	89bb      	ldrh	r3, [r7, #12]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f9be 	bl	800132c <Motor_SetSpeed>
		State = Leftmotor->LastState;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	785b      	ldrb	r3, [r3, #1]
 8000fb4:	73fb      	strb	r3, [r7, #15]
		break;
 8000fb6:	e008      	b.n	8000fca <L298N_MotorChangeOperationRoutine+0xe2>
	case HOLD_DISTANCE:
		State = MAINTAIN_DISTANCE;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	73fb      	strb	r3, [r7, #15]
		break;
 8000fbc:	e005      	b.n	8000fca <L298N_MotorChangeOperationRoutine+0xe2>
	default:
		Wrong_Data();
 8000fbe:	f000 f889 	bl	80010d4 <Wrong_Data>
		RB_Flush(&RX_Buffer);
 8000fc2:	480a      	ldr	r0, [pc, #40]	; (8000fec <L298N_MotorChangeOperationRoutine+0x104>)
 8000fc4:	f000 fa3a 	bl	800143c <RB_Flush>
		break;
 8000fc8:	bf00      	nop
	}

	Leftmotor->State = State;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	701a      	strb	r2, [r3, #0]
	Rightmotor->State = State;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	701a      	strb	r2, [r3, #0]
	*ptrMotor_Action_Flag = false;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <L298N_MotorChangeOperationRoutine+0x108>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200000d4 	.word	0x200000d4
 8000fec:	20000110 	.word	0x20000110
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <Motor_CalculateSpeed>:

uint16_t Motor_CalculateSpeed(uint8_t num_100,uint8_t num_10, uint8_t num_1)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	460b      	mov	r3, r1
 8001000:	71bb      	strb	r3, [r7, #6]
 8001002:	4613      	mov	r3, r2
 8001004:	717b      	strb	r3, [r7, #5]

	uint16_t Speed;
	Speed = (num_1 - '0') + (num_10- '0') * 10 + (num_100- '0') * 100;
 8001006:	797b      	ldrb	r3, [r7, #5]
 8001008:	b29a      	uxth	r2, r3
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	3b30      	subs	r3, #48	; 0x30
 800100e:	b29b      	uxth	r3, r3
 8001010:	4619      	mov	r1, r3
 8001012:	0089      	lsls	r1, r1, #2
 8001014:	440b      	add	r3, r1
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	b29b      	uxth	r3, r3
 800101a:	4413      	add	r3, r2
 800101c:	b29a      	uxth	r2, r3
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	3b30      	subs	r3, #48	; 0x30
 8001022:	b29b      	uxth	r3, r3
 8001024:	4619      	mov	r1, r3
 8001026:	0089      	lsls	r1, r1, #2
 8001028:	440b      	add	r3, r1
 800102a:	4619      	mov	r1, r3
 800102c:	0088      	lsls	r0, r1, #2
 800102e:	4619      	mov	r1, r3
 8001030:	4603      	mov	r3, r0
 8001032:	440b      	add	r3, r1
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	b29b      	uxth	r3, r3
 8001038:	4413      	add	r3, r2
 800103a:	b29b      	uxth	r3, r3
 800103c:	3b30      	subs	r3, #48	; 0x30
 800103e:	81fb      	strh	r3, [r7, #14]

	return Speed;
 8001040:	89fb      	ldrh	r3, [r7, #14]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <L298N_MotorHoldDistanceRoutine>:

void L298N_MotorHoldDistanceRoutine(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	if(*ptrMotor_Action_Flag == true)
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <L298N_MotorHoldDistanceRoutine+0x7c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00d      	beq.n	8001080 <L298N_MotorHoldDistanceRoutine+0x30>
	{
		Leftmotor->LastState = Leftmotor->State;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	705a      	strb	r2, [r3, #1]
		Rightmotor->LastState = Leftmotor->State;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	705a      	strb	r2, [r3, #1]

		Leftmotor->State = CHANGE_OPERATION;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
		Rightmotor->State = CHANGE_OPERATION;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
	}
	//Hold_Distance(&Distance_f);
	  if(Distance_f > 10.5)
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <L298N_MotorHoldDistanceRoutine+0x80>)
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	eeb2 7a05 	vmov.f32	s14, #37	; 0x41280000  10.5
 800108a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	dd04      	ble.n	800109e <L298N_MotorHoldDistanceRoutine+0x4e>
	  {
		  Move_Forward(Leftmotor, Rightmotor);
 8001094:	6839      	ldr	r1, [r7, #0]
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f836 	bl	8001108 <Move_Forward>
	  }
	  else
	  {
		  Move_Stop(Leftmotor, Rightmotor);
	  }
}
 800109c:	e012      	b.n	80010c4 <L298N_MotorHoldDistanceRoutine+0x74>
	  else if(Distance_f < 5.5)
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <L298N_MotorHoldDistanceRoutine+0x80>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	eeb1 7a06 	vmov.f32	s14, #22	; 0x40b00000  5.5
 80010a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b0:	d504      	bpl.n	80010bc <L298N_MotorHoldDistanceRoutine+0x6c>
		 Move_Backward(Leftmotor, Rightmotor);
 80010b2:	6839      	ldr	r1, [r7, #0]
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f861 	bl	800117c <Move_Backward>
}
 80010ba:	e003      	b.n	80010c4 <L298N_MotorHoldDistanceRoutine+0x74>
		  Move_Stop(Leftmotor, Rightmotor);
 80010bc:	6839      	ldr	r1, [r7, #0]
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f90a 	bl	80012d8 <Move_Stop>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000004 	.word	0x20000004
 80010d0:	20000080 	.word	0x20000080

080010d4 <Wrong_Data>:

void Wrong_Data()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
	uint8_t msg[28], Length;

	Length = sprintf((char*)msg, "Wrong command, try again\n\r");
 80010da:	463b      	mov	r3, r7
 80010dc:	4908      	ldr	r1, [pc, #32]	; (8001100 <Wrong_Data+0x2c>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 fd04 	bl	8005aec <siprintf>
 80010e4:	4603      	mov	r3, r0
 80010e6:	77fb      	strb	r3, [r7, #31]
	HAL_UART_Transmit(&huart1, msg, Length, 2000);
 80010e8:	7ffb      	ldrb	r3, [r7, #31]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4639      	mov	r1, r7
 80010ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <Wrong_Data+0x30>)
 80010f4:	f003 fccf 	bl	8004a96 <HAL_UART_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	0800644c 	.word	0x0800644c
 8001104:	20000204 	.word	0x20000204

08001108 <Move_Forward>:

void Move_Forward(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
	uint16_t left_speed, right_speed;

	//Read set speed and change it to 100% for startup
	Motor_Startup(&left_speed, &right_speed);
 8001112:	f107 020c 	add.w	r2, r7, #12
 8001116:	f107 030e 	add.w	r3, r7, #14
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f91b 	bl	8001358 <Motor_Startup>

	HAL_GPIO_WritePin(Leftmotor->MotorForward_Port, Leftmotor->MotorForward_Pin, GPIO_PIN_SET);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6858      	ldr	r0, [r3, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	891b      	ldrh	r3, [r3, #8]
 800112a:	2201      	movs	r2, #1
 800112c:	4619      	mov	r1, r3
 800112e:	f001 fb8f 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Leftmotor->MotorBackward_Port, Leftmotor->MotorBackward_Pin, GPIO_PIN_RESET);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68d8      	ldr	r0, [r3, #12]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	8a1b      	ldrh	r3, [r3, #16]
 800113a:	2200      	movs	r2, #0
 800113c:	4619      	mov	r1, r3
 800113e:	f001 fb87 	bl	8002850 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Rightmotor->MotorForward_Port, Rightmotor->MotorForward_Pin, GPIO_PIN_SET);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	6858      	ldr	r0, [r3, #4]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	891b      	ldrh	r3, [r3, #8]
 800114a:	2201      	movs	r2, #1
 800114c:	4619      	mov	r1, r3
 800114e:	f001 fb7f 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rightmotor->MotorBackward_Port, Rightmotor->MotorBackward_Pin, GPIO_PIN_RESET);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68d8      	ldr	r0, [r3, #12]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	8a1b      	ldrh	r3, [r3, #16]
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	f001 fb77 	bl	8002850 <HAL_GPIO_WritePin>

	//time needed to overcome static friction before changing to set speed
	HAL_Delay(STARTUP_TIME);
 8001162:	2005      	movs	r0, #5
 8001164:	f001 f810 	bl	8002188 <HAL_Delay>

	Motor_SetSpeed(left_speed, right_speed);
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	89ba      	ldrh	r2, [r7, #12]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f8dc 	bl	800132c <Motor_SetSpeed>
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <Move_Backward>:

void Move_Backward(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	uint16_t left_speed, right_speed;

	//Read set speed and change it to 100% for startup
	Motor_Startup(&left_speed, &right_speed);
 8001186:	f107 020c 	add.w	r2, r7, #12
 800118a:	f107 030e 	add.w	r3, r7, #14
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f8e1 	bl	8001358 <Motor_Startup>

	HAL_GPIO_WritePin(Leftmotor->MotorForward_Port, Leftmotor->MotorForward_Pin, GPIO_PIN_RESET);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6858      	ldr	r0, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	891b      	ldrh	r3, [r3, #8]
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	f001 fb55 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Leftmotor->MotorBackward_Port, Leftmotor->MotorBackward_Pin, GPIO_PIN_SET);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68d8      	ldr	r0, [r3, #12]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	8a1b      	ldrh	r3, [r3, #16]
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	f001 fb4d 	bl	8002850 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Rightmotor->MotorForward_Port, Rightmotor->MotorForward_Pin, GPIO_PIN_RESET);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	6858      	ldr	r0, [r3, #4]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	891b      	ldrh	r3, [r3, #8]
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	f001 fb45 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rightmotor->MotorBackward_Port, Rightmotor->MotorBackward_Pin, GPIO_PIN_SET);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68d8      	ldr	r0, [r3, #12]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	8a1b      	ldrh	r3, [r3, #16]
 80011ce:	2201      	movs	r2, #1
 80011d0:	4619      	mov	r1, r3
 80011d2:	f001 fb3d 	bl	8002850 <HAL_GPIO_WritePin>

	//time needed to overcome static friction before changing to set speed
	HAL_Delay(STARTUP_TIME);
 80011d6:	2005      	movs	r0, #5
 80011d8:	f000 ffd6 	bl	8002188 <HAL_Delay>

	Motor_SetSpeed(left_speed, right_speed);
 80011dc:	89fb      	ldrh	r3, [r7, #14]
 80011de:	89ba      	ldrh	r2, [r7, #12]
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f8a2 	bl	800132c <Motor_SetSpeed>
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <Move_Left>:

void Move_Left(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
	uint16_t left_speed, right_speed;

	//Read set speed and change it to 100% for startup
	Motor_Startup(&left_speed, &right_speed);
 80011fa:	f107 020c 	add.w	r2, r7, #12
 80011fe:	f107 030e 	add.w	r3, r7, #14
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f8a7 	bl	8001358 <Motor_Startup>

	HAL_GPIO_WritePin(Leftmotor->MotorForward_Port, Leftmotor->MotorForward_Pin, GPIO_PIN_RESET);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6858      	ldr	r0, [r3, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	891b      	ldrh	r3, [r3, #8]
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	f001 fb1b 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Leftmotor->MotorBackward_Port, Leftmotor->MotorBackward_Pin, GPIO_PIN_SET);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68d8      	ldr	r0, [r3, #12]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	8a1b      	ldrh	r3, [r3, #16]
 8001222:	2201      	movs	r2, #1
 8001224:	4619      	mov	r1, r3
 8001226:	f001 fb13 	bl	8002850 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Rightmotor->MotorForward_Port, Rightmotor->MotorForward_Pin, GPIO_PIN_SET);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	6858      	ldr	r0, [r3, #4]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	891b      	ldrh	r3, [r3, #8]
 8001232:	2201      	movs	r2, #1
 8001234:	4619      	mov	r1, r3
 8001236:	f001 fb0b 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rightmotor->MotorBackward_Port, Rightmotor->MotorBackward_Pin, GPIO_PIN_RESET);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68d8      	ldr	r0, [r3, #12]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	8a1b      	ldrh	r3, [r3, #16]
 8001242:	2200      	movs	r2, #0
 8001244:	4619      	mov	r1, r3
 8001246:	f001 fb03 	bl	8002850 <HAL_GPIO_WritePin>

	//time needed to overcome static friction before changing to set speed
	HAL_Delay(STARTUP_TIME);
 800124a:	2005      	movs	r0, #5
 800124c:	f000 ff9c 	bl	8002188 <HAL_Delay>

	Motor_SetSpeed(left_speed, right_speed);
 8001250:	89fb      	ldrh	r3, [r7, #14]
 8001252:	89ba      	ldrh	r2, [r7, #12]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f868 	bl	800132c <Motor_SetSpeed>

}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <Move_Right>:

void Move_Right(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
	uint16_t left_speed, right_speed;

	//Read set speed and change it to 100% for startup
	Motor_Startup(&left_speed, &right_speed);
 800126e:	f107 020c 	add.w	r2, r7, #12
 8001272:	f107 030e 	add.w	r3, r7, #14
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f000 f86d 	bl	8001358 <Motor_Startup>

	HAL_GPIO_WritePin(Leftmotor->MotorForward_Port, Leftmotor->MotorForward_Pin, GPIO_PIN_SET);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6858      	ldr	r0, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	891b      	ldrh	r3, [r3, #8]
 8001286:	2201      	movs	r2, #1
 8001288:	4619      	mov	r1, r3
 800128a:	f001 fae1 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Leftmotor->MotorBackward_Port, Leftmotor->MotorBackward_Pin, GPIO_PIN_RESET);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68d8      	ldr	r0, [r3, #12]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	8a1b      	ldrh	r3, [r3, #16]
 8001296:	2200      	movs	r2, #0
 8001298:	4619      	mov	r1, r3
 800129a:	f001 fad9 	bl	8002850 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Rightmotor->MotorForward_Port, Rightmotor->MotorForward_Pin, GPIO_PIN_RESET);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	6858      	ldr	r0, [r3, #4]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	891b      	ldrh	r3, [r3, #8]
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	f001 fad1 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rightmotor->MotorBackward_Port, Rightmotor->MotorBackward_Pin, GPIO_PIN_SET);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68d8      	ldr	r0, [r3, #12]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	8a1b      	ldrh	r3, [r3, #16]
 80012b6:	2201      	movs	r2, #1
 80012b8:	4619      	mov	r1, r3
 80012ba:	f001 fac9 	bl	8002850 <HAL_GPIO_WritePin>

	//time needed to overcome static friction before changing to set speed
	HAL_Delay(STARTUP_TIME);
 80012be:	2005      	movs	r0, #5
 80012c0:	f000 ff62 	bl	8002188 <HAL_Delay>

	Motor_SetSpeed(left_speed, right_speed);
 80012c4:	89fb      	ldrh	r3, [r7, #14]
 80012c6:	89ba      	ldrh	r2, [r7, #12]
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f82e 	bl	800132c <Motor_SetSpeed>
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <Move_Stop>:

void Move_Stop(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Leftmotor->MotorForward_Port, Leftmotor->MotorForward_Pin, GPIO_PIN_RESET);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6858      	ldr	r0, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	891b      	ldrh	r3, [r3, #8]
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	f001 faaf 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Leftmotor->MotorBackward_Port, Leftmotor->MotorBackward_Pin, GPIO_PIN_RESET);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68d8      	ldr	r0, [r3, #12]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	8a1b      	ldrh	r3, [r3, #16]
 80012fa:	2200      	movs	r2, #0
 80012fc:	4619      	mov	r1, r3
 80012fe:	f001 faa7 	bl	8002850 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Rightmotor->MotorForward_Port, Rightmotor->MotorForward_Pin, GPIO_PIN_RESET);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6858      	ldr	r0, [r3, #4]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	891b      	ldrh	r3, [r3, #8]
 800130a:	2200      	movs	r2, #0
 800130c:	4619      	mov	r1, r3
 800130e:	f001 fa9f 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rightmotor->MotorBackward_Port, Rightmotor->MotorBackward_Pin, GPIO_PIN_RESET);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	68d8      	ldr	r0, [r3, #12]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	8a1b      	ldrh	r3, [r3, #16]
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	f001 fa97 	bl	8002850 <HAL_GPIO_WritePin>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <Motor_SetSpeed>:

void Motor_SetSpeed(uint16_t left_speed, uint16_t right_speed)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	460a      	mov	r2, r1
 8001336:	80fb      	strh	r3, [r7, #6]
 8001338:	4613      	mov	r3, r2
 800133a:	80bb      	strh	r3, [r7, #4]
	//write set speed
	TIM_LEFTMOTOR->TIM_LEFTMOTOR_CHANNEL = left_speed;
 800133c:	4a05      	ldr	r2, [pc, #20]	; (8001354 <Motor_SetSpeed+0x28>)
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	6353      	str	r3, [r2, #52]	; 0x34
	TIM_RIGHTMOTOR->TIM_RIGHTMOTOR_CHANNEL = right_speed;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <Motor_SetSpeed+0x28>)
 8001344:	88bb      	ldrh	r3, [r7, #4]
 8001346:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40000400 	.word	0x40000400

08001358 <Motor_Startup>:

//Read set speed and change it to 100% for startup
void Motor_Startup(uint16_t* left_speed, uint16_t* right_speed)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	//Read set speed
	*left_speed = TIM_LEFTMOTOR->TIM_LEFTMOTOR_CHANNEL;
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <Motor_Startup+0x3c>)
 8001364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001366:	b29a      	uxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	801a      	strh	r2, [r3, #0]
	*right_speed = TIM_RIGHTMOTOR->TIM_RIGHTMOTOR_CHANNEL;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <Motor_Startup+0x3c>)
 800136e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001370:	b29a      	uxth	r2, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	801a      	strh	r2, [r3, #0]
	//Change speed to 100% for startup to overcome static friction (cheap motors)
	TIM_LEFTMOTOR->TIM_LEFTMOTOR_CHANNEL = FULL_SPEED;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <Motor_Startup+0x3c>)
 8001378:	f240 32e7 	movw	r2, #999	; 0x3e7
 800137c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_RIGHTMOTOR->TIM_RIGHTMOTOR_CHANNEL = FULL_SPEED;
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <Motor_Startup+0x3c>)
 8001380:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001384:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40000400 	.word	0x40000400

08001398 <RB_Write>:


#include "RingBuffer.h"

RB_Status RB_Write(RingBuffer_t* Buff, uint8_t Value)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]
	uint8_t HeadTmp = (Buff->Head + 1) % (RING_BUFFER_SIZE); //modulo to avoid accessing element outside of table
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	8a1b      	ldrh	r3, [r3, #16]
 80013a8:	3301      	adds	r3, #1
 80013aa:	425a      	negs	r2, r3
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	f002 020f 	and.w	r2, r2, #15
 80013b4:	bf58      	it	pl
 80013b6:	4253      	negpl	r3, r2
 80013b8:	73fb      	strb	r3, [r7, #15]

	if(HeadTmp == Buff->Tail)
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	8a5b      	ldrh	r3, [r3, #18]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d101      	bne.n	80013ca <RB_Write+0x32>
	{
		return RB_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00a      	b.n	80013e0 <RB_Write+0x48>
	}

	Buff->Buffer[Buff->Head] = Value;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	8a1b      	ldrh	r3, [r3, #16]
 80013ce:	4619      	mov	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	78fa      	ldrb	r2, [r7, #3]
 80013d4:	545a      	strb	r2, [r3, r1]
	Buff->Head = HeadTmp;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	b29a      	uxth	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	821a      	strh	r2, [r3, #16]

	return RB_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <RB_Read>:

RB_Status RB_Read(RingBuffer_t* Buff, uint8_t* Value)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
	if(Buff->Head == Buff->Tail)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	8a1a      	ldrh	r2, [r3, #16]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	8a5b      	ldrh	r3, [r3, #18]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d101      	bne.n	8001406 <RB_Read+0x1a>
	{
		return RB_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e014      	b.n	8001430 <RB_Read+0x44>
	}

	*Value = Buff->Buffer[Buff->Tail];
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	8a5b      	ldrh	r3, [r3, #18]
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	5c9a      	ldrb	r2, [r3, r2]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	701a      	strb	r2, [r3, #0]
	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE; //modulo to avoid accessing element outside of table
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	8a5b      	ldrh	r3, [r3, #18]
 8001418:	3301      	adds	r3, #1
 800141a:	425a      	negs	r2, r3
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	f002 020f 	and.w	r2, r2, #15
 8001424:	bf58      	it	pl
 8001426:	4253      	negpl	r3, r2
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	825a      	strh	r2, [r3, #18]

	return RB_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <RB_Flush>:

void RB_Flush(RingBuffer_t* Buff)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	Buff->Head = 0;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	821a      	strh	r2, [r3, #16]
	Buff->Tail = 0;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	825a      	strh	r2, [r3, #18]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b37      	ldr	r3, [pc, #220]	; (8001554 <MX_GPIO_Init+0xf8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a36      	ldr	r2, [pc, #216]	; (8001554 <MX_GPIO_Init+0xf8>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b34      	ldr	r3, [pc, #208]	; (8001554 <MX_GPIO_Init+0xf8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <MX_GPIO_Init+0xf8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a2f      	ldr	r2, [pc, #188]	; (8001554 <MX_GPIO_Init+0xf8>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <MX_GPIO_Init+0xf8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b29      	ldr	r3, [pc, #164]	; (8001554 <MX_GPIO_Init+0xf8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a28      	ldr	r2, [pc, #160]	; (8001554 <MX_GPIO_Init+0xf8>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <MX_GPIO_Init+0xf8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <MX_GPIO_Init+0xf8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a21      	ldr	r2, [pc, #132]	; (8001554 <MX_GPIO_Init+0xf8>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <MX_GPIO_Init+0xf8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2120      	movs	r1, #32
 80014e6:	481c      	ldr	r0, [pc, #112]	; (8001558 <MX_GPIO_Init+0xfc>)
 80014e8:	f001 f9b2 	bl	8002850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RightMotor_FWD_Pin|RightMotor_BWD_Pin|LeftMotor_FWD_Pin|LeftMotor_BWD_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f246 0130 	movw	r1, #24624	; 0x6030
 80014f2:	481a      	ldr	r0, [pc, #104]	; (800155c <MX_GPIO_Init+0x100>)
 80014f4:	f001 f9ac 	bl	8002850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	4814      	ldr	r0, [pc, #80]	; (8001560 <MX_GPIO_Init+0x104>)
 800150e:	f001 f803 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001512:	2320      	movs	r3, #32
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	480b      	ldr	r0, [pc, #44]	; (8001558 <MX_GPIO_Init+0xfc>)
 800152a:	f000 fff5 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RightMotor_FWD_Pin|RightMotor_BWD_Pin|LeftMotor_FWD_Pin|LeftMotor_BWD_Pin;
 800152e:	f246 0330 	movw	r3, #24624	; 0x6030
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001538:	2302      	movs	r3, #2
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_GPIO_Init+0x100>)
 8001548:	f000 ffe6 	bl	8002518 <HAL_GPIO_Init>

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000
 800155c:	40020400 	.word	0x40020400
 8001560:	40020800 	.word	0x40020800

08001564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156a:	f000 fd9b 	bl	80020a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156e:	f000 f86f 	bl	8001650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001572:	f7ff ff73 	bl	800145c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001576:	f000 fb39 	bl	8001bec <MX_TIM2_Init>
  MX_TIM1_Init();
 800157a:	f000 fa63 	bl	8001a44 <MX_TIM1_Init>
  MX_TIM3_Init();
 800157e:	f000 fb81 	bl	8001c84 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001582:	f000 fcd3 	bl	8001f2c <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001586:	f000 f8cd 	bl	8001724 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HCSR04p_Init(&HCSR04p_front, &HCSR04p_TRIGGER_TIMER, HCSR04p_TRIG_CHANNEL, &HCSR04p_ECHO_TIMER, HCSR04p_START_CHANNEL, HCSR04p_STOP_CHANNEL);
 800158a:	2304      	movs	r3, #4
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	2300      	movs	r3, #0
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <main+0xb8>)
 8001594:	2208      	movs	r2, #8
 8001596:	4921      	ldr	r1, [pc, #132]	; (800161c <main+0xb8>)
 8001598:	4821      	ldr	r0, [pc, #132]	; (8001620 <main+0xbc>)
 800159a:	f7ff fbc8 	bl	8000d2e <HCSR04p_Init>

  Button_Init(&BlueKey, B1_GPIO_Port, B1_Pin, 20);
 800159e:	2314      	movs	r3, #20
 80015a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a4:	491f      	ldr	r1, [pc, #124]	; (8001624 <main+0xc0>)
 80015a6:	4820      	ldr	r0, [pc, #128]	; (8001628 <main+0xc4>)
 80015a8:	f7ff fb1e 	bl	8000be8 <Button_Init>

  L298N_MotorInit(&LeftMotor, LeftMotor_FWD_GPIO_Port, LeftMotor_FWD_Pin, LeftMotor_BWD_GPIO_Port, LeftMotor_BWD_Pin);
 80015ac:	2320      	movs	r3, #32
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <main+0xc8>)
 80015b2:	2210      	movs	r2, #16
 80015b4:	491d      	ldr	r1, [pc, #116]	; (800162c <main+0xc8>)
 80015b6:	481e      	ldr	r0, [pc, #120]	; (8001630 <main+0xcc>)
 80015b8:	f7ff fc36 	bl	8000e28 <L298N_MotorInit>
  L298N_MotorInit(&RightMotor, RightMotor_FWD_GPIO_Port, RightMotor_FWD_Pin, RightMotor_BWD_GPIO_Port, RightMotor_BWD_Pin);
 80015bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <main+0xc8>)
 80015c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c8:	4918      	ldr	r1, [pc, #96]	; (800162c <main+0xc8>)
 80015ca:	481a      	ldr	r0, [pc, #104]	; (8001634 <main+0xd0>)
 80015cc:	f7ff fc2c 	bl	8000e28 <L298N_MotorInit>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Left motor speed
 80015d0:	2100      	movs	r1, #0
 80015d2:	4819      	ldr	r0, [pc, #100]	; (8001638 <main+0xd4>)
 80015d4:	f001 ff0c 	bl	80033f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //Right motor speed
 80015d8:	2104      	movs	r1, #4
 80015da:	4817      	ldr	r0, [pc, #92]	; (8001638 <main+0xd4>)
 80015dc:	f001 ff08 	bl	80033f0 <HAL_TIM_PWM_Start>

  Status_RX = HAL_UART_Receive_IT(&huart1, &RX_Temp, 1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	4916      	ldr	r1, [pc, #88]	; (800163c <main+0xd8>)
 80015e4:	4816      	ldr	r0, [pc, #88]	; (8001640 <main+0xdc>)
 80015e6:	f003 fae8 	bl	8004bba <HAL_UART_Receive_IT>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <main+0xe0>)
 80015f0:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); //Turn LED to inform that initialisation ended
 80015f2:	2201      	movs	r2, #1
 80015f4:	2120      	movs	r1, #32
 80015f6:	4814      	ldr	r0, [pc, #80]	; (8001648 <main+0xe4>)
 80015f8:	f001 f92a 	bl	8002850 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Button_Task(&BlueKey); //Check button state
 80015fc:	480a      	ldr	r0, [pc, #40]	; (8001628 <main+0xc4>)
 80015fe:	f7ff fb77 	bl	8000cf0 <Button_Task>

	  if(RobotEnable)
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <main+0xe8>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <main+0xac>
	  {
		  Robot_Operation();
 800160a:	f000 f92d 	bl	8001868 <Robot_Operation>
 800160e:	e7f5      	b.n	80015fc <main+0x98>
	  }
	  else
	  {
		  Move_Stop(&LeftMotor, &RightMotor);
 8001610:	4908      	ldr	r1, [pc, #32]	; (8001634 <main+0xd0>)
 8001612:	4807      	ldr	r0, [pc, #28]	; (8001630 <main+0xcc>)
 8001614:	f7ff fe60 	bl	80012d8 <Move_Stop>
	  Button_Task(&BlueKey); //Check button state
 8001618:	e7f0      	b.n	80015fc <main+0x98>
 800161a:	bf00      	nop
 800161c:	2000012c 	.word	0x2000012c
 8001620:	20000084 	.word	0x20000084
 8001624:	40020800 	.word	0x40020800
 8001628:	200000a0 	.word	0x200000a0
 800162c:	40020400 	.word	0x40020400
 8001630:	200000e8 	.word	0x200000e8
 8001634:	200000fc 	.word	0x200000fc
 8001638:	200001bc 	.word	0x200001bc
 800163c:	20000124 	.word	0x20000124
 8001640:	20000204 	.word	0x20000204
 8001644:	200000e4 	.word	0x200000e4
 8001648:	40020000 	.word	0x40020000
 800164c:	2000009c 	.word	0x2000009c

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b094      	sub	sp, #80	; 0x50
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	2230      	movs	r2, #48	; 0x30
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fa64 	bl	8005b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <SystemClock_Config+0xcc>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	4a27      	ldr	r2, [pc, #156]	; (800171c <SystemClock_Config+0xcc>)
 800167e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001682:	6413      	str	r3, [r2, #64]	; 0x40
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <SystemClock_Config+0xcc>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <SystemClock_Config+0xd0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a21      	ldr	r2, [pc, #132]	; (8001720 <SystemClock_Config+0xd0>)
 800169a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <SystemClock_Config+0xd0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ac:	2302      	movs	r3, #2
 80016ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b0:	2301      	movs	r3, #1
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b4:	2310      	movs	r3, #16
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b8:	2302      	movs	r3, #2
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016bc:	2300      	movs	r3, #0
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016c0:	2310      	movs	r3, #16
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80016c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016ca:	2304      	movs	r3, #4
 80016cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016ce:	2304      	movs	r3, #4
 80016d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d2:	f107 0320 	add.w	r3, r7, #32
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 f8ee 	bl	80028b8 <HAL_RCC_OscConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016e2:	f000 f8d5 	bl	8001890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e6:	230f      	movs	r3, #15
 80016e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ea:	2302      	movs	r3, #2
 80016ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fb50 	bl	8002da8 <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800170e:	f000 f8bf 	bl	8001890 <Error_Handler>
  }
}
 8001712:	bf00      	nop
 8001714:	3750      	adds	r7, #80	; 0x50
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000

08001724 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	201b      	movs	r0, #27
 800172e:	f000 fe2a 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001732:	201b      	movs	r0, #27
 8001734:	f000 fe43 	bl	80023be <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	2025      	movs	r0, #37	; 0x25
 800173e:	f000 fe22 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001742:	2025      	movs	r0, #37	; 0x25
 8001744:	f000 fe3b 	bl	80023be <HAL_NVIC_EnableIRQ>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	if (htim == HCSR04p_front.htim_echo)
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	429a      	cmp	r2, r3
 800175c:	d106      	bne.n	800176c <HAL_TIM_IC_CaptureCallback+0x20>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7f1b      	ldrb	r3, [r3, #28]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d102      	bne.n	800176c <HAL_TIM_IC_CaptureCallback+0x20>
		{
			HCSR04p_InteruptHandler(&HCSR04p_front);
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001768:	f7ff fb46 	bl	8000df8 <HCSR04p_InteruptHandler>
		}
	}
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000084 	.word	0x20000084

08001778 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a2a      	ldr	r2, [pc, #168]	; (8001830 <HAL_UART_RxCpltCallback+0xb8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d14e      	bne.n	8001828 <HAL_UART_RxCpltCallback+0xb0>
	{
		if(Status_RX != HAL_OK)
 800178a:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <HAL_UART_RxCpltCallback+0xbc>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d014      	beq.n	80017bc <HAL_UART_RxCpltCallback+0x44>
		{
			Length = sprintf((char*)Msg, "Error while receiving data\n\r");
 8001792:	4929      	ldr	r1, [pc, #164]	; (8001838 <HAL_UART_RxCpltCallback+0xc0>)
 8001794:	4829      	ldr	r0, [pc, #164]	; (800183c <HAL_UART_RxCpltCallback+0xc4>)
 8001796:	f004 f9a9 	bl	8005aec <siprintf>
 800179a:	4603      	mov	r3, r0
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b28      	ldr	r3, [pc, #160]	; (8001840 <HAL_UART_RxCpltCallback+0xc8>)
 80017a0:	701a      	strb	r2, [r3, #0]
			Status_TX = HAL_UART_Transmit(&huart1, Msg, Length, 200);
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_UART_RxCpltCallback+0xc8>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	23c8      	movs	r3, #200	; 0xc8
 80017aa:	4924      	ldr	r1, [pc, #144]	; (800183c <HAL_UART_RxCpltCallback+0xc4>)
 80017ac:	4825      	ldr	r0, [pc, #148]	; (8001844 <HAL_UART_RxCpltCallback+0xcc>)
 80017ae:	f003 f972 	bl	8004a96 <HAL_UART_Transmit>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_UART_RxCpltCallback+0xd0>)
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	e02c      	b.n	8001816 <HAL_UART_RxCpltCallback+0x9e>
		}
		else
		{
			if(RobotEnable)
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_UART_RxCpltCallback+0xd4>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d028      	beq.n	8001816 <HAL_UART_RxCpltCallback+0x9e>
			{
				if(RB_OK == RB_Write(&RX_Buffer, RX_Temp))
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <HAL_UART_RxCpltCallback+0xd8>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4822      	ldr	r0, [pc, #136]	; (8001854 <HAL_UART_RxCpltCallback+0xdc>)
 80017cc:	f7ff fde4 	bl	8001398 <RB_Write>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d11f      	bne.n	8001816 <HAL_UART_RxCpltCallback+0x9e>
				{
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017d6:	2120      	movs	r1, #32
 80017d8:	481f      	ldr	r0, [pc, #124]	; (8001858 <HAL_UART_RxCpltCallback+0xe0>)
 80017da:	f001 f852 	bl	8002882 <HAL_GPIO_TogglePin>
					//*ptrMotor_Action_Flag = true;

					if(RX_Temp == END_LINE)
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <HAL_UART_RxCpltCallback+0xd8>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b0a      	cmp	r3, #10
 80017e4:	d105      	bne.n	80017f2 <HAL_UART_RxCpltCallback+0x7a>
					{
						RX_Lines++;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_UART_RxCpltCallback+0xe4>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_UART_RxCpltCallback+0xe4>)
 80017f0:	701a      	strb	r2, [r3, #0]
						//*ptrMotor_Action_Flag = true;
					}
					if(RX_Lines > 0)
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_UART_RxCpltCallback+0xe4>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00d      	beq.n	8001816 <HAL_UART_RxCpltCallback+0x9e>
					{
					  Parser_TakeLine(&RX_Buffer, HC05_Command);
 80017fa:	4919      	ldr	r1, [pc, #100]	; (8001860 <HAL_UART_RxCpltCallback+0xe8>)
 80017fc:	4815      	ldr	r0, [pc, #84]	; (8001854 <HAL_UART_RxCpltCallback+0xdc>)
 80017fe:	f000 f84c 	bl	800189a <Parser_TakeLine>
					  RX_Lines--;
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_UART_RxCpltCallback+0xe4>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	3b01      	subs	r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_UART_RxCpltCallback+0xe4>)
 800180c:	701a      	strb	r2, [r3, #0]
					  *ptrMotor_Action_Flag = true;
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_UART_RxCpltCallback+0xec>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		Status_RX = HAL_UART_Receive_IT(&huart1, &RX_Temp, 1);
 8001816:	2201      	movs	r2, #1
 8001818:	490d      	ldr	r1, [pc, #52]	; (8001850 <HAL_UART_RxCpltCallback+0xd8>)
 800181a:	480a      	ldr	r0, [pc, #40]	; (8001844 <HAL_UART_RxCpltCallback+0xcc>)
 800181c:	f003 f9cd 	bl	8004bba <HAL_UART_Receive_IT>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_UART_RxCpltCallback+0xbc>)
 8001826:	701a      	strb	r2, [r3, #0]
	}
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40011000 	.word	0x40011000
 8001834:	200000e4 	.word	0x200000e4
 8001838:	08006468 	.word	0x08006468
 800183c:	200000b4 	.word	0x200000b4
 8001840:	200000d2 	.word	0x200000d2
 8001844:	20000204 	.word	0x20000204
 8001848:	200000e5 	.word	0x200000e5
 800184c:	2000009c 	.word	0x2000009c
 8001850:	20000124 	.word	0x20000124
 8001854:	20000110 	.word	0x20000110
 8001858:	40020000 	.word	0x40020000
 800185c:	20000125 	.word	0x20000125
 8001860:	200000d4 	.word	0x200000d4
 8001864:	20000004 	.word	0x20000004

08001868 <Robot_Operation>:

void Robot_Operation()
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
//	{
//	  Parser_TakeLine(&RX_Buffer, HC05_Command);
//	  RX_Lines--;
//	}

	HCSR04p_ReadFloat(&HCSR04p_front, &Distance_f);
 800186c:	4904      	ldr	r1, [pc, #16]	; (8001880 <Robot_Operation+0x18>)
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <Robot_Operation+0x1c>)
 8001870:	f7ff fa9a 	bl	8000da8 <HCSR04p_ReadFloat>
	L298N_MotorTask(&LeftMotor, &RightMotor);
 8001874:	4904      	ldr	r1, [pc, #16]	; (8001888 <Robot_Operation+0x20>)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <Robot_Operation+0x24>)
 8001878:	f7ff faf3 	bl	8000e62 <L298N_MotorTask>
	//Hold_Distance(&Distance_f);
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000080 	.word	0x20000080
 8001884:	20000084 	.word	0x20000084
 8001888:	200000fc 	.word	0x200000fc
 800188c:	200000e8 	.word	0x200000e8

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001898:	e7fe      	b.n	8001898 <Error_Handler+0x8>

0800189a <Parser_TakeLine>:

#include "simple_parser.h"


void Parser_TakeLine(RingBuffer_t* Buff, uint8_t* Destination)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b084      	sub	sp, #16
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
	  uint8_t i = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	73fb      	strb	r3, [r7, #15]
	  uint8_t Tmp;

	  do
	  {
		  RB_Read(Buff, &Tmp);
 80018a8:	f107 030e 	add.w	r3, r7, #14
 80018ac:	4619      	mov	r1, r3
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fd9c 	bl	80013ec <RB_Read>

		  if(Tmp == END_LINE)
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	2b0a      	cmp	r3, #10
 80018b8:	d105      	bne.n	80018c6 <Parser_TakeLine+0x2c>
		  {
			  Destination[i] = 0;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e004      	b.n	80018d0 <Parser_TakeLine+0x36>
		  }
		  else
		  {
			  Destination[i] = Tmp;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	7bba      	ldrb	r2, [r7, #14]
 80018ce:	701a      	strb	r2, [r3, #0]
		  }

		  i++;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	3301      	adds	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]

	  }while(Tmp != END_LINE);
 80018d6:	7bbb      	ldrb	r3, [r7, #14]
 80018d8:	2b0a      	cmp	r3, #10
 80018da:	d1e5      	bne.n	80018a8 <Parser_TakeLine+0xe>
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_MspInit+0x4c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <HAL_MspInit+0x4c>)
 80018f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <HAL_MspInit+0x4c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_MspInit+0x4c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_MspInit+0x4c>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001926:	2007      	movs	r0, #7
 8001928:	f000 fd22 	bl	8002370 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800193c:	e7fe      	b.n	800193c <NMI_Handler+0x4>

0800193e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler+0x4>

0800194a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <BusFault_Handler+0x4>

08001950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler+0x4>

08001956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f000 fbe0 	bl	8002148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <TIM1_CC_IRQHandler+0x10>)
 8001992:	f002 f81f 	bl	80039d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000012c 	.word	0x2000012c

080019a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <USART1_IRQHandler+0x10>)
 80019a6:	f003 f939 	bl	8004c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000204 	.word	0x20000204

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d207      	bcs.n	80019f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e4:	f004 f8aa 	bl	8005b3c <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220c      	movs	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20020000 	.word	0x20020000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	20000128 	.word	0x20000128
 8001a1c:	20000398 	.word	0x20000398

08001a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <SystemInit+0x20>)
 8001a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <SystemInit+0x20>)
 8001a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b09a      	sub	sp, #104	; 0x68
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	615a      	str	r2, [r3, #20]
 8001a82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2220      	movs	r2, #32
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f004 f84e 	bl	8005b2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a90:	4b54      	ldr	r3, [pc, #336]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001a92:	4a55      	ldr	r2, [pc, #340]	; (8001be8 <MX_TIM1_Init+0x1a4>)
 8001a94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8001a96:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001a98:	2254      	movs	r2, #84	; 0x54
 8001a9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b51      	ldr	r3, [pc, #324]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001aa2:	4b50      	ldr	r3, [pc, #320]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ab0:	4b4c      	ldr	r3, [pc, #304]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b4b      	ldr	r3, [pc, #300]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001abc:	4849      	ldr	r0, [pc, #292]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001abe:	f001 fb93 	bl	80031e8 <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001ac8:	f7ff fee2 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ad2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4842      	ldr	r0, [pc, #264]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001ada:	f002 f9e1 	bl	8003ea0 <HAL_TIM_ConfigClockSource>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001ae4:	f7ff fed4 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001ae8:	483e      	ldr	r0, [pc, #248]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001aea:	f001 fd31 	bl	8003550 <HAL_TIM_IC_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001af4:	f7ff fecc 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001af8:	483a      	ldr	r0, [pc, #232]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001afa:	f001 fc1f 	bl	800333c <HAL_TIM_PWM_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b04:	f7ff fec4 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b14:	4619      	mov	r1, r3
 8001b16:	4833      	ldr	r0, [pc, #204]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001b18:	f002 fe9c 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001b22:	f7ff feb5 	bl	8001890 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b26:	2300      	movs	r3, #0
 8001b28:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4829      	ldr	r0, [pc, #164]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001b40:	f002 f850 	bl	8003be4 <HAL_TIM_IC_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001b4a:	f7ff fea1 	bl	8001890 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b52:	2302      	movs	r3, #2
 8001b54:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4821      	ldr	r0, [pc, #132]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001b60:	f002 f840 	bl	8003be4 <HAL_TIM_IC_ConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001b6a:	f7ff fe91 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6e:	2360      	movs	r3, #96	; 0x60
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10;
 8001b72:	230a      	movs	r3, #10
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8e:	2208      	movs	r2, #8
 8001b90:	4619      	mov	r1, r3
 8001b92:	4814      	ldr	r0, [pc, #80]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001b94:	f002 f8c2 	bl	8003d1c <HAL_TIM_PWM_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8001b9e:	f7ff fe77 	bl	8001890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4807      	ldr	r0, [pc, #28]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001bc6:	f002 feb3 	bl	8004930 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001bd0:	f7ff fe5e 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bd4:	4803      	ldr	r0, [pc, #12]	; (8001be4 <MX_TIM1_Init+0x1a0>)
 8001bd6:	f000 f949 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 8001bda:	bf00      	nop
 8001bdc:	3768      	adds	r7, #104	; 0x68
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000012c 	.word	0x2000012c
 8001be8:	40010000 	.word	0x40010000

08001bec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf2:	f107 0308 	add.w	r3, r7, #8
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	463b      	mov	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <MX_TIM2_Init+0x94>)
 8001c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <MX_TIM2_Init+0x94>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <MX_TIM2_Init+0x94>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <MX_TIM2_Init+0x94>)
 8001c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <MX_TIM2_Init+0x94>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <MX_TIM2_Init+0x94>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c30:	4813      	ldr	r0, [pc, #76]	; (8001c80 <MX_TIM2_Init+0x94>)
 8001c32:	f001 fad9 	bl	80031e8 <HAL_TIM_Base_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c3c:	f7ff fe28 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480c      	ldr	r0, [pc, #48]	; (8001c80 <MX_TIM2_Init+0x94>)
 8001c4e:	f002 f927 	bl	8003ea0 <HAL_TIM_ConfigClockSource>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c58:	f7ff fe1a 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c64:	463b      	mov	r3, r7
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_TIM2_Init+0x94>)
 8001c6a:	f002 fdf3 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c74:	f7ff fe0c 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000174 	.word	0x20000174

08001c84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08e      	sub	sp, #56	; 0x38
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c98:	f107 0320 	add.w	r3, r7, #32
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]
 8001cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cb4:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <MX_TIM3_Init+0xfc>)
 8001cb6:	4a33      	ldr	r2, [pc, #204]	; (8001d84 <MX_TIM3_Init+0x100>)
 8001cb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <MX_TIM3_Init+0xfc>)
 8001cbc:	2229      	movs	r2, #41	; 0x29
 8001cbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <MX_TIM3_Init+0xfc>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <MX_TIM3_Init+0xfc>)
 8001cc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ccc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <MX_TIM3_Init+0xfc>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd4:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <MX_TIM3_Init+0xfc>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cda:	4829      	ldr	r0, [pc, #164]	; (8001d80 <MX_TIM3_Init+0xfc>)
 8001cdc:	f001 fa84 	bl	80031e8 <HAL_TIM_Base_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ce6:	f7ff fdd3 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4822      	ldr	r0, [pc, #136]	; (8001d80 <MX_TIM3_Init+0xfc>)
 8001cf8:	f002 f8d2 	bl	8003ea0 <HAL_TIM_ConfigClockSource>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d02:	f7ff fdc5 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d06:	481e      	ldr	r0, [pc, #120]	; (8001d80 <MX_TIM3_Init+0xfc>)
 8001d08:	f001 fb18 	bl	800333c <HAL_TIM_PWM_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d12:	f7ff fdbd 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	4619      	mov	r1, r3
 8001d24:	4816      	ldr	r0, [pc, #88]	; (8001d80 <MX_TIM3_Init+0xfc>)
 8001d26:	f002 fd95 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d30:	f7ff fdae 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d34:	2360      	movs	r3, #96	; 0x60
 8001d36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001d38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480c      	ldr	r0, [pc, #48]	; (8001d80 <MX_TIM3_Init+0xfc>)
 8001d4e:	f001 ffe5 	bl	8003d1c <HAL_TIM_PWM_ConfigChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001d58:	f7ff fd9a 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2204      	movs	r2, #4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4807      	ldr	r0, [pc, #28]	; (8001d80 <MX_TIM3_Init+0xfc>)
 8001d64:	f001 ffda 	bl	8003d1c <HAL_TIM_PWM_ConfigChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001d6e:	f7ff fd8f 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d72:	4803      	ldr	r0, [pc, #12]	; (8001d80 <MX_TIM3_Init+0xfc>)
 8001d74:	f000 f87a 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 8001d78:	bf00      	nop
 8001d7a:	3738      	adds	r7, #56	; 0x38
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200001bc 	.word	0x200001bc
 8001d84:	40000400 	.word	0x40000400

08001d88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	; 0x30
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <HAL_TIM_Base_MspInit+0xd4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d12d      	bne.n	8001e06 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a2b      	ldr	r2, [pc, #172]	; (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HC_SR04p_ECHO_Pin;
 8001de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HC_SR04p_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4819      	ldr	r0, [pc, #100]	; (8001e64 <HAL_TIM_Base_MspInit+0xdc>)
 8001e00:	f000 fb8a 	bl	8002518 <HAL_GPIO_Init>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e04:	e026      	b.n	8001e54 <HAL_TIM_Base_MspInit+0xcc>
  else if(tim_baseHandle->Instance==TIM2)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0e:	d10e      	bne.n	8001e2e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]
}
 8001e2c:	e012      	b.n	8001e54 <HAL_TIM_Base_MspInit+0xcc>
  else if(tim_baseHandle->Instance==TIM3)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <HAL_TIM_Base_MspInit+0xe0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d10d      	bne.n	8001e54 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001e42:	f043 0302 	orr.w	r3, r3, #2
 8001e46:	6413      	str	r3, [r2, #64]	; 0x40
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3730      	adds	r7, #48	; 0x30
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40000400 	.word	0x40000400

08001e6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a24      	ldr	r2, [pc, #144]	; (8001f1c <HAL_TIM_MspPostInit+0xb0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d11f      	bne.n	8001ece <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	4b23      	ldr	r3, [pc, #140]	; (8001f20 <HAL_TIM_MspPostInit+0xb4>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <HAL_TIM_MspPostInit+0xb4>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_TIM_MspPostInit+0xb4>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HC_SR04p_TRIG_Pin;
 8001eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HC_SR04p_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4817      	ldr	r0, [pc, #92]	; (8001f24 <HAL_TIM_MspPostInit+0xb8>)
 8001ec8:	f000 fb26 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ecc:	e022      	b.n	8001f14 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <HAL_TIM_MspPostInit+0xbc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d11d      	bne.n	8001f14 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_TIM_MspPostInit+0xb4>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <HAL_TIM_MspPostInit+0xb4>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_TIM_MspPostInit+0xb4>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightMotor_PWM_Pin|LeftMotor_PWM_Pin;
 8001ef4:	23c0      	movs	r3, #192	; 0xc0
 8001ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f04:	2302      	movs	r3, #2
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4805      	ldr	r0, [pc, #20]	; (8001f24 <HAL_TIM_MspPostInit+0xb8>)
 8001f10:	f000 fb02 	bl	8002518 <HAL_GPIO_Init>
}
 8001f14:	bf00      	nop
 8001f16:	3728      	adds	r7, #40	; 0x28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40000400 	.word	0x40000400

08001f2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <MX_USART1_UART_Init+0x50>)
 8001f34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f52:	220c      	movs	r2, #12
 8001f54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f64:	f002 fd4a 	bl	80049fc <HAL_UART_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f6e:	f7ff fc8f 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000204 	.word	0x20000204
 8001f7c:	40011000 	.word	0x40011000

08001f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a28      	ldr	r2, [pc, #160]	; (8002040 <HAL_UART_MspInit+0xc0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d14a      	bne.n	8002038 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_UART_MspInit+0xc4>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a26      	ldr	r2, [pc, #152]	; (8002044 <HAL_UART_MspInit+0xc4>)
 8001fac:	f043 0310 	orr.w	r3, r3, #16
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_UART_MspInit+0xc4>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_UART_MspInit+0xc4>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <HAL_UART_MspInit+0xc4>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_UART_MspInit+0xc4>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_UART_MspInit+0xc4>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_UART_MspInit+0xc4>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <HAL_UART_MspInit+0xc4>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = HC05_TX_Pin;
 8001ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002008:	2307      	movs	r3, #7
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HC05_TX_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	480d      	ldr	r0, [pc, #52]	; (8002048 <HAL_UART_MspInit+0xc8>)
 8002014:	f000 fa80 	bl	8002518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HC05_RX_Pin;
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002028:	2307      	movs	r3, #7
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HC05_RX_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	4806      	ldr	r0, [pc, #24]	; (800204c <HAL_UART_MspInit+0xcc>)
 8002034:	f000 fa70 	bl	8002518 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002038:	bf00      	nop
 800203a:	3728      	adds	r7, #40	; 0x28
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40011000 	.word	0x40011000
 8002044:	40023800 	.word	0x40023800
 8002048:	40020000 	.word	0x40020000
 800204c:	40020400 	.word	0x40020400

08002050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002054:	480d      	ldr	r0, [pc, #52]	; (800208c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002056:	490e      	ldr	r1, [pc, #56]	; (8002090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002058:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800206c:	4c0b      	ldr	r4, [pc, #44]	; (800209c <LoopFillZerobss+0x26>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800207a:	f7ff fcd1 	bl	8001a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800207e:	f003 fd63 	bl	8005b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002082:	f7ff fa6f 	bl	8001564 <main>
  bx  lr    
 8002086:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800208c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002090:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002094:	080064e4 	.word	0x080064e4
  ldr r2, =_sbss
 8002098:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800209c:	20000394 	.word	0x20000394

080020a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a0:	e7fe      	b.n	80020a0 <ADC_IRQHandler>
	...

080020a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_Init+0x40>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <HAL_Init+0x40>)
 80020ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_Init+0x40>)
 80020ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_Init+0x40>)
 80020c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020cc:	2003      	movs	r0, #3
 80020ce:	f000 f94f 	bl	8002370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f000 f808 	bl	80020e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d8:	f7ff fc06 	bl	80018e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023c00 	.word	0x40023c00

080020e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_InitTick+0x54>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_InitTick+0x58>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002102:	fbb2 f3f3 	udiv	r3, r2, r3
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f967 	bl	80023da <HAL_SYSTICK_Config>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e00e      	b.n	8002134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b0f      	cmp	r3, #15
 800211a:	d80a      	bhi.n	8002132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800211c:	2200      	movs	r2, #0
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f000 f92f 	bl	8002386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002128:	4a06      	ldr	r2, [pc, #24]	; (8002144 <HAL_InitTick+0x5c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e000      	b.n	8002134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000008 	.word	0x20000008
 8002140:	20000010 	.word	0x20000010
 8002144:	2000000c 	.word	0x2000000c

08002148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_IncTick+0x20>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x24>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4413      	add	r3, r2
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_IncTick+0x24>)
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000010 	.word	0x20000010
 800216c:	20000248 	.word	0x20000248

08002170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return uwTick;
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_GetTick+0x14>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000248 	.word	0x20000248

08002188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff ffee 	bl	8002170 <HAL_GetTick>
 8002194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d005      	beq.n	80021ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_Delay+0x44>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ae:	bf00      	nop
 80021b0:	f7ff ffde 	bl	8002170 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d8f7      	bhi.n	80021b0 <HAL_Delay+0x28>
  {
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000010 	.word	0x20000010

080021d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0307 	and.w	r3, r3, #7
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	db0b      	blt.n	800225e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4907      	ldr	r1, [pc, #28]	; (800226c <__NVIC_EnableIRQ+0x38>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2001      	movs	r0, #1
 8002256:	fa00 f202 	lsl.w	r2, r0, r2
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	db0a      	blt.n	800229a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	490c      	ldr	r1, [pc, #48]	; (80022bc <__NVIC_SetPriority+0x4c>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	440b      	add	r3, r1
 8002294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002298:	e00a      	b.n	80022b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4908      	ldr	r1, [pc, #32]	; (80022c0 <__NVIC_SetPriority+0x50>)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	3b04      	subs	r3, #4
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	440b      	add	r3, r1
 80022ae:	761a      	strb	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000e100 	.word	0xe000e100
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f1c3 0307 	rsb	r3, r3, #7
 80022de:	2b04      	cmp	r3, #4
 80022e0:	bf28      	it	cs
 80022e2:	2304      	movcs	r3, #4
 80022e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d902      	bls.n	80022f4 <NVIC_EncodePriority+0x30>
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3b03      	subs	r3, #3
 80022f2:	e000      	b.n	80022f6 <NVIC_EncodePriority+0x32>
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	401a      	ands	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800230c:	f04f 31ff 	mov.w	r1, #4294967295
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43d9      	mvns	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	4313      	orrs	r3, r2
         );
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800233c:	d301      	bcc.n	8002342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233e:	2301      	movs	r3, #1
 8002340:	e00f      	b.n	8002362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <SysTick_Config+0x40>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234a:	210f      	movs	r1, #15
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f7ff ff8e 	bl	8002270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <SysTick_Config+0x40>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <SysTick_Config+0x40>)
 800235c:	2207      	movs	r2, #7
 800235e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	e000e010 	.word	0xe000e010

08002370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff29 	bl	80021d0 <__NVIC_SetPriorityGrouping>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002398:	f7ff ff3e 	bl	8002218 <__NVIC_GetPriorityGrouping>
 800239c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	6978      	ldr	r0, [r7, #20]
 80023a4:	f7ff ff8e 	bl	80022c4 <NVIC_EncodePriority>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff5d 	bl	8002270 <__NVIC_SetPriority>
}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff31 	bl	8002234 <__NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ffa2 	bl	800232c <SysTick_Config>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff feb6 	bl	8002170 <HAL_GetTick>
 8002404:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d008      	beq.n	8002424 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2280      	movs	r2, #128	; 0x80
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e052      	b.n	80024ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0216 	bic.w	r2, r2, #22
 8002432:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002442:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	2b00      	cmp	r3, #0
 800244a:	d103      	bne.n	8002454 <HAL_DMA_Abort+0x62>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0208 	bic.w	r2, r2, #8
 8002462:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002474:	e013      	b.n	800249e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002476:	f7ff fe7b 	bl	8002170 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b05      	cmp	r3, #5
 8002482:	d90c      	bls.n	800249e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2220      	movs	r2, #32
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2203      	movs	r2, #3
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e015      	b.n	80024ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e4      	bne.n	8002476 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	223f      	movs	r2, #63	; 0x3f
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d004      	beq.n	80024f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2280      	movs	r2, #128	; 0x80
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e00c      	b.n	800250a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2205      	movs	r2, #5
 80024f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e159      	b.n	80027e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002534:	2201      	movs	r2, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	f040 8148 	bne.w	80027e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d005      	beq.n	800256a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002566:	2b02      	cmp	r3, #2
 8002568:	d130      	bne.n	80025cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 0201 	and.w	r2, r3, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d017      	beq.n	8002608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d123      	bne.n	800265c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	69b9      	ldr	r1, [r7, #24]
 8002658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0203 	and.w	r2, r3, #3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80a2 	beq.w	80027e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b57      	ldr	r3, [pc, #348]	; (8002800 <HAL_GPIO_Init+0x2e8>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a56      	ldr	r2, [pc, #344]	; (8002800 <HAL_GPIO_Init+0x2e8>)
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b54      	ldr	r3, [pc, #336]	; (8002800 <HAL_GPIO_Init+0x2e8>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ba:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_GPIO_Init+0x2ec>)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a49      	ldr	r2, [pc, #292]	; (8002808 <HAL_GPIO_Init+0x2f0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d019      	beq.n	800271a <HAL_GPIO_Init+0x202>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a48      	ldr	r2, [pc, #288]	; (800280c <HAL_GPIO_Init+0x2f4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <HAL_GPIO_Init+0x1fe>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a47      	ldr	r2, [pc, #284]	; (8002810 <HAL_GPIO_Init+0x2f8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00d      	beq.n	8002712 <HAL_GPIO_Init+0x1fa>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a46      	ldr	r2, [pc, #280]	; (8002814 <HAL_GPIO_Init+0x2fc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <HAL_GPIO_Init+0x1f6>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a45      	ldr	r2, [pc, #276]	; (8002818 <HAL_GPIO_Init+0x300>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_GPIO_Init+0x1f2>
 8002706:	2304      	movs	r3, #4
 8002708:	e008      	b.n	800271c <HAL_GPIO_Init+0x204>
 800270a:	2307      	movs	r3, #7
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x204>
 800270e:	2303      	movs	r3, #3
 8002710:	e004      	b.n	800271c <HAL_GPIO_Init+0x204>
 8002712:	2302      	movs	r3, #2
 8002714:	e002      	b.n	800271c <HAL_GPIO_Init+0x204>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_GPIO_Init+0x204>
 800271a:	2300      	movs	r3, #0
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f002 0203 	and.w	r2, r2, #3
 8002722:	0092      	lsls	r2, r2, #2
 8002724:	4093      	lsls	r3, r2
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800272c:	4935      	ldr	r1, [pc, #212]	; (8002804 <HAL_GPIO_Init+0x2ec>)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	3302      	adds	r3, #2
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273a:	4b38      	ldr	r3, [pc, #224]	; (800281c <HAL_GPIO_Init+0x304>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800275e:	4a2f      	ldr	r2, [pc, #188]	; (800281c <HAL_GPIO_Init+0x304>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002764:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_GPIO_Init+0x304>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002788:	4a24      	ldr	r2, [pc, #144]	; (800281c <HAL_GPIO_Init+0x304>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800278e:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_GPIO_Init+0x304>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027b2:	4a1a      	ldr	r2, [pc, #104]	; (800281c <HAL_GPIO_Init+0x304>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b8:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_GPIO_Init+0x304>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027dc:	4a0f      	ldr	r2, [pc, #60]	; (800281c <HAL_GPIO_Init+0x304>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3301      	adds	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	f67f aea2 	bls.w	8002534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	40013800 	.word	0x40013800
 8002808:	40020000 	.word	0x40020000
 800280c:	40020400 	.word	0x40020400
 8002810:	40020800 	.word	0x40020800
 8002814:	40020c00 	.word	0x40020c00
 8002818:	40021000 	.word	0x40021000
 800281c:	40013c00 	.word	0x40013c00

08002820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	e001      	b.n	8002842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
 800285c:	4613      	mov	r3, r2
 800285e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002860:	787b      	ldrb	r3, [r7, #1]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800286c:	e003      	b.n	8002876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800286e:	887b      	ldrh	r3, [r7, #2]
 8002870:	041a      	lsls	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	619a      	str	r2, [r3, #24]
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	460b      	mov	r3, r1
 800288c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002894:	887a      	ldrh	r2, [r7, #2]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4013      	ands	r3, r2
 800289a:	041a      	lsls	r2, r3, #16
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	43d9      	mvns	r1, r3
 80028a0:	887b      	ldrh	r3, [r7, #2]
 80028a2:	400b      	ands	r3, r1
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	619a      	str	r2, [r3, #24]
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e267      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d075      	beq.n	80029c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028d6:	4b88      	ldr	r3, [pc, #544]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d00c      	beq.n	80028fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e2:	4b85      	ldr	r3, [pc, #532]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d112      	bne.n	8002914 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ee:	4b82      	ldr	r3, [pc, #520]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fa:	d10b      	bne.n	8002914 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	4b7e      	ldr	r3, [pc, #504]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d05b      	beq.n	80029c0 <HAL_RCC_OscConfig+0x108>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d157      	bne.n	80029c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e242      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d106      	bne.n	800292c <HAL_RCC_OscConfig+0x74>
 800291e:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a75      	ldr	r2, [pc, #468]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e01d      	b.n	8002968 <HAL_RCC_OscConfig+0xb0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0x98>
 8002936:	4b70      	ldr	r3, [pc, #448]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a6f      	ldr	r2, [pc, #444]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 800293c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b6d      	ldr	r3, [pc, #436]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6c      	ldr	r2, [pc, #432]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xb0>
 8002950:	4b69      	ldr	r3, [pc, #420]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a68      	ldr	r2, [pc, #416]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b66      	ldr	r3, [pc, #408]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a65      	ldr	r2, [pc, #404]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7ff fbfe 	bl	8002170 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff fbfa 	bl	8002170 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e207      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b5b      	ldr	r3, [pc, #364]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0xc0>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7ff fbea 	bl	8002170 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a0:	f7ff fbe6 	bl	8002170 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1f3      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	4b51      	ldr	r3, [pc, #324]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0xe8>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d063      	beq.n	8002a96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d11c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029e6:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d116      	bne.n	8002a20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_RCC_OscConfig+0x152>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e1c7      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4937      	ldr	r1, [pc, #220]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	e03a      	b.n	8002a96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a28:	4b34      	ldr	r3, [pc, #208]	; (8002afc <HAL_RCC_OscConfig+0x244>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2e:	f7ff fb9f 	bl	8002170 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a36:	f7ff fb9b 	bl	8002170 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e1a8      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4925      	ldr	r1, [pc, #148]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
 8002a68:	e015      	b.n	8002a96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6a:	4b24      	ldr	r3, [pc, #144]	; (8002afc <HAL_RCC_OscConfig+0x244>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7ff fb7e 	bl	8002170 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a78:	f7ff fb7a 	bl	8002170 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e187      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d036      	beq.n	8002b10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_RCC_OscConfig+0x248>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7ff fb5e 	bl	8002170 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7ff fb5a 	bl	8002170 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e167      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x200>
 8002ad6:	e01b      	b.n	8002b10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_RCC_OscConfig+0x248>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7ff fb47 	bl	8002170 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	e00e      	b.n	8002b04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7ff fb43 	bl	8002170 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d907      	bls.n	8002b04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e150      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
 8002af8:	40023800 	.word	0x40023800
 8002afc:	42470000 	.word	0x42470000
 8002b00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b04:	4b88      	ldr	r3, [pc, #544]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ea      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8097 	beq.w	8002c4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b22:	4b81      	ldr	r3, [pc, #516]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10f      	bne.n	8002b4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	4b7d      	ldr	r3, [pc, #500]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	4a7c      	ldr	r2, [pc, #496]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3e:	4b7a      	ldr	r3, [pc, #488]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4e:	4b77      	ldr	r3, [pc, #476]	; (8002d2c <HAL_RCC_OscConfig+0x474>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d118      	bne.n	8002b8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5a:	4b74      	ldr	r3, [pc, #464]	; (8002d2c <HAL_RCC_OscConfig+0x474>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a73      	ldr	r2, [pc, #460]	; (8002d2c <HAL_RCC_OscConfig+0x474>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b66:	f7ff fb03 	bl	8002170 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6e:	f7ff faff 	bl	8002170 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e10c      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b80:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <HAL_RCC_OscConfig+0x474>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x2ea>
 8002b94:	4b64      	ldr	r3, [pc, #400]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a63      	ldr	r2, [pc, #396]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba0:	e01c      	b.n	8002bdc <HAL_RCC_OscConfig+0x324>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x30c>
 8002baa:	4b5f      	ldr	r3, [pc, #380]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a5e      	ldr	r2, [pc, #376]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb6:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a5b      	ldr	r2, [pc, #364]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0x324>
 8002bc4:	4b58      	ldr	r3, [pc, #352]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a57      	ldr	r2, [pc, #348]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd0:	4b55      	ldr	r3, [pc, #340]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	4a54      	ldr	r2, [pc, #336]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	f023 0304 	bic.w	r3, r3, #4
 8002bda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d015      	beq.n	8002c10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7ff fac4 	bl	8002170 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7ff fac0 	bl	8002170 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0cb      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c02:	4b49      	ldr	r3, [pc, #292]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0ee      	beq.n	8002bec <HAL_RCC_OscConfig+0x334>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c10:	f7ff faae 	bl	8002170 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c18:	f7ff faaa 	bl	8002170 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e0b5      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2e:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1ee      	bne.n	8002c18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c40:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	4a38      	ldr	r2, [pc, #224]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80a1 	beq.w	8002d98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c56:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d05c      	beq.n	8002d1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d141      	bne.n	8002cee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <HAL_RCC_OscConfig+0x478>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7ff fa7e 	bl	8002170 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c78:	f7ff fa7a 	bl	8002170 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e087      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69da      	ldr	r2, [r3, #28]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	019b      	lsls	r3, r3, #6
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	491b      	ldr	r1, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x478>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7ff fa53 	bl	8002170 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cce:	f7ff fa4f 	bl	8002170 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e05c      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x416>
 8002cec:	e054      	b.n	8002d98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_RCC_OscConfig+0x478>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7ff fa3c 	bl	8002170 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7ff fa38 	bl	8002170 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e045      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x444>
 8002d1a:	e03d      	b.n	8002d98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e038      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x4ec>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d028      	beq.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d121      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d11a      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d64:	4013      	ands	r3, r2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d111      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d107      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0cc      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b68      	ldr	r3, [pc, #416]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d90c      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b65      	ldr	r3, [pc, #404]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b63      	ldr	r3, [pc, #396]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0b8      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	494d      	ldr	r1, [pc, #308]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d044      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d119      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	4b3f      	ldr	r3, [pc, #252]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e76:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e067      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e86:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 0203 	bic.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4934      	ldr	r1, [pc, #208]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e98:	f7ff f96a 	bl	8002170 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7ff f966 	bl	8002170 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e04f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 020c 	and.w	r2, r3, #12
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d1eb      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d20c      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e032      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4916      	ldr	r1, [pc, #88]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	490e      	ldr	r1, [pc, #56]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f2e:	f000 f821 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	490a      	ldr	r1, [pc, #40]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	5ccb      	ldrb	r3, [r1, r3]
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f8ca 	bl	80020e8 <HAL_InitTick>

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00
 8002f64:	40023800 	.word	0x40023800
 8002f68:	08006488 	.word	0x08006488
 8002f6c:	20000008 	.word	0x20000008
 8002f70:	2000000c 	.word	0x2000000c

08002f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f78:	b094      	sub	sp, #80	; 0x50
 8002f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f80:	2300      	movs	r3, #0
 8002f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f84:	2300      	movs	r3, #0
 8002f86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f8c:	4b79      	ldr	r3, [pc, #484]	; (8003174 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d00d      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	f200 80e1 	bhi.w	8003160 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x3a>
 8002fa6:	e0db      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa8:	4b73      	ldr	r3, [pc, #460]	; (8003178 <HAL_RCC_GetSysClockFreq+0x204>)
 8002faa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fac:	e0db      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fae:	4b73      	ldr	r3, [pc, #460]	; (800317c <HAL_RCC_GetSysClockFreq+0x208>)
 8002fb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fb2:	e0d8      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fbe:	4b6d      	ldr	r3, [pc, #436]	; (8003174 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d063      	beq.n	8003092 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fca:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fde:	2300      	movs	r3, #0
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fe6:	4622      	mov	r2, r4
 8002fe8:	462b      	mov	r3, r5
 8002fea:	f04f 0000 	mov.w	r0, #0
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	0159      	lsls	r1, r3, #5
 8002ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff8:	0150      	lsls	r0, r2, #5
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4621      	mov	r1, r4
 8003000:	1a51      	subs	r1, r2, r1
 8003002:	6139      	str	r1, [r7, #16]
 8003004:	4629      	mov	r1, r5
 8003006:	eb63 0301 	sbc.w	r3, r3, r1
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003018:	4659      	mov	r1, fp
 800301a:	018b      	lsls	r3, r1, #6
 800301c:	4651      	mov	r1, sl
 800301e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003022:	4651      	mov	r1, sl
 8003024:	018a      	lsls	r2, r1, #6
 8003026:	4651      	mov	r1, sl
 8003028:	ebb2 0801 	subs.w	r8, r2, r1
 800302c:	4659      	mov	r1, fp
 800302e:	eb63 0901 	sbc.w	r9, r3, r1
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800303e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003046:	4690      	mov	r8, r2
 8003048:	4699      	mov	r9, r3
 800304a:	4623      	mov	r3, r4
 800304c:	eb18 0303 	adds.w	r3, r8, r3
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	462b      	mov	r3, r5
 8003054:	eb49 0303 	adc.w	r3, r9, r3
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003066:	4629      	mov	r1, r5
 8003068:	024b      	lsls	r3, r1, #9
 800306a:	4621      	mov	r1, r4
 800306c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003070:	4621      	mov	r1, r4
 8003072:	024a      	lsls	r2, r1, #9
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307a:	2200      	movs	r2, #0
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
 800307e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003080:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003084:	f7fd fc32 	bl	80008ec <__aeabi_uldivmod>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4613      	mov	r3, r2
 800308e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003090:	e058      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003092:	4b38      	ldr	r3, [pc, #224]	; (8003174 <HAL_RCC_GetSysClockFreq+0x200>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	099b      	lsrs	r3, r3, #6
 8003098:	2200      	movs	r2, #0
 800309a:	4618      	mov	r0, r3
 800309c:	4611      	mov	r1, r2
 800309e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030a2:	623b      	str	r3, [r7, #32]
 80030a4:	2300      	movs	r3, #0
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
 80030a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030ac:	4642      	mov	r2, r8
 80030ae:	464b      	mov	r3, r9
 80030b0:	f04f 0000 	mov.w	r0, #0
 80030b4:	f04f 0100 	mov.w	r1, #0
 80030b8:	0159      	lsls	r1, r3, #5
 80030ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030be:	0150      	lsls	r0, r2, #5
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4641      	mov	r1, r8
 80030c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ca:	4649      	mov	r1, r9
 80030cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030e4:	ebb2 040a 	subs.w	r4, r2, sl
 80030e8:	eb63 050b 	sbc.w	r5, r3, fp
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	00eb      	lsls	r3, r5, #3
 80030f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fa:	00e2      	lsls	r2, r4, #3
 80030fc:	4614      	mov	r4, r2
 80030fe:	461d      	mov	r5, r3
 8003100:	4643      	mov	r3, r8
 8003102:	18e3      	adds	r3, r4, r3
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	464b      	mov	r3, r9
 8003108:	eb45 0303 	adc.w	r3, r5, r3
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9d7 4500 	ldrd	r4, r5, [r7]
 800311a:	4629      	mov	r1, r5
 800311c:	028b      	lsls	r3, r1, #10
 800311e:	4621      	mov	r1, r4
 8003120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003124:	4621      	mov	r1, r4
 8003126:	028a      	lsls	r2, r1, #10
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312e:	2200      	movs	r2, #0
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	61fa      	str	r2, [r7, #28]
 8003134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003138:	f7fd fbd8 	bl	80008ec <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4613      	mov	r3, r2
 8003142:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_GetSysClockFreq+0x200>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	0c1b      	lsrs	r3, r3, #16
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	3301      	adds	r3, #1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003158:	fbb2 f3f3 	udiv	r3, r2, r3
 800315c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800315e:	e002      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetSysClockFreq+0x204>)
 8003162:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003168:	4618      	mov	r0, r3
 800316a:	3750      	adds	r7, #80	; 0x50
 800316c:	46bd      	mov	sp, r7
 800316e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	00f42400 	.word	0x00f42400
 800317c:	007a1200 	.word	0x007a1200

08003180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_RCC_GetHCLKFreq+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000008 	.word	0x20000008

08003198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800319c:	f7ff fff0 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0a9b      	lsrs	r3, r3, #10
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4903      	ldr	r1, [pc, #12]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	08006498 	.word	0x08006498

080031c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031c4:	f7ff ffdc 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0b5b      	lsrs	r3, r3, #13
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4903      	ldr	r1, [pc, #12]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08006498 	.word	0x08006498

080031e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e041      	b.n	800327e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe fdba 	bl	8001d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f000 ff2a 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d001      	beq.n	80032a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e03c      	b.n	800331a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <HAL_TIM_Base_Start+0xa0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d018      	beq.n	80032e4 <HAL_TIM_Base_Start+0x5c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ba:	d013      	beq.n	80032e4 <HAL_TIM_Base_Start+0x5c>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1a      	ldr	r2, [pc, #104]	; (800332c <HAL_TIM_Base_Start+0xa4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00e      	beq.n	80032e4 <HAL_TIM_Base_Start+0x5c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a19      	ldr	r2, [pc, #100]	; (8003330 <HAL_TIM_Base_Start+0xa8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d009      	beq.n	80032e4 <HAL_TIM_Base_Start+0x5c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a17      	ldr	r2, [pc, #92]	; (8003334 <HAL_TIM_Base_Start+0xac>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_TIM_Base_Start+0x5c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a16      	ldr	r2, [pc, #88]	; (8003338 <HAL_TIM_Base_Start+0xb0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d111      	bne.n	8003308 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b06      	cmp	r3, #6
 80032f4:	d010      	beq.n	8003318 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003306:	e007      	b.n	8003318 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40010000 	.word	0x40010000
 800332c:	40000400 	.word	0x40000400
 8003330:	40000800 	.word	0x40000800
 8003334:	40000c00 	.word	0x40000c00
 8003338:	40014000 	.word	0x40014000

0800333c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e041      	b.n	80033d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f839 	bl	80033da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f000 fe80 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <HAL_TIM_PWM_Start+0x24>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	e022      	b.n	800345a <HAL_TIM_PWM_Start+0x6a>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b04      	cmp	r3, #4
 8003418:	d109      	bne.n	800342e <HAL_TIM_PWM_Start+0x3e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b01      	cmp	r3, #1
 8003424:	bf14      	ite	ne
 8003426:	2301      	movne	r3, #1
 8003428:	2300      	moveq	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	e015      	b.n	800345a <HAL_TIM_PWM_Start+0x6a>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d109      	bne.n	8003448 <HAL_TIM_PWM_Start+0x58>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	bf14      	ite	ne
 8003440:	2301      	movne	r3, #1
 8003442:	2300      	moveq	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e008      	b.n	800345a <HAL_TIM_PWM_Start+0x6a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	bf14      	ite	ne
 8003454:	2301      	movne	r3, #1
 8003456:	2300      	moveq	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e068      	b.n	8003534 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <HAL_TIM_PWM_Start+0x82>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003470:	e013      	b.n	800349a <HAL_TIM_PWM_Start+0xaa>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d104      	bne.n	8003482 <HAL_TIM_PWM_Start+0x92>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003480:	e00b      	b.n	800349a <HAL_TIM_PWM_Start+0xaa>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b08      	cmp	r3, #8
 8003486:	d104      	bne.n	8003492 <HAL_TIM_PWM_Start+0xa2>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003490:	e003      	b.n	800349a <HAL_TIM_PWM_Start+0xaa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2201      	movs	r2, #1
 80034a0:	6839      	ldr	r1, [r7, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 f9b0 	bl	8004808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a23      	ldr	r2, [pc, #140]	; (800353c <HAL_TIM_PWM_Start+0x14c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d107      	bne.n	80034c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1d      	ldr	r2, [pc, #116]	; (800353c <HAL_TIM_PWM_Start+0x14c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d018      	beq.n	80034fe <HAL_TIM_PWM_Start+0x10e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d4:	d013      	beq.n	80034fe <HAL_TIM_PWM_Start+0x10e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a19      	ldr	r2, [pc, #100]	; (8003540 <HAL_TIM_PWM_Start+0x150>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00e      	beq.n	80034fe <HAL_TIM_PWM_Start+0x10e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a17      	ldr	r2, [pc, #92]	; (8003544 <HAL_TIM_PWM_Start+0x154>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_TIM_PWM_Start+0x10e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a16      	ldr	r2, [pc, #88]	; (8003548 <HAL_TIM_PWM_Start+0x158>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_TIM_PWM_Start+0x10e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a14      	ldr	r2, [pc, #80]	; (800354c <HAL_TIM_PWM_Start+0x15c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d111      	bne.n	8003522 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b06      	cmp	r3, #6
 800350e:	d010      	beq.n	8003532 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003520:	e007      	b.n	8003532 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0201 	orr.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40010000 	.word	0x40010000
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800
 8003548:	40000c00 	.word	0x40000c00
 800354c:	40014000 	.word	0x40014000

08003550 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e041      	b.n	80035e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f839 	bl	80035ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	4619      	mov	r1, r3
 800358e:	4610      	mov	r0, r2
 8003590:	f000 fd76 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <HAL_TIM_IC_Start+0x1a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800361a:	b2db      	uxtb	r3, r3
 800361c:	e013      	b.n	8003646 <HAL_TIM_IC_Start+0x42>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d104      	bne.n	800362e <HAL_TIM_IC_Start+0x2a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e00b      	b.n	8003646 <HAL_TIM_IC_Start+0x42>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b08      	cmp	r3, #8
 8003632:	d104      	bne.n	800363e <HAL_TIM_IC_Start+0x3a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800363a:	b2db      	uxtb	r3, r3
 800363c:	e003      	b.n	8003646 <HAL_TIM_IC_Start+0x42>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003644:	b2db      	uxtb	r3, r3
 8003646:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <HAL_TIM_IC_Start+0x54>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e013      	b.n	8003680 <HAL_TIM_IC_Start+0x7c>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b04      	cmp	r3, #4
 800365c:	d104      	bne.n	8003668 <HAL_TIM_IC_Start+0x64>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003664:	b2db      	uxtb	r3, r3
 8003666:	e00b      	b.n	8003680 <HAL_TIM_IC_Start+0x7c>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b08      	cmp	r3, #8
 800366c:	d104      	bne.n	8003678 <HAL_TIM_IC_Start+0x74>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003674:	b2db      	uxtb	r3, r3
 8003676:	e003      	b.n	8003680 <HAL_TIM_IC_Start+0x7c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800367e:	b2db      	uxtb	r3, r3
 8003680:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d102      	bne.n	800368e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003688:	7bbb      	ldrb	r3, [r7, #14]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d001      	beq.n	8003692 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e077      	b.n	8003782 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d104      	bne.n	80036a2 <HAL_TIM_IC_Start+0x9e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a0:	e013      	b.n	80036ca <HAL_TIM_IC_Start+0xc6>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d104      	bne.n	80036b2 <HAL_TIM_IC_Start+0xae>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b0:	e00b      	b.n	80036ca <HAL_TIM_IC_Start+0xc6>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d104      	bne.n	80036c2 <HAL_TIM_IC_Start+0xbe>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c0:	e003      	b.n	80036ca <HAL_TIM_IC_Start+0xc6>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2202      	movs	r2, #2
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <HAL_TIM_IC_Start+0xd6>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d8:	e013      	b.n	8003702 <HAL_TIM_IC_Start+0xfe>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d104      	bne.n	80036ea <HAL_TIM_IC_Start+0xe6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036e8:	e00b      	b.n	8003702 <HAL_TIM_IC_Start+0xfe>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d104      	bne.n	80036fa <HAL_TIM_IC_Start+0xf6>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f8:	e003      	b.n	8003702 <HAL_TIM_IC_Start+0xfe>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2202      	movs	r2, #2
 80036fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2201      	movs	r2, #1
 8003708:	6839      	ldr	r1, [r7, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f001 f87c 	bl	8004808 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1d      	ldr	r2, [pc, #116]	; (800378c <HAL_TIM_IC_Start+0x188>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d018      	beq.n	800374c <HAL_TIM_IC_Start+0x148>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003722:	d013      	beq.n	800374c <HAL_TIM_IC_Start+0x148>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a19      	ldr	r2, [pc, #100]	; (8003790 <HAL_TIM_IC_Start+0x18c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00e      	beq.n	800374c <HAL_TIM_IC_Start+0x148>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a18      	ldr	r2, [pc, #96]	; (8003794 <HAL_TIM_IC_Start+0x190>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d009      	beq.n	800374c <HAL_TIM_IC_Start+0x148>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a16      	ldr	r2, [pc, #88]	; (8003798 <HAL_TIM_IC_Start+0x194>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <HAL_TIM_IC_Start+0x148>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a15      	ldr	r2, [pc, #84]	; (800379c <HAL_TIM_IC_Start+0x198>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d111      	bne.n	8003770 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b06      	cmp	r3, #6
 800375c:	d010      	beq.n	8003780 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376e:	e007      	b.n	8003780 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40010000 	.word	0x40010000
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800
 8003798:	40000c00 	.word	0x40000c00
 800379c:	40014000 	.word	0x40014000

080037a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d104      	bne.n	80037be <HAL_TIM_IC_Start_IT+0x1e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	e013      	b.n	80037e6 <HAL_TIM_IC_Start_IT+0x46>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d104      	bne.n	80037ce <HAL_TIM_IC_Start_IT+0x2e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	e00b      	b.n	80037e6 <HAL_TIM_IC_Start_IT+0x46>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d104      	bne.n	80037de <HAL_TIM_IC_Start_IT+0x3e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	e003      	b.n	80037e6 <HAL_TIM_IC_Start_IT+0x46>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <HAL_TIM_IC_Start_IT+0x58>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e013      	b.n	8003820 <HAL_TIM_IC_Start_IT+0x80>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d104      	bne.n	8003808 <HAL_TIM_IC_Start_IT+0x68>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e00b      	b.n	8003820 <HAL_TIM_IC_Start_IT+0x80>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b08      	cmp	r3, #8
 800380c:	d104      	bne.n	8003818 <HAL_TIM_IC_Start_IT+0x78>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003814:	b2db      	uxtb	r3, r3
 8003816:	e003      	b.n	8003820 <HAL_TIM_IC_Start_IT+0x80>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800381e:	b2db      	uxtb	r3, r3
 8003820:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003822:	7bbb      	ldrb	r3, [r7, #14]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d102      	bne.n	800382e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003828:	7b7b      	ldrb	r3, [r7, #13]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d001      	beq.n	8003832 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0c2      	b.n	80039b8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <HAL_TIM_IC_Start_IT+0xa2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003840:	e013      	b.n	800386a <HAL_TIM_IC_Start_IT+0xca>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d104      	bne.n	8003852 <HAL_TIM_IC_Start_IT+0xb2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003850:	e00b      	b.n	800386a <HAL_TIM_IC_Start_IT+0xca>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d104      	bne.n	8003862 <HAL_TIM_IC_Start_IT+0xc2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003860:	e003      	b.n	800386a <HAL_TIM_IC_Start_IT+0xca>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <HAL_TIM_IC_Start_IT+0xda>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003878:	e013      	b.n	80038a2 <HAL_TIM_IC_Start_IT+0x102>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b04      	cmp	r3, #4
 800387e:	d104      	bne.n	800388a <HAL_TIM_IC_Start_IT+0xea>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003888:	e00b      	b.n	80038a2 <HAL_TIM_IC_Start_IT+0x102>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d104      	bne.n	800389a <HAL_TIM_IC_Start_IT+0xfa>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003898:	e003      	b.n	80038a2 <HAL_TIM_IC_Start_IT+0x102>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2202      	movs	r2, #2
 800389e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b0c      	cmp	r3, #12
 80038a6:	d841      	bhi.n	800392c <HAL_TIM_IC_Start_IT+0x18c>
 80038a8:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <HAL_TIM_IC_Start_IT+0x110>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038e5 	.word	0x080038e5
 80038b4:	0800392d 	.word	0x0800392d
 80038b8:	0800392d 	.word	0x0800392d
 80038bc:	0800392d 	.word	0x0800392d
 80038c0:	080038f7 	.word	0x080038f7
 80038c4:	0800392d 	.word	0x0800392d
 80038c8:	0800392d 	.word	0x0800392d
 80038cc:	0800392d 	.word	0x0800392d
 80038d0:	08003909 	.word	0x08003909
 80038d4:	0800392d 	.word	0x0800392d
 80038d8:	0800392d 	.word	0x0800392d
 80038dc:	0800392d 	.word	0x0800392d
 80038e0:	0800391b 	.word	0x0800391b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0202 	orr.w	r2, r2, #2
 80038f2:	60da      	str	r2, [r3, #12]
      break;
 80038f4:	e01d      	b.n	8003932 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0204 	orr.w	r2, r2, #4
 8003904:	60da      	str	r2, [r3, #12]
      break;
 8003906:	e014      	b.n	8003932 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0208 	orr.w	r2, r2, #8
 8003916:	60da      	str	r2, [r3, #12]
      break;
 8003918:	e00b      	b.n	8003932 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0210 	orr.w	r2, r2, #16
 8003928:	60da      	str	r2, [r3, #12]
      break;
 800392a:	e002      	b.n	8003932 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      break;
 8003930:	bf00      	nop
  }

  if (status == HAL_OK)
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d13e      	bne.n	80039b6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2201      	movs	r2, #1
 800393e:	6839      	ldr	r1, [r7, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 ff61 	bl	8004808 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <HAL_TIM_IC_Start_IT+0x220>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_TIM_IC_Start_IT+0x1e2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003958:	d013      	beq.n	8003982 <HAL_TIM_IC_Start_IT+0x1e2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a19      	ldr	r2, [pc, #100]	; (80039c4 <HAL_TIM_IC_Start_IT+0x224>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_TIM_IC_Start_IT+0x1e2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <HAL_TIM_IC_Start_IT+0x228>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_TIM_IC_Start_IT+0x1e2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a16      	ldr	r2, [pc, #88]	; (80039cc <HAL_TIM_IC_Start_IT+0x22c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_TIM_IC_Start_IT+0x1e2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <HAL_TIM_IC_Start_IT+0x230>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d111      	bne.n	80039a6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b06      	cmp	r3, #6
 8003992:	d010      	beq.n	80039b6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a4:	e007      	b.n	80039b6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40000400 	.word	0x40000400
 80039c8:	40000800 	.word	0x40000800
 80039cc:	40000c00 	.word	0x40000c00
 80039d0:	40014000 	.word	0x40014000

080039d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d122      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d11b      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0202 	mvn.w	r2, #2
 8003a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fd fe98 	bl	800174c <HAL_TIM_IC_CaptureCallback>
 8003a1c:	e005      	b.n	8003a2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fb0f 	bl	8004042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fb16 	bl	8004056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d122      	bne.n	8003a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d11b      	bne.n	8003a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0204 	mvn.w	r2, #4
 8003a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd fe6e 	bl	800174c <HAL_TIM_IC_CaptureCallback>
 8003a70:	e005      	b.n	8003a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fae5 	bl	8004042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 faec 	bl	8004056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0208 	mvn.w	r2, #8
 8003aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2204      	movs	r2, #4
 8003aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd fe44 	bl	800174c <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fabb 	bl	8004042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fac2 	bl	8004056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0210 	mvn.w	r2, #16
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2208      	movs	r2, #8
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fd fe1a 	bl	800174c <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa91 	bl	8004042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fa98 	bl	8004056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d10e      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d107      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0201 	mvn.w	r2, #1
 8003b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fa6b 	bl	800402e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b62:	2b80      	cmp	r3, #128	; 0x80
 8003b64:	d10e      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	d107      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 ff32 	bl	80049e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d10e      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b40      	cmp	r3, #64	; 0x40
 8003b9e:	d107      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fa5d 	bl	800406a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d10e      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	d107      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0220 	mvn.w	r2, #32
 8003bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fefc 	bl	80049d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e088      	b.n	8003d14 <HAL_TIM_IC_ConfigChannel+0x130>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11b      	bne.n	8003c48 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	6819      	ldr	r1, [r3, #0]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f000 fc3a 	bl	8004498 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 020c 	bic.w	r2, r2, #12
 8003c32:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6999      	ldr	r1, [r3, #24]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	619a      	str	r2, [r3, #24]
 8003c46:	e060      	b.n	8003d0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d11c      	bne.n	8003c88 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f000 fcb2 	bl	80045c6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c70:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6999      	ldr	r1, [r3, #24]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	021a      	lsls	r2, r3, #8
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	619a      	str	r2, [r3, #24]
 8003c86:	e040      	b.n	8003d0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d11b      	bne.n	8003cc6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f000 fcff 	bl	80046a0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 020c 	bic.w	r2, r2, #12
 8003cb0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69d9      	ldr	r1, [r3, #28]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	61da      	str	r2, [r3, #28]
 8003cc4:	e021      	b.n	8003d0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d11c      	bne.n	8003d06 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f000 fd1c 	bl	8004718 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69da      	ldr	r2, [r3, #28]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003cee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69d9      	ldr	r1, [r3, #28]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	021a      	lsls	r2, r3, #8
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	61da      	str	r2, [r3, #28]
 8003d04:	e001      	b.n	8003d0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e0ae      	b.n	8003e98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b0c      	cmp	r3, #12
 8003d46:	f200 809f 	bhi.w	8003e88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d85 	.word	0x08003d85
 8003d54:	08003e89 	.word	0x08003e89
 8003d58:	08003e89 	.word	0x08003e89
 8003d5c:	08003e89 	.word	0x08003e89
 8003d60:	08003dc5 	.word	0x08003dc5
 8003d64:	08003e89 	.word	0x08003e89
 8003d68:	08003e89 	.word	0x08003e89
 8003d6c:	08003e89 	.word	0x08003e89
 8003d70:	08003e07 	.word	0x08003e07
 8003d74:	08003e89 	.word	0x08003e89
 8003d78:	08003e89 	.word	0x08003e89
 8003d7c:	08003e89 	.word	0x08003e89
 8003d80:	08003e47 	.word	0x08003e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f9f8 	bl	8004180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0208 	orr.w	r2, r2, #8
 8003d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0204 	bic.w	r2, r2, #4
 8003dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6999      	ldr	r1, [r3, #24]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	619a      	str	r2, [r3, #24]
      break;
 8003dc2:	e064      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fa3e 	bl	800424c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6999      	ldr	r1, [r3, #24]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	021a      	lsls	r2, r3, #8
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	619a      	str	r2, [r3, #24]
      break;
 8003e04:	e043      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fa89 	bl	8004324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0208 	orr.w	r2, r2, #8
 8003e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0204 	bic.w	r2, r2, #4
 8003e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69d9      	ldr	r1, [r3, #28]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	61da      	str	r2, [r3, #28]
      break;
 8003e44:	e023      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fad3 	bl	80043f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69d9      	ldr	r1, [r3, #28]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	021a      	lsls	r2, r3, #8
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	61da      	str	r2, [r3, #28]
      break;
 8003e86:	e002      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIM_ConfigClockSource+0x1c>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e0b4      	b.n	8004026 <HAL_TIM_ConfigClockSource+0x186>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef4:	d03e      	beq.n	8003f74 <HAL_TIM_ConfigClockSource+0xd4>
 8003ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efa:	f200 8087 	bhi.w	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f02:	f000 8086 	beq.w	8004012 <HAL_TIM_ConfigClockSource+0x172>
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0a:	d87f      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b70      	cmp	r3, #112	; 0x70
 8003f0e:	d01a      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0xa6>
 8003f10:	2b70      	cmp	r3, #112	; 0x70
 8003f12:	d87b      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b60      	cmp	r3, #96	; 0x60
 8003f16:	d050      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0x11a>
 8003f18:	2b60      	cmp	r3, #96	; 0x60
 8003f1a:	d877      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b50      	cmp	r3, #80	; 0x50
 8003f1e:	d03c      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0xfa>
 8003f20:	2b50      	cmp	r3, #80	; 0x50
 8003f22:	d873      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d058      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x13a>
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d86f      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b30      	cmp	r3, #48	; 0x30
 8003f2e:	d064      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f30:	2b30      	cmp	r3, #48	; 0x30
 8003f32:	d86b      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d060      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d867      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d05c      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d05a      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f44:	e062      	b.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6899      	ldr	r1, [r3, #8]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f000 fc37 	bl	80047c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	609a      	str	r2, [r3, #8]
      break;
 8003f72:	e04f      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	6899      	ldr	r1, [r3, #8]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f000 fc20 	bl	80047c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f96:	609a      	str	r2, [r3, #8]
      break;
 8003f98:	e03c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6859      	ldr	r1, [r3, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f000 fade 	bl	8004568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2150      	movs	r1, #80	; 0x50
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fbed 	bl	8004792 <TIM_ITRx_SetConfig>
      break;
 8003fb8:	e02c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6859      	ldr	r1, [r3, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f000 fb3a 	bl	8004640 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2160      	movs	r1, #96	; 0x60
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fbdd 	bl	8004792 <TIM_ITRx_SetConfig>
      break;
 8003fd8:	e01c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f000 fabe 	bl	8004568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2140      	movs	r1, #64	; 0x40
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fbcd 	bl	8004792 <TIM_ITRx_SetConfig>
      break;
 8003ff8:	e00c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f000 fbc4 	bl	8004792 <TIM_ITRx_SetConfig>
      break;
 800400a:	e003      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
      break;
 8004010:	e000      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a34      	ldr	r2, [pc, #208]	; (8004164 <TIM_Base_SetConfig+0xe4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00f      	beq.n	80040b8 <TIM_Base_SetConfig+0x38>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409e:	d00b      	beq.n	80040b8 <TIM_Base_SetConfig+0x38>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a31      	ldr	r2, [pc, #196]	; (8004168 <TIM_Base_SetConfig+0xe8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d007      	beq.n	80040b8 <TIM_Base_SetConfig+0x38>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a30      	ldr	r2, [pc, #192]	; (800416c <TIM_Base_SetConfig+0xec>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d003      	beq.n	80040b8 <TIM_Base_SetConfig+0x38>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a2f      	ldr	r2, [pc, #188]	; (8004170 <TIM_Base_SetConfig+0xf0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d108      	bne.n	80040ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a25      	ldr	r2, [pc, #148]	; (8004164 <TIM_Base_SetConfig+0xe4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d01b      	beq.n	800410a <TIM_Base_SetConfig+0x8a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d8:	d017      	beq.n	800410a <TIM_Base_SetConfig+0x8a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a22      	ldr	r2, [pc, #136]	; (8004168 <TIM_Base_SetConfig+0xe8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <TIM_Base_SetConfig+0x8a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a21      	ldr	r2, [pc, #132]	; (800416c <TIM_Base_SetConfig+0xec>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00f      	beq.n	800410a <TIM_Base_SetConfig+0x8a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a20      	ldr	r2, [pc, #128]	; (8004170 <TIM_Base_SetConfig+0xf0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00b      	beq.n	800410a <TIM_Base_SetConfig+0x8a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a1f      	ldr	r2, [pc, #124]	; (8004174 <TIM_Base_SetConfig+0xf4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <TIM_Base_SetConfig+0x8a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <TIM_Base_SetConfig+0xf8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d003      	beq.n	800410a <TIM_Base_SetConfig+0x8a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a1d      	ldr	r2, [pc, #116]	; (800417c <TIM_Base_SetConfig+0xfc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d108      	bne.n	800411c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a08      	ldr	r2, [pc, #32]	; (8004164 <TIM_Base_SetConfig+0xe4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d103      	bne.n	8004150 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	615a      	str	r2, [r3, #20]
}
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40000c00 	.word	0x40000c00
 8004174:	40014000 	.word	0x40014000
 8004178:	40014400 	.word	0x40014400
 800417c:	40014800 	.word	0x40014800

08004180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f023 0201 	bic.w	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f023 0302 	bic.w	r3, r3, #2
 80041c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a1c      	ldr	r2, [pc, #112]	; (8004248 <TIM_OC1_SetConfig+0xc8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d10c      	bne.n	80041f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f023 0308 	bic.w	r3, r3, #8
 80041e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f023 0304 	bic.w	r3, r3, #4
 80041f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a13      	ldr	r2, [pc, #76]	; (8004248 <TIM_OC1_SetConfig+0xc8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d111      	bne.n	8004222 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	621a      	str	r2, [r3, #32]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	40010000 	.word	0x40010000

0800424c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f023 0210 	bic.w	r2, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f023 0320 	bic.w	r3, r3, #32
 8004296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <TIM_OC2_SetConfig+0xd4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d10d      	bne.n	80042c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a15      	ldr	r2, [pc, #84]	; (8004320 <TIM_OC2_SetConfig+0xd4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d113      	bne.n	80042f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40010000 	.word	0x40010000

08004324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800436c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <TIM_OC3_SetConfig+0xd0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d10d      	bne.n	800439e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800439c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a14      	ldr	r2, [pc, #80]	; (80043f4 <TIM_OC3_SetConfig+0xd0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d113      	bne.n	80043ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	621a      	str	r2, [r3, #32]
}
 80043e8:	bf00      	nop
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40010000 	.word	0x40010000

080043f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	031b      	lsls	r3, r3, #12
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a10      	ldr	r2, [pc, #64]	; (8004494 <TIM_OC4_SetConfig+0x9c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d109      	bne.n	800446c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800445e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	019b      	lsls	r3, r3, #6
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000

08004498 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f023 0201 	bic.w	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4a24      	ldr	r2, [pc, #144]	; (8004554 <TIM_TI1_SetConfig+0xbc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d013      	beq.n	80044ee <TIM_TI1_SetConfig+0x56>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044cc:	d00f      	beq.n	80044ee <TIM_TI1_SetConfig+0x56>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4a21      	ldr	r2, [pc, #132]	; (8004558 <TIM_TI1_SetConfig+0xc0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00b      	beq.n	80044ee <TIM_TI1_SetConfig+0x56>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a20      	ldr	r2, [pc, #128]	; (800455c <TIM_TI1_SetConfig+0xc4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d007      	beq.n	80044ee <TIM_TI1_SetConfig+0x56>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <TIM_TI1_SetConfig+0xc8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d003      	beq.n	80044ee <TIM_TI1_SetConfig+0x56>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a1e      	ldr	r2, [pc, #120]	; (8004564 <TIM_TI1_SetConfig+0xcc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d101      	bne.n	80044f2 <TIM_TI1_SetConfig+0x5a>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <TIM_TI1_SetConfig+0x5c>
 80044f2:	2300      	movs	r3, #0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e003      	b.n	8004512 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	b2db      	uxtb	r3, r3
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f023 030a 	bic.w	r3, r3, #10
 800452c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f003 030a 	and.w	r3, r3, #10
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40010000 	.word	0x40010000
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40014000 	.word	0x40014000

08004568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f023 0201 	bic.w	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f023 030a 	bic.w	r3, r3, #10
 80045a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b087      	sub	sp, #28
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f023 0210 	bic.w	r2, r3, #16
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	031b      	lsls	r3, r3, #12
 800460a:	b29b      	uxth	r3, r3
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004618:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	621a      	str	r2, [r3, #32]
}
 8004634:	bf00      	nop
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f023 0210 	bic.w	r2, r3, #16
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800466a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	031b      	lsls	r3, r3, #12
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800467c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	621a      	str	r2, [r3, #32]
}
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f023 0303 	bic.w	r3, r3, #3
 80046cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80046f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004744:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004756:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	031b      	lsls	r3, r3, #12
 800475c:	b29b      	uxth	r3, r3
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800476a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	031b      	lsls	r3, r3, #12
 8004770:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004792:	b480      	push	{r7}
 8004794:	b085      	sub	sp, #20
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f043 0307 	orr.w	r3, r3, #7
 80047b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	609a      	str	r2, [r3, #8]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	021a      	lsls	r2, r3, #8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	609a      	str	r2, [r3, #8]
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2201      	movs	r2, #1
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1a      	ldr	r2, [r3, #32]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	43db      	mvns	r3, r3
 800482a:	401a      	ands	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1a      	ldr	r2, [r3, #32]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	fa01 f303 	lsl.w	r3, r1, r3
 8004840:	431a      	orrs	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	621a      	str	r2, [r3, #32]
}
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004868:	2302      	movs	r3, #2
 800486a:	e050      	b.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1c      	ldr	r2, [pc, #112]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d018      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d013      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a18      	ldr	r2, [pc, #96]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00e      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a16      	ldr	r2, [pc, #88]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d009      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a15      	ldr	r2, [pc, #84]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a13      	ldr	r2, [pc, #76]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10c      	bne.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40010000 	.word	0x40010000
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	40014000 	.word	0x40014000

08004930 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004948:	2302      	movs	r3, #2
 800494a:	e03d      	b.n	80049c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e03f      	b.n	8004a8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fd faac 	bl	8001f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2224      	movs	r2, #36	; 0x24
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fddf 	bl	8005604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b08a      	sub	sp, #40	; 0x28
 8004a9a:	af02      	add	r7, sp, #8
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	603b      	str	r3, [r7, #0]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d17c      	bne.n	8004bb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <HAL_UART_Transmit+0x2c>
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e075      	b.n	8004bb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_UART_Transmit+0x3e>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e06e      	b.n	8004bb2 <HAL_UART_Transmit+0x11c>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2221      	movs	r2, #33	; 0x21
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aea:	f7fd fb41 	bl	8002170 <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	88fa      	ldrh	r2, [r7, #6]
 8004afa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b04:	d108      	bne.n	8004b18 <HAL_UART_Transmit+0x82>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	e003      	b.n	8004b20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b28:	e02a      	b.n	8004b80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2200      	movs	r2, #0
 8004b32:	2180      	movs	r1, #128	; 0x80
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fb1f 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e036      	b.n	8004bb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	e007      	b.n	8004b72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1cf      	bne.n	8004b2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2140      	movs	r1, #64	; 0x40
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 faef 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e006      	b.n	8004bb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d11d      	bne.n	8004c10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_UART_Receive_IT+0x26>
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e016      	b.n	8004c12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_UART_Receive_IT+0x38>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e00f      	b.n	8004c12 <HAL_UART_Receive_IT+0x58>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	461a      	mov	r2, r3
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fb24 	bl	8005254 <UART_Start_Receive_IT>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	e000      	b.n	8004c12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
  }
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b0ba      	sub	sp, #232	; 0xe8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_UART_IRQHandler+0x66>
 8004c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fc07 	bl	800548e <UART_Receive_IT>
      return;
 8004c80:	e256      	b.n	8005130 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80de 	beq.w	8004e48 <HAL_UART_IRQHandler+0x22c>
 8004c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80d1 	beq.w	8004e48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <HAL_UART_IRQHandler+0xae>
 8004cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f043 0201 	orr.w	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <HAL_UART_IRQHandler+0xd2>
 8004cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f043 0202 	orr.w	r2, r3, #2
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <HAL_UART_IRQHandler+0xf6>
 8004cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f043 0204 	orr.w	r2, r3, #4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d011      	beq.n	8004d42 <HAL_UART_IRQHandler+0x126>
 8004d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d105      	bne.n	8004d36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f043 0208 	orr.w	r2, r3, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 81ed 	beq.w	8005126 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d008      	beq.n	8004d6a <HAL_UART_IRQHandler+0x14e>
 8004d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fb92 	bl	800548e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b40      	cmp	r3, #64	; 0x40
 8004d76:	bf0c      	ite	eq
 8004d78:	2301      	moveq	r3, #1
 8004d7a:	2300      	movne	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d103      	bne.n	8004d96 <HAL_UART_IRQHandler+0x17a>
 8004d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d04f      	beq.n	8004e36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fa9a 	bl	80052d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da6:	2b40      	cmp	r3, #64	; 0x40
 8004da8:	d141      	bne.n	8004e2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3314      	adds	r3, #20
 8004db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1d9      	bne.n	8004daa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d013      	beq.n	8004e26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	4a7d      	ldr	r2, [pc, #500]	; (8004ff8 <HAL_UART_IRQHandler+0x3dc>)
 8004e04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fd fb61 	bl	80024d2 <HAL_DMA_Abort_IT>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d016      	beq.n	8004e44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e20:	4610      	mov	r0, r2
 8004e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e24:	e00e      	b.n	8004e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f990 	bl	800514c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2c:	e00a      	b.n	8004e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f98c 	bl	800514c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e34:	e006      	b.n	8004e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f988 	bl	800514c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e42:	e170      	b.n	8005126 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e44:	bf00      	nop
    return;
 8004e46:	e16e      	b.n	8005126 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	f040 814a 	bne.w	80050e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8143 	beq.w	80050e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 813c 	beq.w	80050e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	f040 80b4 	bne.w	8004ffc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 8140 	beq.w	800512a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	f080 8139 	bcs.w	800512a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eca:	f000 8088 	beq.w	8004fde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	330c      	adds	r3, #12
 8004ef6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1d9      	bne.n	8004ece <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3314      	adds	r3, #20
 8004f20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3314      	adds	r3, #20
 8004f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e1      	bne.n	8004f1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3314      	adds	r3, #20
 8004f5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3314      	adds	r3, #20
 8004f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e3      	bne.n	8004f56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fae:	f023 0310 	bic.w	r3, r3, #16
 8004fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004fc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e3      	bne.n	8004f9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fd fa0a 	bl	80023f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f8b6 	bl	8005160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ff4:	e099      	b.n	800512a <HAL_UART_IRQHandler+0x50e>
 8004ff6:	bf00      	nop
 8004ff8:	08005397 	.word	0x08005397
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005004:	b29b      	uxth	r3, r3
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 808b 	beq.w	800512e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8086 	beq.w	800512e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	330c      	adds	r3, #12
 8005028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005046:	647a      	str	r2, [r7, #68]	; 0x44
 8005048:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800504c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e3      	bne.n	8005022 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3314      	adds	r3, #20
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	623b      	str	r3, [r7, #32]
   return(result);
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3314      	adds	r3, #20
 800507a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800507e:	633a      	str	r2, [r7, #48]	; 0x30
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e3      	bne.n	800505a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0310 	bic.w	r3, r3, #16
 80050b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	330c      	adds	r3, #12
 80050c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050c4:	61fa      	str	r2, [r7, #28]
 80050c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	69b9      	ldr	r1, [r7, #24]
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	617b      	str	r3, [r7, #20]
   return(result);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e3      	bne.n	80050a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050dc:	4619      	mov	r1, r3
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f83e 	bl	8005160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050e4:	e023      	b.n	800512e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <HAL_UART_IRQHandler+0x4ea>
 80050f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f95d 	bl	80053be <UART_Transmit_IT>
    return;
 8005104:	e014      	b.n	8005130 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00e      	beq.n	8005130 <HAL_UART_IRQHandler+0x514>
 8005112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d008      	beq.n	8005130 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f99d 	bl	800545e <UART_EndTransmit_IT>
    return;
 8005124:	e004      	b.n	8005130 <HAL_UART_IRQHandler+0x514>
    return;
 8005126:	bf00      	nop
 8005128:	e002      	b.n	8005130 <HAL_UART_IRQHandler+0x514>
      return;
 800512a:	bf00      	nop
 800512c:	e000      	b.n	8005130 <HAL_UART_IRQHandler+0x514>
      return;
 800512e:	bf00      	nop
  }
}
 8005130:	37e8      	adds	r7, #232	; 0xe8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop

08005138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b090      	sub	sp, #64	; 0x40
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005188:	e050      	b.n	800522c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d04c      	beq.n	800522c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005198:	f7fc ffea 	bl	8002170 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d241      	bcs.n	800522c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	330c      	adds	r3, #12
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051c8:	637a      	str	r2, [r7, #52]	; 0x34
 80051ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e5      	bne.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3314      	adds	r3, #20
 80051e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	613b      	str	r3, [r7, #16]
   return(result);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f023 0301 	bic.w	r3, r3, #1
 80051f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3314      	adds	r3, #20
 80051fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fc:	623a      	str	r2, [r7, #32]
 80051fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	69f9      	ldr	r1, [r7, #28]
 8005202:	6a3a      	ldr	r2, [r7, #32]
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	61bb      	str	r3, [r7, #24]
   return(result);
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e5      	bne.n	80051dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e00f      	b.n	800524c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4013      	ands	r3, r2
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	429a      	cmp	r2, r3
 800523a:	bf0c      	ite	eq
 800523c:	2301      	moveq	r3, #1
 800523e:	2300      	movne	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	461a      	mov	r2, r3
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	429a      	cmp	r2, r3
 8005248:	d09f      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3740      	adds	r7, #64	; 0x40
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	4613      	mov	r3, r2
 8005260:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2222      	movs	r2, #34	; 0x22
 800527e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0220 	orr.w	r2, r2, #32
 80052c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b095      	sub	sp, #84	; 0x54
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052f8:	643a      	str	r2, [r7, #64]	; 0x40
 80052fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e5      	bne.n	80052d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3314      	adds	r3, #20
 8005312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	61fb      	str	r3, [r7, #28]
   return(result);
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	64bb      	str	r3, [r7, #72]	; 0x48
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3314      	adds	r3, #20
 800532a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800532c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800532e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e5      	bne.n	800530c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	2b01      	cmp	r3, #1
 8005346:	d119      	bne.n	800537c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	60bb      	str	r3, [r7, #8]
   return(result);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f023 0310 	bic.w	r3, r3, #16
 800535e:	647b      	str	r3, [r7, #68]	; 0x44
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005368:	61ba      	str	r2, [r7, #24]
 800536a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6979      	ldr	r1, [r7, #20]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	613b      	str	r3, [r7, #16]
   return(result);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
}
 800538a:	bf00      	nop
 800538c:	3754      	adds	r7, #84	; 0x54
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f7ff fecb 	bl	800514c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053b6:	bf00      	nop
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053be:	b480      	push	{r7}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b21      	cmp	r3, #33	; 0x21
 80053d0:	d13e      	bne.n	8005450 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053da:	d114      	bne.n	8005406 <UART_Transmit_IT+0x48>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d110      	bne.n	8005406 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	1c9a      	adds	r2, r3, #2
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	621a      	str	r2, [r3, #32]
 8005404:	e008      	b.n	8005418 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	1c59      	adds	r1, r3, #1
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6211      	str	r1, [r2, #32]
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29b      	uxth	r3, r3
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	4619      	mov	r1, r3
 8005426:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10f      	bne.n	800544c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800543a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800544a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	e000      	b.n	8005452 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005450:	2302      	movs	r3, #2
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005474:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff fe5a 	bl	8005138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b08c      	sub	sp, #48	; 0x30
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b22      	cmp	r3, #34	; 0x22
 80054a0:	f040 80ab 	bne.w	80055fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ac:	d117      	bne.n	80054de <UART_Receive_IT+0x50>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d113      	bne.n	80054de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	1c9a      	adds	r2, r3, #2
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	629a      	str	r2, [r3, #40]	; 0x28
 80054dc:	e026      	b.n	800552c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f0:	d007      	beq.n	8005502 <UART_Receive_IT+0x74>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <UART_Receive_IT+0x82>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	b2da      	uxtb	r2, r3
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	e008      	b.n	8005522 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551c:	b2da      	uxtb	r2, r3
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29b      	uxth	r3, r3
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	4619      	mov	r1, r3
 800553a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800553c:	2b00      	cmp	r3, #0
 800553e:	d15a      	bne.n	80055f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0220 	bic.w	r2, r2, #32
 800554e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800555e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695a      	ldr	r2, [r3, #20]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0201 	bic.w	r2, r2, #1
 800556e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	2b01      	cmp	r3, #1
 800557e:	d135      	bne.n	80055ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	613b      	str	r3, [r7, #16]
   return(result);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f023 0310 	bic.w	r3, r3, #16
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	330c      	adds	r3, #12
 80055a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a6:	623a      	str	r2, [r7, #32]
 80055a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	69f9      	ldr	r1, [r7, #28]
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e5      	bne.n	8005586 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d10a      	bne.n	80055de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055e2:	4619      	mov	r1, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff fdbb 	bl	8005160 <HAL_UARTEx_RxEventCallback>
 80055ea:	e002      	b.n	80055f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fc f8c3 	bl	8001778 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	e002      	b.n	80055fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e000      	b.n	80055fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055fa:	2302      	movs	r3, #2
  }
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3730      	adds	r7, #48	; 0x30
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005608:	b0c0      	sub	sp, #256	; 0x100
 800560a:	af00      	add	r7, sp, #0
 800560c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	68d9      	ldr	r1, [r3, #12]
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	ea40 0301 	orr.w	r3, r0, r1
 800562c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	431a      	orrs	r2, r3
 800563c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	431a      	orrs	r2, r3
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800565c:	f021 010c 	bic.w	r1, r1, #12
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800566a:	430b      	orrs	r3, r1
 800566c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800567a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567e:	6999      	ldr	r1, [r3, #24]
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	ea40 0301 	orr.w	r3, r0, r1
 800568a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800568c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4b8f      	ldr	r3, [pc, #572]	; (80058d0 <UART_SetConfig+0x2cc>)
 8005694:	429a      	cmp	r2, r3
 8005696:	d005      	beq.n	80056a4 <UART_SetConfig+0xa0>
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	4b8d      	ldr	r3, [pc, #564]	; (80058d4 <UART_SetConfig+0x2d0>)
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d104      	bne.n	80056ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056a4:	f7fd fd8c 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 80056a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056ac:	e003      	b.n	80056b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056ae:	f7fd fd73 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 80056b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c0:	f040 810c 	bne.w	80058dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056d6:	4622      	mov	r2, r4
 80056d8:	462b      	mov	r3, r5
 80056da:	1891      	adds	r1, r2, r2
 80056dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80056de:	415b      	adcs	r3, r3
 80056e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056e6:	4621      	mov	r1, r4
 80056e8:	eb12 0801 	adds.w	r8, r2, r1
 80056ec:	4629      	mov	r1, r5
 80056ee:	eb43 0901 	adc.w	r9, r3, r1
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005706:	4690      	mov	r8, r2
 8005708:	4699      	mov	r9, r3
 800570a:	4623      	mov	r3, r4
 800570c:	eb18 0303 	adds.w	r3, r8, r3
 8005710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005714:	462b      	mov	r3, r5
 8005716:	eb49 0303 	adc.w	r3, r9, r3
 800571a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800571e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800572a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800572e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005732:	460b      	mov	r3, r1
 8005734:	18db      	adds	r3, r3, r3
 8005736:	653b      	str	r3, [r7, #80]	; 0x50
 8005738:	4613      	mov	r3, r2
 800573a:	eb42 0303 	adc.w	r3, r2, r3
 800573e:	657b      	str	r3, [r7, #84]	; 0x54
 8005740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005748:	f7fb f8d0 	bl	80008ec <__aeabi_uldivmod>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4b61      	ldr	r3, [pc, #388]	; (80058d8 <UART_SetConfig+0x2d4>)
 8005752:	fba3 2302 	umull	r2, r3, r3, r2
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	011c      	lsls	r4, r3, #4
 800575a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800575e:	2200      	movs	r2, #0
 8005760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005764:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800576c:	4642      	mov	r2, r8
 800576e:	464b      	mov	r3, r9
 8005770:	1891      	adds	r1, r2, r2
 8005772:	64b9      	str	r1, [r7, #72]	; 0x48
 8005774:	415b      	adcs	r3, r3
 8005776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800577c:	4641      	mov	r1, r8
 800577e:	eb12 0a01 	adds.w	sl, r2, r1
 8005782:	4649      	mov	r1, r9
 8005784:	eb43 0b01 	adc.w	fp, r3, r1
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800579c:	4692      	mov	sl, r2
 800579e:	469b      	mov	fp, r3
 80057a0:	4643      	mov	r3, r8
 80057a2:	eb1a 0303 	adds.w	r3, sl, r3
 80057a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057aa:	464b      	mov	r3, r9
 80057ac:	eb4b 0303 	adc.w	r3, fp, r3
 80057b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057c8:	460b      	mov	r3, r1
 80057ca:	18db      	adds	r3, r3, r3
 80057cc:	643b      	str	r3, [r7, #64]	; 0x40
 80057ce:	4613      	mov	r3, r2
 80057d0:	eb42 0303 	adc.w	r3, r2, r3
 80057d4:	647b      	str	r3, [r7, #68]	; 0x44
 80057d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057de:	f7fb f885 	bl	80008ec <__aeabi_uldivmod>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	4b3b      	ldr	r3, [pc, #236]	; (80058d8 <UART_SetConfig+0x2d4>)
 80057ea:	fba3 2301 	umull	r2, r3, r3, r1
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	2264      	movs	r2, #100	; 0x64
 80057f2:	fb02 f303 	mul.w	r3, r2, r3
 80057f6:	1acb      	subs	r3, r1, r3
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057fe:	4b36      	ldr	r3, [pc, #216]	; (80058d8 <UART_SetConfig+0x2d4>)
 8005800:	fba3 2302 	umull	r2, r3, r3, r2
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800580c:	441c      	add	r4, r3
 800580e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005812:	2200      	movs	r2, #0
 8005814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005818:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800581c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005820:	4642      	mov	r2, r8
 8005822:	464b      	mov	r3, r9
 8005824:	1891      	adds	r1, r2, r2
 8005826:	63b9      	str	r1, [r7, #56]	; 0x38
 8005828:	415b      	adcs	r3, r3
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800582c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005830:	4641      	mov	r1, r8
 8005832:	1851      	adds	r1, r2, r1
 8005834:	6339      	str	r1, [r7, #48]	; 0x30
 8005836:	4649      	mov	r1, r9
 8005838:	414b      	adcs	r3, r1
 800583a:	637b      	str	r3, [r7, #52]	; 0x34
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005848:	4659      	mov	r1, fp
 800584a:	00cb      	lsls	r3, r1, #3
 800584c:	4651      	mov	r1, sl
 800584e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005852:	4651      	mov	r1, sl
 8005854:	00ca      	lsls	r2, r1, #3
 8005856:	4610      	mov	r0, r2
 8005858:	4619      	mov	r1, r3
 800585a:	4603      	mov	r3, r0
 800585c:	4642      	mov	r2, r8
 800585e:	189b      	adds	r3, r3, r2
 8005860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005864:	464b      	mov	r3, r9
 8005866:	460a      	mov	r2, r1
 8005868:	eb42 0303 	adc.w	r3, r2, r3
 800586c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800587c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005884:	460b      	mov	r3, r1
 8005886:	18db      	adds	r3, r3, r3
 8005888:	62bb      	str	r3, [r7, #40]	; 0x28
 800588a:	4613      	mov	r3, r2
 800588c:	eb42 0303 	adc.w	r3, r2, r3
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800589a:	f7fb f827 	bl	80008ec <__aeabi_uldivmod>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <UART_SetConfig+0x2d4>)
 80058a4:	fba3 1302 	umull	r1, r3, r3, r2
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	2164      	movs	r1, #100	; 0x64
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	3332      	adds	r3, #50	; 0x32
 80058b6:	4a08      	ldr	r2, [pc, #32]	; (80058d8 <UART_SetConfig+0x2d4>)
 80058b8:	fba2 2303 	umull	r2, r3, r2, r3
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	f003 0207 	and.w	r2, r3, #7
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4422      	add	r2, r4
 80058ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058cc:	e106      	b.n	8005adc <UART_SetConfig+0x4d8>
 80058ce:	bf00      	nop
 80058d0:	40011000 	.word	0x40011000
 80058d4:	40011400 	.word	0x40011400
 80058d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e0:	2200      	movs	r2, #0
 80058e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058ee:	4642      	mov	r2, r8
 80058f0:	464b      	mov	r3, r9
 80058f2:	1891      	adds	r1, r2, r2
 80058f4:	6239      	str	r1, [r7, #32]
 80058f6:	415b      	adcs	r3, r3
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
 80058fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058fe:	4641      	mov	r1, r8
 8005900:	1854      	adds	r4, r2, r1
 8005902:	4649      	mov	r1, r9
 8005904:	eb43 0501 	adc.w	r5, r3, r1
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	00eb      	lsls	r3, r5, #3
 8005912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005916:	00e2      	lsls	r2, r4, #3
 8005918:	4614      	mov	r4, r2
 800591a:	461d      	mov	r5, r3
 800591c:	4643      	mov	r3, r8
 800591e:	18e3      	adds	r3, r4, r3
 8005920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005924:	464b      	mov	r3, r9
 8005926:	eb45 0303 	adc.w	r3, r5, r3
 800592a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800592e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800593a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800594a:	4629      	mov	r1, r5
 800594c:	008b      	lsls	r3, r1, #2
 800594e:	4621      	mov	r1, r4
 8005950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005954:	4621      	mov	r1, r4
 8005956:	008a      	lsls	r2, r1, #2
 8005958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800595c:	f7fa ffc6 	bl	80008ec <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4b60      	ldr	r3, [pc, #384]	; (8005ae8 <UART_SetConfig+0x4e4>)
 8005966:	fba3 2302 	umull	r2, r3, r3, r2
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	011c      	lsls	r4, r3, #4
 800596e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800597c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005980:	4642      	mov	r2, r8
 8005982:	464b      	mov	r3, r9
 8005984:	1891      	adds	r1, r2, r2
 8005986:	61b9      	str	r1, [r7, #24]
 8005988:	415b      	adcs	r3, r3
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005990:	4641      	mov	r1, r8
 8005992:	1851      	adds	r1, r2, r1
 8005994:	6139      	str	r1, [r7, #16]
 8005996:	4649      	mov	r1, r9
 8005998:	414b      	adcs	r3, r1
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059a8:	4659      	mov	r1, fp
 80059aa:	00cb      	lsls	r3, r1, #3
 80059ac:	4651      	mov	r1, sl
 80059ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059b2:	4651      	mov	r1, sl
 80059b4:	00ca      	lsls	r2, r1, #3
 80059b6:	4610      	mov	r0, r2
 80059b8:	4619      	mov	r1, r3
 80059ba:	4603      	mov	r3, r0
 80059bc:	4642      	mov	r2, r8
 80059be:	189b      	adds	r3, r3, r2
 80059c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059c4:	464b      	mov	r3, r9
 80059c6:	460a      	mov	r2, r1
 80059c8:	eb42 0303 	adc.w	r3, r2, r3
 80059cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80059da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059e8:	4649      	mov	r1, r9
 80059ea:	008b      	lsls	r3, r1, #2
 80059ec:	4641      	mov	r1, r8
 80059ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059f2:	4641      	mov	r1, r8
 80059f4:	008a      	lsls	r2, r1, #2
 80059f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059fa:	f7fa ff77 	bl	80008ec <__aeabi_uldivmod>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4611      	mov	r1, r2
 8005a04:	4b38      	ldr	r3, [pc, #224]	; (8005ae8 <UART_SetConfig+0x4e4>)
 8005a06:	fba3 2301 	umull	r2, r3, r3, r1
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	2264      	movs	r2, #100	; 0x64
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	1acb      	subs	r3, r1, r3
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	3332      	adds	r3, #50	; 0x32
 8005a18:	4a33      	ldr	r2, [pc, #204]	; (8005ae8 <UART_SetConfig+0x4e4>)
 8005a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a24:	441c      	add	r4, r3
 8005a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	673b      	str	r3, [r7, #112]	; 0x70
 8005a2e:	677a      	str	r2, [r7, #116]	; 0x74
 8005a30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	1891      	adds	r1, r2, r2
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	415b      	adcs	r3, r3
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a44:	4641      	mov	r1, r8
 8005a46:	1851      	adds	r1, r2, r1
 8005a48:	6039      	str	r1, [r7, #0]
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	414b      	adcs	r3, r1
 8005a4e:	607b      	str	r3, [r7, #4]
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	00cb      	lsls	r3, r1, #3
 8005a60:	4651      	mov	r1, sl
 8005a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a66:	4651      	mov	r1, sl
 8005a68:	00ca      	lsls	r2, r1, #3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4642      	mov	r2, r8
 8005a72:	189b      	adds	r3, r3, r2
 8005a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a76:	464b      	mov	r3, r9
 8005a78:	460a      	mov	r2, r1
 8005a7a:	eb42 0303 	adc.w	r3, r2, r3
 8005a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	663b      	str	r3, [r7, #96]	; 0x60
 8005a8a:	667a      	str	r2, [r7, #100]	; 0x64
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a98:	4649      	mov	r1, r9
 8005a9a:	008b      	lsls	r3, r1, #2
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aa2:	4641      	mov	r1, r8
 8005aa4:	008a      	lsls	r2, r1, #2
 8005aa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005aaa:	f7fa ff1f 	bl	80008ec <__aeabi_uldivmod>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <UART_SetConfig+0x4e4>)
 8005ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	2164      	movs	r1, #100	; 0x64
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	3332      	adds	r3, #50	; 0x32
 8005ac6:	4a08      	ldr	r2, [pc, #32]	; (8005ae8 <UART_SetConfig+0x4e4>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	f003 020f 	and.w	r2, r3, #15
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4422      	add	r2, r4
 8005ada:	609a      	str	r2, [r3, #8]
}
 8005adc:	bf00      	nop
 8005ade:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ae8:	51eb851f 	.word	0x51eb851f

08005aec <siprintf>:
 8005aec:	b40e      	push	{r1, r2, r3}
 8005aee:	b500      	push	{lr}
 8005af0:	b09c      	sub	sp, #112	; 0x70
 8005af2:	ab1d      	add	r3, sp, #116	; 0x74
 8005af4:	9002      	str	r0, [sp, #8]
 8005af6:	9006      	str	r0, [sp, #24]
 8005af8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005afc:	4809      	ldr	r0, [pc, #36]	; (8005b24 <siprintf+0x38>)
 8005afe:	9107      	str	r1, [sp, #28]
 8005b00:	9104      	str	r1, [sp, #16]
 8005b02:	4909      	ldr	r1, [pc, #36]	; (8005b28 <siprintf+0x3c>)
 8005b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b08:	9105      	str	r1, [sp, #20]
 8005b0a:	6800      	ldr	r0, [r0, #0]
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	a902      	add	r1, sp, #8
 8005b10:	f000 f992 	bl	8005e38 <_svfiprintf_r>
 8005b14:	9b02      	ldr	r3, [sp, #8]
 8005b16:	2200      	movs	r2, #0
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	b01c      	add	sp, #112	; 0x70
 8005b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b20:	b003      	add	sp, #12
 8005b22:	4770      	bx	lr
 8005b24:	20000060 	.word	0x20000060
 8005b28:	ffff0208 	.word	0xffff0208

08005b2c <memset>:
 8005b2c:	4402      	add	r2, r0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d100      	bne.n	8005b36 <memset+0xa>
 8005b34:	4770      	bx	lr
 8005b36:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3a:	e7f9      	b.n	8005b30 <memset+0x4>

08005b3c <__errno>:
 8005b3c:	4b01      	ldr	r3, [pc, #4]	; (8005b44 <__errno+0x8>)
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000060 	.word	0x20000060

08005b48 <__libc_init_array>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	4d0d      	ldr	r5, [pc, #52]	; (8005b80 <__libc_init_array+0x38>)
 8005b4c:	4c0d      	ldr	r4, [pc, #52]	; (8005b84 <__libc_init_array+0x3c>)
 8005b4e:	1b64      	subs	r4, r4, r5
 8005b50:	10a4      	asrs	r4, r4, #2
 8005b52:	2600      	movs	r6, #0
 8005b54:	42a6      	cmp	r6, r4
 8005b56:	d109      	bne.n	8005b6c <__libc_init_array+0x24>
 8005b58:	4d0b      	ldr	r5, [pc, #44]	; (8005b88 <__libc_init_array+0x40>)
 8005b5a:	4c0c      	ldr	r4, [pc, #48]	; (8005b8c <__libc_init_array+0x44>)
 8005b5c:	f000 fc6a 	bl	8006434 <_init>
 8005b60:	1b64      	subs	r4, r4, r5
 8005b62:	10a4      	asrs	r4, r4, #2
 8005b64:	2600      	movs	r6, #0
 8005b66:	42a6      	cmp	r6, r4
 8005b68:	d105      	bne.n	8005b76 <__libc_init_array+0x2e>
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b70:	4798      	blx	r3
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7ee      	b.n	8005b54 <__libc_init_array+0xc>
 8005b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7a:	4798      	blx	r3
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	e7f2      	b.n	8005b66 <__libc_init_array+0x1e>
 8005b80:	080064dc 	.word	0x080064dc
 8005b84:	080064dc 	.word	0x080064dc
 8005b88:	080064dc 	.word	0x080064dc
 8005b8c:	080064e0 	.word	0x080064e0

08005b90 <__retarget_lock_acquire_recursive>:
 8005b90:	4770      	bx	lr

08005b92 <__retarget_lock_release_recursive>:
 8005b92:	4770      	bx	lr

08005b94 <_free_r>:
 8005b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b96:	2900      	cmp	r1, #0
 8005b98:	d044      	beq.n	8005c24 <_free_r+0x90>
 8005b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b9e:	9001      	str	r0, [sp, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ba6:	bfb8      	it	lt
 8005ba8:	18e4      	addlt	r4, r4, r3
 8005baa:	f000 f8df 	bl	8005d6c <__malloc_lock>
 8005bae:	4a1e      	ldr	r2, [pc, #120]	; (8005c28 <_free_r+0x94>)
 8005bb0:	9801      	ldr	r0, [sp, #4]
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	b933      	cbnz	r3, 8005bc4 <_free_r+0x30>
 8005bb6:	6063      	str	r3, [r4, #4]
 8005bb8:	6014      	str	r4, [r2, #0]
 8005bba:	b003      	add	sp, #12
 8005bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bc0:	f000 b8da 	b.w	8005d78 <__malloc_unlock>
 8005bc4:	42a3      	cmp	r3, r4
 8005bc6:	d908      	bls.n	8005bda <_free_r+0x46>
 8005bc8:	6825      	ldr	r5, [r4, #0]
 8005bca:	1961      	adds	r1, r4, r5
 8005bcc:	428b      	cmp	r3, r1
 8005bce:	bf01      	itttt	eq
 8005bd0:	6819      	ldreq	r1, [r3, #0]
 8005bd2:	685b      	ldreq	r3, [r3, #4]
 8005bd4:	1949      	addeq	r1, r1, r5
 8005bd6:	6021      	streq	r1, [r4, #0]
 8005bd8:	e7ed      	b.n	8005bb6 <_free_r+0x22>
 8005bda:	461a      	mov	r2, r3
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	b10b      	cbz	r3, 8005be4 <_free_r+0x50>
 8005be0:	42a3      	cmp	r3, r4
 8005be2:	d9fa      	bls.n	8005bda <_free_r+0x46>
 8005be4:	6811      	ldr	r1, [r2, #0]
 8005be6:	1855      	adds	r5, r2, r1
 8005be8:	42a5      	cmp	r5, r4
 8005bea:	d10b      	bne.n	8005c04 <_free_r+0x70>
 8005bec:	6824      	ldr	r4, [r4, #0]
 8005bee:	4421      	add	r1, r4
 8005bf0:	1854      	adds	r4, r2, r1
 8005bf2:	42a3      	cmp	r3, r4
 8005bf4:	6011      	str	r1, [r2, #0]
 8005bf6:	d1e0      	bne.n	8005bba <_free_r+0x26>
 8005bf8:	681c      	ldr	r4, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	6053      	str	r3, [r2, #4]
 8005bfe:	440c      	add	r4, r1
 8005c00:	6014      	str	r4, [r2, #0]
 8005c02:	e7da      	b.n	8005bba <_free_r+0x26>
 8005c04:	d902      	bls.n	8005c0c <_free_r+0x78>
 8005c06:	230c      	movs	r3, #12
 8005c08:	6003      	str	r3, [r0, #0]
 8005c0a:	e7d6      	b.n	8005bba <_free_r+0x26>
 8005c0c:	6825      	ldr	r5, [r4, #0]
 8005c0e:	1961      	adds	r1, r4, r5
 8005c10:	428b      	cmp	r3, r1
 8005c12:	bf04      	itt	eq
 8005c14:	6819      	ldreq	r1, [r3, #0]
 8005c16:	685b      	ldreq	r3, [r3, #4]
 8005c18:	6063      	str	r3, [r4, #4]
 8005c1a:	bf04      	itt	eq
 8005c1c:	1949      	addeq	r1, r1, r5
 8005c1e:	6021      	streq	r1, [r4, #0]
 8005c20:	6054      	str	r4, [r2, #4]
 8005c22:	e7ca      	b.n	8005bba <_free_r+0x26>
 8005c24:	b003      	add	sp, #12
 8005c26:	bd30      	pop	{r4, r5, pc}
 8005c28:	2000038c 	.word	0x2000038c

08005c2c <sbrk_aligned>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4e0e      	ldr	r6, [pc, #56]	; (8005c68 <sbrk_aligned+0x3c>)
 8005c30:	460c      	mov	r4, r1
 8005c32:	6831      	ldr	r1, [r6, #0]
 8005c34:	4605      	mov	r5, r0
 8005c36:	b911      	cbnz	r1, 8005c3e <sbrk_aligned+0x12>
 8005c38:	f000 fba6 	bl	8006388 <_sbrk_r>
 8005c3c:	6030      	str	r0, [r6, #0]
 8005c3e:	4621      	mov	r1, r4
 8005c40:	4628      	mov	r0, r5
 8005c42:	f000 fba1 	bl	8006388 <_sbrk_r>
 8005c46:	1c43      	adds	r3, r0, #1
 8005c48:	d00a      	beq.n	8005c60 <sbrk_aligned+0x34>
 8005c4a:	1cc4      	adds	r4, r0, #3
 8005c4c:	f024 0403 	bic.w	r4, r4, #3
 8005c50:	42a0      	cmp	r0, r4
 8005c52:	d007      	beq.n	8005c64 <sbrk_aligned+0x38>
 8005c54:	1a21      	subs	r1, r4, r0
 8005c56:	4628      	mov	r0, r5
 8005c58:	f000 fb96 	bl	8006388 <_sbrk_r>
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d101      	bne.n	8005c64 <sbrk_aligned+0x38>
 8005c60:	f04f 34ff 	mov.w	r4, #4294967295
 8005c64:	4620      	mov	r0, r4
 8005c66:	bd70      	pop	{r4, r5, r6, pc}
 8005c68:	20000390 	.word	0x20000390

08005c6c <_malloc_r>:
 8005c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c70:	1ccd      	adds	r5, r1, #3
 8005c72:	f025 0503 	bic.w	r5, r5, #3
 8005c76:	3508      	adds	r5, #8
 8005c78:	2d0c      	cmp	r5, #12
 8005c7a:	bf38      	it	cc
 8005c7c:	250c      	movcc	r5, #12
 8005c7e:	2d00      	cmp	r5, #0
 8005c80:	4607      	mov	r7, r0
 8005c82:	db01      	blt.n	8005c88 <_malloc_r+0x1c>
 8005c84:	42a9      	cmp	r1, r5
 8005c86:	d905      	bls.n	8005c94 <_malloc_r+0x28>
 8005c88:	230c      	movs	r3, #12
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	2600      	movs	r6, #0
 8005c8e:	4630      	mov	r0, r6
 8005c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d68 <_malloc_r+0xfc>
 8005c98:	f000 f868 	bl	8005d6c <__malloc_lock>
 8005c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca0:	461c      	mov	r4, r3
 8005ca2:	bb5c      	cbnz	r4, 8005cfc <_malloc_r+0x90>
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	f7ff ffc0 	bl	8005c2c <sbrk_aligned>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	4604      	mov	r4, r0
 8005cb0:	d155      	bne.n	8005d5e <_malloc_r+0xf2>
 8005cb2:	f8d8 4000 	ldr.w	r4, [r8]
 8005cb6:	4626      	mov	r6, r4
 8005cb8:	2e00      	cmp	r6, #0
 8005cba:	d145      	bne.n	8005d48 <_malloc_r+0xdc>
 8005cbc:	2c00      	cmp	r4, #0
 8005cbe:	d048      	beq.n	8005d52 <_malloc_r+0xe6>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	eb04 0903 	add.w	r9, r4, r3
 8005cca:	f000 fb5d 	bl	8006388 <_sbrk_r>
 8005cce:	4581      	cmp	r9, r0
 8005cd0:	d13f      	bne.n	8005d52 <_malloc_r+0xe6>
 8005cd2:	6821      	ldr	r1, [r4, #0]
 8005cd4:	1a6d      	subs	r5, r5, r1
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	4638      	mov	r0, r7
 8005cda:	f7ff ffa7 	bl	8005c2c <sbrk_aligned>
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d037      	beq.n	8005d52 <_malloc_r+0xe6>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	442b      	add	r3, r5
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d038      	beq.n	8005d62 <_malloc_r+0xf6>
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	42a2      	cmp	r2, r4
 8005cf4:	d12b      	bne.n	8005d4e <_malloc_r+0xe2>
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	e00f      	b.n	8005d1c <_malloc_r+0xb0>
 8005cfc:	6822      	ldr	r2, [r4, #0]
 8005cfe:	1b52      	subs	r2, r2, r5
 8005d00:	d41f      	bmi.n	8005d42 <_malloc_r+0xd6>
 8005d02:	2a0b      	cmp	r2, #11
 8005d04:	d917      	bls.n	8005d36 <_malloc_r+0xca>
 8005d06:	1961      	adds	r1, r4, r5
 8005d08:	42a3      	cmp	r3, r4
 8005d0a:	6025      	str	r5, [r4, #0]
 8005d0c:	bf18      	it	ne
 8005d0e:	6059      	strne	r1, [r3, #4]
 8005d10:	6863      	ldr	r3, [r4, #4]
 8005d12:	bf08      	it	eq
 8005d14:	f8c8 1000 	streq.w	r1, [r8]
 8005d18:	5162      	str	r2, [r4, r5]
 8005d1a:	604b      	str	r3, [r1, #4]
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	f104 060b 	add.w	r6, r4, #11
 8005d22:	f000 f829 	bl	8005d78 <__malloc_unlock>
 8005d26:	f026 0607 	bic.w	r6, r6, #7
 8005d2a:	1d23      	adds	r3, r4, #4
 8005d2c:	1af2      	subs	r2, r6, r3
 8005d2e:	d0ae      	beq.n	8005c8e <_malloc_r+0x22>
 8005d30:	1b9b      	subs	r3, r3, r6
 8005d32:	50a3      	str	r3, [r4, r2]
 8005d34:	e7ab      	b.n	8005c8e <_malloc_r+0x22>
 8005d36:	42a3      	cmp	r3, r4
 8005d38:	6862      	ldr	r2, [r4, #4]
 8005d3a:	d1dd      	bne.n	8005cf8 <_malloc_r+0x8c>
 8005d3c:	f8c8 2000 	str.w	r2, [r8]
 8005d40:	e7ec      	b.n	8005d1c <_malloc_r+0xb0>
 8005d42:	4623      	mov	r3, r4
 8005d44:	6864      	ldr	r4, [r4, #4]
 8005d46:	e7ac      	b.n	8005ca2 <_malloc_r+0x36>
 8005d48:	4634      	mov	r4, r6
 8005d4a:	6876      	ldr	r6, [r6, #4]
 8005d4c:	e7b4      	b.n	8005cb8 <_malloc_r+0x4c>
 8005d4e:	4613      	mov	r3, r2
 8005d50:	e7cc      	b.n	8005cec <_malloc_r+0x80>
 8005d52:	230c      	movs	r3, #12
 8005d54:	603b      	str	r3, [r7, #0]
 8005d56:	4638      	mov	r0, r7
 8005d58:	f000 f80e 	bl	8005d78 <__malloc_unlock>
 8005d5c:	e797      	b.n	8005c8e <_malloc_r+0x22>
 8005d5e:	6025      	str	r5, [r4, #0]
 8005d60:	e7dc      	b.n	8005d1c <_malloc_r+0xb0>
 8005d62:	605b      	str	r3, [r3, #4]
 8005d64:	deff      	udf	#255	; 0xff
 8005d66:	bf00      	nop
 8005d68:	2000038c 	.word	0x2000038c

08005d6c <__malloc_lock>:
 8005d6c:	4801      	ldr	r0, [pc, #4]	; (8005d74 <__malloc_lock+0x8>)
 8005d6e:	f7ff bf0f 	b.w	8005b90 <__retarget_lock_acquire_recursive>
 8005d72:	bf00      	nop
 8005d74:	20000388 	.word	0x20000388

08005d78 <__malloc_unlock>:
 8005d78:	4801      	ldr	r0, [pc, #4]	; (8005d80 <__malloc_unlock+0x8>)
 8005d7a:	f7ff bf0a 	b.w	8005b92 <__retarget_lock_release_recursive>
 8005d7e:	bf00      	nop
 8005d80:	20000388 	.word	0x20000388

08005d84 <__ssputs_r>:
 8005d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	688e      	ldr	r6, [r1, #8]
 8005d8a:	461f      	mov	r7, r3
 8005d8c:	42be      	cmp	r6, r7
 8005d8e:	680b      	ldr	r3, [r1, #0]
 8005d90:	4682      	mov	sl, r0
 8005d92:	460c      	mov	r4, r1
 8005d94:	4690      	mov	r8, r2
 8005d96:	d82c      	bhi.n	8005df2 <__ssputs_r+0x6e>
 8005d98:	898a      	ldrh	r2, [r1, #12]
 8005d9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d9e:	d026      	beq.n	8005dee <__ssputs_r+0x6a>
 8005da0:	6965      	ldr	r5, [r4, #20]
 8005da2:	6909      	ldr	r1, [r1, #16]
 8005da4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005da8:	eba3 0901 	sub.w	r9, r3, r1
 8005dac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005db0:	1c7b      	adds	r3, r7, #1
 8005db2:	444b      	add	r3, r9
 8005db4:	106d      	asrs	r5, r5, #1
 8005db6:	429d      	cmp	r5, r3
 8005db8:	bf38      	it	cc
 8005dba:	461d      	movcc	r5, r3
 8005dbc:	0553      	lsls	r3, r2, #21
 8005dbe:	d527      	bpl.n	8005e10 <__ssputs_r+0x8c>
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	f7ff ff53 	bl	8005c6c <_malloc_r>
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	b360      	cbz	r0, 8005e24 <__ssputs_r+0xa0>
 8005dca:	6921      	ldr	r1, [r4, #16]
 8005dcc:	464a      	mov	r2, r9
 8005dce:	f000 faeb 	bl	80063a8 <memcpy>
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ddc:	81a3      	strh	r3, [r4, #12]
 8005dde:	6126      	str	r6, [r4, #16]
 8005de0:	6165      	str	r5, [r4, #20]
 8005de2:	444e      	add	r6, r9
 8005de4:	eba5 0509 	sub.w	r5, r5, r9
 8005de8:	6026      	str	r6, [r4, #0]
 8005dea:	60a5      	str	r5, [r4, #8]
 8005dec:	463e      	mov	r6, r7
 8005dee:	42be      	cmp	r6, r7
 8005df0:	d900      	bls.n	8005df4 <__ssputs_r+0x70>
 8005df2:	463e      	mov	r6, r7
 8005df4:	6820      	ldr	r0, [r4, #0]
 8005df6:	4632      	mov	r2, r6
 8005df8:	4641      	mov	r1, r8
 8005dfa:	f000 faab 	bl	8006354 <memmove>
 8005dfe:	68a3      	ldr	r3, [r4, #8]
 8005e00:	1b9b      	subs	r3, r3, r6
 8005e02:	60a3      	str	r3, [r4, #8]
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	4433      	add	r3, r6
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e10:	462a      	mov	r2, r5
 8005e12:	f000 fad7 	bl	80063c4 <_realloc_r>
 8005e16:	4606      	mov	r6, r0
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1e0      	bne.n	8005dde <__ssputs_r+0x5a>
 8005e1c:	6921      	ldr	r1, [r4, #16]
 8005e1e:	4650      	mov	r0, sl
 8005e20:	f7ff feb8 	bl	8005b94 <_free_r>
 8005e24:	230c      	movs	r3, #12
 8005e26:	f8ca 3000 	str.w	r3, [sl]
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	f04f 30ff 	mov.w	r0, #4294967295
 8005e36:	e7e9      	b.n	8005e0c <__ssputs_r+0x88>

08005e38 <_svfiprintf_r>:
 8005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	4698      	mov	r8, r3
 8005e3e:	898b      	ldrh	r3, [r1, #12]
 8005e40:	061b      	lsls	r3, r3, #24
 8005e42:	b09d      	sub	sp, #116	; 0x74
 8005e44:	4607      	mov	r7, r0
 8005e46:	460d      	mov	r5, r1
 8005e48:	4614      	mov	r4, r2
 8005e4a:	d50e      	bpl.n	8005e6a <_svfiprintf_r+0x32>
 8005e4c:	690b      	ldr	r3, [r1, #16]
 8005e4e:	b963      	cbnz	r3, 8005e6a <_svfiprintf_r+0x32>
 8005e50:	2140      	movs	r1, #64	; 0x40
 8005e52:	f7ff ff0b 	bl	8005c6c <_malloc_r>
 8005e56:	6028      	str	r0, [r5, #0]
 8005e58:	6128      	str	r0, [r5, #16]
 8005e5a:	b920      	cbnz	r0, 8005e66 <_svfiprintf_r+0x2e>
 8005e5c:	230c      	movs	r3, #12
 8005e5e:	603b      	str	r3, [r7, #0]
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295
 8005e64:	e0d0      	b.n	8006008 <_svfiprintf_r+0x1d0>
 8005e66:	2340      	movs	r3, #64	; 0x40
 8005e68:	616b      	str	r3, [r5, #20]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6e:	2320      	movs	r3, #32
 8005e70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e74:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e78:	2330      	movs	r3, #48	; 0x30
 8005e7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006020 <_svfiprintf_r+0x1e8>
 8005e7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e82:	f04f 0901 	mov.w	r9, #1
 8005e86:	4623      	mov	r3, r4
 8005e88:	469a      	mov	sl, r3
 8005e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e8e:	b10a      	cbz	r2, 8005e94 <_svfiprintf_r+0x5c>
 8005e90:	2a25      	cmp	r2, #37	; 0x25
 8005e92:	d1f9      	bne.n	8005e88 <_svfiprintf_r+0x50>
 8005e94:	ebba 0b04 	subs.w	fp, sl, r4
 8005e98:	d00b      	beq.n	8005eb2 <_svfiprintf_r+0x7a>
 8005e9a:	465b      	mov	r3, fp
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	f7ff ff6f 	bl	8005d84 <__ssputs_r>
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	f000 80a9 	beq.w	8005ffe <_svfiprintf_r+0x1c6>
 8005eac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eae:	445a      	add	r2, fp
 8005eb0:	9209      	str	r2, [sp, #36]	; 0x24
 8005eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80a1 	beq.w	8005ffe <_svfiprintf_r+0x1c6>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ec6:	f10a 0a01 	add.w	sl, sl, #1
 8005eca:	9304      	str	r3, [sp, #16]
 8005ecc:	9307      	str	r3, [sp, #28]
 8005ece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ed2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ed4:	4654      	mov	r4, sl
 8005ed6:	2205      	movs	r2, #5
 8005ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005edc:	4850      	ldr	r0, [pc, #320]	; (8006020 <_svfiprintf_r+0x1e8>)
 8005ede:	f7fa f97f 	bl	80001e0 <memchr>
 8005ee2:	9a04      	ldr	r2, [sp, #16]
 8005ee4:	b9d8      	cbnz	r0, 8005f1e <_svfiprintf_r+0xe6>
 8005ee6:	06d0      	lsls	r0, r2, #27
 8005ee8:	bf44      	itt	mi
 8005eea:	2320      	movmi	r3, #32
 8005eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ef0:	0711      	lsls	r1, r2, #28
 8005ef2:	bf44      	itt	mi
 8005ef4:	232b      	movmi	r3, #43	; 0x2b
 8005ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005efa:	f89a 3000 	ldrb.w	r3, [sl]
 8005efe:	2b2a      	cmp	r3, #42	; 0x2a
 8005f00:	d015      	beq.n	8005f2e <_svfiprintf_r+0xf6>
 8005f02:	9a07      	ldr	r2, [sp, #28]
 8005f04:	4654      	mov	r4, sl
 8005f06:	2000      	movs	r0, #0
 8005f08:	f04f 0c0a 	mov.w	ip, #10
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f12:	3b30      	subs	r3, #48	; 0x30
 8005f14:	2b09      	cmp	r3, #9
 8005f16:	d94d      	bls.n	8005fb4 <_svfiprintf_r+0x17c>
 8005f18:	b1b0      	cbz	r0, 8005f48 <_svfiprintf_r+0x110>
 8005f1a:	9207      	str	r2, [sp, #28]
 8005f1c:	e014      	b.n	8005f48 <_svfiprintf_r+0x110>
 8005f1e:	eba0 0308 	sub.w	r3, r0, r8
 8005f22:	fa09 f303 	lsl.w	r3, r9, r3
 8005f26:	4313      	orrs	r3, r2
 8005f28:	9304      	str	r3, [sp, #16]
 8005f2a:	46a2      	mov	sl, r4
 8005f2c:	e7d2      	b.n	8005ed4 <_svfiprintf_r+0x9c>
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	1d19      	adds	r1, r3, #4
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	9103      	str	r1, [sp, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bfbb      	ittet	lt
 8005f3a:	425b      	neglt	r3, r3
 8005f3c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f40:	9307      	strge	r3, [sp, #28]
 8005f42:	9307      	strlt	r3, [sp, #28]
 8005f44:	bfb8      	it	lt
 8005f46:	9204      	strlt	r2, [sp, #16]
 8005f48:	7823      	ldrb	r3, [r4, #0]
 8005f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f4c:	d10c      	bne.n	8005f68 <_svfiprintf_r+0x130>
 8005f4e:	7863      	ldrb	r3, [r4, #1]
 8005f50:	2b2a      	cmp	r3, #42	; 0x2a
 8005f52:	d134      	bne.n	8005fbe <_svfiprintf_r+0x186>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	9203      	str	r2, [sp, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bfb8      	it	lt
 8005f60:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f64:	3402      	adds	r4, #2
 8005f66:	9305      	str	r3, [sp, #20]
 8005f68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006030 <_svfiprintf_r+0x1f8>
 8005f6c:	7821      	ldrb	r1, [r4, #0]
 8005f6e:	2203      	movs	r2, #3
 8005f70:	4650      	mov	r0, sl
 8005f72:	f7fa f935 	bl	80001e0 <memchr>
 8005f76:	b138      	cbz	r0, 8005f88 <_svfiprintf_r+0x150>
 8005f78:	9b04      	ldr	r3, [sp, #16]
 8005f7a:	eba0 000a 	sub.w	r0, r0, sl
 8005f7e:	2240      	movs	r2, #64	; 0x40
 8005f80:	4082      	lsls	r2, r0
 8005f82:	4313      	orrs	r3, r2
 8005f84:	3401      	adds	r4, #1
 8005f86:	9304      	str	r3, [sp, #16]
 8005f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f8c:	4825      	ldr	r0, [pc, #148]	; (8006024 <_svfiprintf_r+0x1ec>)
 8005f8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f92:	2206      	movs	r2, #6
 8005f94:	f7fa f924 	bl	80001e0 <memchr>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d038      	beq.n	800600e <_svfiprintf_r+0x1d6>
 8005f9c:	4b22      	ldr	r3, [pc, #136]	; (8006028 <_svfiprintf_r+0x1f0>)
 8005f9e:	bb1b      	cbnz	r3, 8005fe8 <_svfiprintf_r+0x1b0>
 8005fa0:	9b03      	ldr	r3, [sp, #12]
 8005fa2:	3307      	adds	r3, #7
 8005fa4:	f023 0307 	bic.w	r3, r3, #7
 8005fa8:	3308      	adds	r3, #8
 8005faa:	9303      	str	r3, [sp, #12]
 8005fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fae:	4433      	add	r3, r6
 8005fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb2:	e768      	b.n	8005e86 <_svfiprintf_r+0x4e>
 8005fb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fb8:	460c      	mov	r4, r1
 8005fba:	2001      	movs	r0, #1
 8005fbc:	e7a6      	b.n	8005f0c <_svfiprintf_r+0xd4>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	3401      	adds	r4, #1
 8005fc2:	9305      	str	r3, [sp, #20]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	f04f 0c0a 	mov.w	ip, #10
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd0:	3a30      	subs	r2, #48	; 0x30
 8005fd2:	2a09      	cmp	r2, #9
 8005fd4:	d903      	bls.n	8005fde <_svfiprintf_r+0x1a6>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0c6      	beq.n	8005f68 <_svfiprintf_r+0x130>
 8005fda:	9105      	str	r1, [sp, #20]
 8005fdc:	e7c4      	b.n	8005f68 <_svfiprintf_r+0x130>
 8005fde:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e7f0      	b.n	8005fca <_svfiprintf_r+0x192>
 8005fe8:	ab03      	add	r3, sp, #12
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	462a      	mov	r2, r5
 8005fee:	4b0f      	ldr	r3, [pc, #60]	; (800602c <_svfiprintf_r+0x1f4>)
 8005ff0:	a904      	add	r1, sp, #16
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	f3af 8000 	nop.w
 8005ff8:	1c42      	adds	r2, r0, #1
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	d1d6      	bne.n	8005fac <_svfiprintf_r+0x174>
 8005ffe:	89ab      	ldrh	r3, [r5, #12]
 8006000:	065b      	lsls	r3, r3, #25
 8006002:	f53f af2d 	bmi.w	8005e60 <_svfiprintf_r+0x28>
 8006006:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006008:	b01d      	add	sp, #116	; 0x74
 800600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600e:	ab03      	add	r3, sp, #12
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	462a      	mov	r2, r5
 8006014:	4b05      	ldr	r3, [pc, #20]	; (800602c <_svfiprintf_r+0x1f4>)
 8006016:	a904      	add	r1, sp, #16
 8006018:	4638      	mov	r0, r7
 800601a:	f000 f879 	bl	8006110 <_printf_i>
 800601e:	e7eb      	b.n	8005ff8 <_svfiprintf_r+0x1c0>
 8006020:	080064a0 	.word	0x080064a0
 8006024:	080064aa 	.word	0x080064aa
 8006028:	00000000 	.word	0x00000000
 800602c:	08005d85 	.word	0x08005d85
 8006030:	080064a6 	.word	0x080064a6

08006034 <_printf_common>:
 8006034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006038:	4616      	mov	r6, r2
 800603a:	4699      	mov	r9, r3
 800603c:	688a      	ldr	r2, [r1, #8]
 800603e:	690b      	ldr	r3, [r1, #16]
 8006040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006044:	4293      	cmp	r3, r2
 8006046:	bfb8      	it	lt
 8006048:	4613      	movlt	r3, r2
 800604a:	6033      	str	r3, [r6, #0]
 800604c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006050:	4607      	mov	r7, r0
 8006052:	460c      	mov	r4, r1
 8006054:	b10a      	cbz	r2, 800605a <_printf_common+0x26>
 8006056:	3301      	adds	r3, #1
 8006058:	6033      	str	r3, [r6, #0]
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	0699      	lsls	r1, r3, #26
 800605e:	bf42      	ittt	mi
 8006060:	6833      	ldrmi	r3, [r6, #0]
 8006062:	3302      	addmi	r3, #2
 8006064:	6033      	strmi	r3, [r6, #0]
 8006066:	6825      	ldr	r5, [r4, #0]
 8006068:	f015 0506 	ands.w	r5, r5, #6
 800606c:	d106      	bne.n	800607c <_printf_common+0x48>
 800606e:	f104 0a19 	add.w	sl, r4, #25
 8006072:	68e3      	ldr	r3, [r4, #12]
 8006074:	6832      	ldr	r2, [r6, #0]
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	42ab      	cmp	r3, r5
 800607a:	dc26      	bgt.n	80060ca <_printf_common+0x96>
 800607c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006080:	1e13      	subs	r3, r2, #0
 8006082:	6822      	ldr	r2, [r4, #0]
 8006084:	bf18      	it	ne
 8006086:	2301      	movne	r3, #1
 8006088:	0692      	lsls	r2, r2, #26
 800608a:	d42b      	bmi.n	80060e4 <_printf_common+0xb0>
 800608c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006090:	4649      	mov	r1, r9
 8006092:	4638      	mov	r0, r7
 8006094:	47c0      	blx	r8
 8006096:	3001      	adds	r0, #1
 8006098:	d01e      	beq.n	80060d8 <_printf_common+0xa4>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	6922      	ldr	r2, [r4, #16]
 800609e:	f003 0306 	and.w	r3, r3, #6
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	bf02      	ittt	eq
 80060a6:	68e5      	ldreq	r5, [r4, #12]
 80060a8:	6833      	ldreq	r3, [r6, #0]
 80060aa:	1aed      	subeq	r5, r5, r3
 80060ac:	68a3      	ldr	r3, [r4, #8]
 80060ae:	bf0c      	ite	eq
 80060b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060b4:	2500      	movne	r5, #0
 80060b6:	4293      	cmp	r3, r2
 80060b8:	bfc4      	itt	gt
 80060ba:	1a9b      	subgt	r3, r3, r2
 80060bc:	18ed      	addgt	r5, r5, r3
 80060be:	2600      	movs	r6, #0
 80060c0:	341a      	adds	r4, #26
 80060c2:	42b5      	cmp	r5, r6
 80060c4:	d11a      	bne.n	80060fc <_printf_common+0xc8>
 80060c6:	2000      	movs	r0, #0
 80060c8:	e008      	b.n	80060dc <_printf_common+0xa8>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4652      	mov	r2, sl
 80060ce:	4649      	mov	r1, r9
 80060d0:	4638      	mov	r0, r7
 80060d2:	47c0      	blx	r8
 80060d4:	3001      	adds	r0, #1
 80060d6:	d103      	bne.n	80060e0 <_printf_common+0xac>
 80060d8:	f04f 30ff 	mov.w	r0, #4294967295
 80060dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e0:	3501      	adds	r5, #1
 80060e2:	e7c6      	b.n	8006072 <_printf_common+0x3e>
 80060e4:	18e1      	adds	r1, r4, r3
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	2030      	movs	r0, #48	; 0x30
 80060ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060ee:	4422      	add	r2, r4
 80060f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060f8:	3302      	adds	r3, #2
 80060fa:	e7c7      	b.n	800608c <_printf_common+0x58>
 80060fc:	2301      	movs	r3, #1
 80060fe:	4622      	mov	r2, r4
 8006100:	4649      	mov	r1, r9
 8006102:	4638      	mov	r0, r7
 8006104:	47c0      	blx	r8
 8006106:	3001      	adds	r0, #1
 8006108:	d0e6      	beq.n	80060d8 <_printf_common+0xa4>
 800610a:	3601      	adds	r6, #1
 800610c:	e7d9      	b.n	80060c2 <_printf_common+0x8e>
	...

08006110 <_printf_i>:
 8006110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	7e0f      	ldrb	r7, [r1, #24]
 8006116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006118:	2f78      	cmp	r7, #120	; 0x78
 800611a:	4691      	mov	r9, r2
 800611c:	4680      	mov	r8, r0
 800611e:	460c      	mov	r4, r1
 8006120:	469a      	mov	sl, r3
 8006122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006126:	d807      	bhi.n	8006138 <_printf_i+0x28>
 8006128:	2f62      	cmp	r7, #98	; 0x62
 800612a:	d80a      	bhi.n	8006142 <_printf_i+0x32>
 800612c:	2f00      	cmp	r7, #0
 800612e:	f000 80d4 	beq.w	80062da <_printf_i+0x1ca>
 8006132:	2f58      	cmp	r7, #88	; 0x58
 8006134:	f000 80c0 	beq.w	80062b8 <_printf_i+0x1a8>
 8006138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800613c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006140:	e03a      	b.n	80061b8 <_printf_i+0xa8>
 8006142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006146:	2b15      	cmp	r3, #21
 8006148:	d8f6      	bhi.n	8006138 <_printf_i+0x28>
 800614a:	a101      	add	r1, pc, #4	; (adr r1, 8006150 <_printf_i+0x40>)
 800614c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006150:	080061a9 	.word	0x080061a9
 8006154:	080061bd 	.word	0x080061bd
 8006158:	08006139 	.word	0x08006139
 800615c:	08006139 	.word	0x08006139
 8006160:	08006139 	.word	0x08006139
 8006164:	08006139 	.word	0x08006139
 8006168:	080061bd 	.word	0x080061bd
 800616c:	08006139 	.word	0x08006139
 8006170:	08006139 	.word	0x08006139
 8006174:	08006139 	.word	0x08006139
 8006178:	08006139 	.word	0x08006139
 800617c:	080062c1 	.word	0x080062c1
 8006180:	080061e9 	.word	0x080061e9
 8006184:	0800627b 	.word	0x0800627b
 8006188:	08006139 	.word	0x08006139
 800618c:	08006139 	.word	0x08006139
 8006190:	080062e3 	.word	0x080062e3
 8006194:	08006139 	.word	0x08006139
 8006198:	080061e9 	.word	0x080061e9
 800619c:	08006139 	.word	0x08006139
 80061a0:	08006139 	.word	0x08006139
 80061a4:	08006283 	.word	0x08006283
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	602a      	str	r2, [r5, #0]
 80061b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061b8:	2301      	movs	r3, #1
 80061ba:	e09f      	b.n	80062fc <_printf_i+0x1ec>
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	682b      	ldr	r3, [r5, #0]
 80061c0:	0607      	lsls	r7, r0, #24
 80061c2:	f103 0104 	add.w	r1, r3, #4
 80061c6:	6029      	str	r1, [r5, #0]
 80061c8:	d501      	bpl.n	80061ce <_printf_i+0xbe>
 80061ca:	681e      	ldr	r6, [r3, #0]
 80061cc:	e003      	b.n	80061d6 <_printf_i+0xc6>
 80061ce:	0646      	lsls	r6, r0, #25
 80061d0:	d5fb      	bpl.n	80061ca <_printf_i+0xba>
 80061d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	da03      	bge.n	80061e2 <_printf_i+0xd2>
 80061da:	232d      	movs	r3, #45	; 0x2d
 80061dc:	4276      	negs	r6, r6
 80061de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061e2:	485a      	ldr	r0, [pc, #360]	; (800634c <_printf_i+0x23c>)
 80061e4:	230a      	movs	r3, #10
 80061e6:	e012      	b.n	800620e <_printf_i+0xfe>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	6820      	ldr	r0, [r4, #0]
 80061ec:	1d19      	adds	r1, r3, #4
 80061ee:	6029      	str	r1, [r5, #0]
 80061f0:	0605      	lsls	r5, r0, #24
 80061f2:	d501      	bpl.n	80061f8 <_printf_i+0xe8>
 80061f4:	681e      	ldr	r6, [r3, #0]
 80061f6:	e002      	b.n	80061fe <_printf_i+0xee>
 80061f8:	0641      	lsls	r1, r0, #25
 80061fa:	d5fb      	bpl.n	80061f4 <_printf_i+0xe4>
 80061fc:	881e      	ldrh	r6, [r3, #0]
 80061fe:	4853      	ldr	r0, [pc, #332]	; (800634c <_printf_i+0x23c>)
 8006200:	2f6f      	cmp	r7, #111	; 0x6f
 8006202:	bf0c      	ite	eq
 8006204:	2308      	moveq	r3, #8
 8006206:	230a      	movne	r3, #10
 8006208:	2100      	movs	r1, #0
 800620a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800620e:	6865      	ldr	r5, [r4, #4]
 8006210:	60a5      	str	r5, [r4, #8]
 8006212:	2d00      	cmp	r5, #0
 8006214:	bfa2      	ittt	ge
 8006216:	6821      	ldrge	r1, [r4, #0]
 8006218:	f021 0104 	bicge.w	r1, r1, #4
 800621c:	6021      	strge	r1, [r4, #0]
 800621e:	b90e      	cbnz	r6, 8006224 <_printf_i+0x114>
 8006220:	2d00      	cmp	r5, #0
 8006222:	d04b      	beq.n	80062bc <_printf_i+0x1ac>
 8006224:	4615      	mov	r5, r2
 8006226:	fbb6 f1f3 	udiv	r1, r6, r3
 800622a:	fb03 6711 	mls	r7, r3, r1, r6
 800622e:	5dc7      	ldrb	r7, [r0, r7]
 8006230:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006234:	4637      	mov	r7, r6
 8006236:	42bb      	cmp	r3, r7
 8006238:	460e      	mov	r6, r1
 800623a:	d9f4      	bls.n	8006226 <_printf_i+0x116>
 800623c:	2b08      	cmp	r3, #8
 800623e:	d10b      	bne.n	8006258 <_printf_i+0x148>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	07de      	lsls	r6, r3, #31
 8006244:	d508      	bpl.n	8006258 <_printf_i+0x148>
 8006246:	6923      	ldr	r3, [r4, #16]
 8006248:	6861      	ldr	r1, [r4, #4]
 800624a:	4299      	cmp	r1, r3
 800624c:	bfde      	ittt	le
 800624e:	2330      	movle	r3, #48	; 0x30
 8006250:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006254:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006258:	1b52      	subs	r2, r2, r5
 800625a:	6122      	str	r2, [r4, #16]
 800625c:	f8cd a000 	str.w	sl, [sp]
 8006260:	464b      	mov	r3, r9
 8006262:	aa03      	add	r2, sp, #12
 8006264:	4621      	mov	r1, r4
 8006266:	4640      	mov	r0, r8
 8006268:	f7ff fee4 	bl	8006034 <_printf_common>
 800626c:	3001      	adds	r0, #1
 800626e:	d14a      	bne.n	8006306 <_printf_i+0x1f6>
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	b004      	add	sp, #16
 8006276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	f043 0320 	orr.w	r3, r3, #32
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	4833      	ldr	r0, [pc, #204]	; (8006350 <_printf_i+0x240>)
 8006284:	2778      	movs	r7, #120	; 0x78
 8006286:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	6829      	ldr	r1, [r5, #0]
 800628e:	061f      	lsls	r7, r3, #24
 8006290:	f851 6b04 	ldr.w	r6, [r1], #4
 8006294:	d402      	bmi.n	800629c <_printf_i+0x18c>
 8006296:	065f      	lsls	r7, r3, #25
 8006298:	bf48      	it	mi
 800629a:	b2b6      	uxthmi	r6, r6
 800629c:	07df      	lsls	r7, r3, #31
 800629e:	bf48      	it	mi
 80062a0:	f043 0320 	orrmi.w	r3, r3, #32
 80062a4:	6029      	str	r1, [r5, #0]
 80062a6:	bf48      	it	mi
 80062a8:	6023      	strmi	r3, [r4, #0]
 80062aa:	b91e      	cbnz	r6, 80062b4 <_printf_i+0x1a4>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	f023 0320 	bic.w	r3, r3, #32
 80062b2:	6023      	str	r3, [r4, #0]
 80062b4:	2310      	movs	r3, #16
 80062b6:	e7a7      	b.n	8006208 <_printf_i+0xf8>
 80062b8:	4824      	ldr	r0, [pc, #144]	; (800634c <_printf_i+0x23c>)
 80062ba:	e7e4      	b.n	8006286 <_printf_i+0x176>
 80062bc:	4615      	mov	r5, r2
 80062be:	e7bd      	b.n	800623c <_printf_i+0x12c>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	6826      	ldr	r6, [r4, #0]
 80062c4:	6961      	ldr	r1, [r4, #20]
 80062c6:	1d18      	adds	r0, r3, #4
 80062c8:	6028      	str	r0, [r5, #0]
 80062ca:	0635      	lsls	r5, r6, #24
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	d501      	bpl.n	80062d4 <_printf_i+0x1c4>
 80062d0:	6019      	str	r1, [r3, #0]
 80062d2:	e002      	b.n	80062da <_printf_i+0x1ca>
 80062d4:	0670      	lsls	r0, r6, #25
 80062d6:	d5fb      	bpl.n	80062d0 <_printf_i+0x1c0>
 80062d8:	8019      	strh	r1, [r3, #0]
 80062da:	2300      	movs	r3, #0
 80062dc:	6123      	str	r3, [r4, #16]
 80062de:	4615      	mov	r5, r2
 80062e0:	e7bc      	b.n	800625c <_printf_i+0x14c>
 80062e2:	682b      	ldr	r3, [r5, #0]
 80062e4:	1d1a      	adds	r2, r3, #4
 80062e6:	602a      	str	r2, [r5, #0]
 80062e8:	681d      	ldr	r5, [r3, #0]
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	2100      	movs	r1, #0
 80062ee:	4628      	mov	r0, r5
 80062f0:	f7f9 ff76 	bl	80001e0 <memchr>
 80062f4:	b108      	cbz	r0, 80062fa <_printf_i+0x1ea>
 80062f6:	1b40      	subs	r0, r0, r5
 80062f8:	6060      	str	r0, [r4, #4]
 80062fa:	6863      	ldr	r3, [r4, #4]
 80062fc:	6123      	str	r3, [r4, #16]
 80062fe:	2300      	movs	r3, #0
 8006300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006304:	e7aa      	b.n	800625c <_printf_i+0x14c>
 8006306:	6923      	ldr	r3, [r4, #16]
 8006308:	462a      	mov	r2, r5
 800630a:	4649      	mov	r1, r9
 800630c:	4640      	mov	r0, r8
 800630e:	47d0      	blx	sl
 8006310:	3001      	adds	r0, #1
 8006312:	d0ad      	beq.n	8006270 <_printf_i+0x160>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	079b      	lsls	r3, r3, #30
 8006318:	d413      	bmi.n	8006342 <_printf_i+0x232>
 800631a:	68e0      	ldr	r0, [r4, #12]
 800631c:	9b03      	ldr	r3, [sp, #12]
 800631e:	4298      	cmp	r0, r3
 8006320:	bfb8      	it	lt
 8006322:	4618      	movlt	r0, r3
 8006324:	e7a6      	b.n	8006274 <_printf_i+0x164>
 8006326:	2301      	movs	r3, #1
 8006328:	4632      	mov	r2, r6
 800632a:	4649      	mov	r1, r9
 800632c:	4640      	mov	r0, r8
 800632e:	47d0      	blx	sl
 8006330:	3001      	adds	r0, #1
 8006332:	d09d      	beq.n	8006270 <_printf_i+0x160>
 8006334:	3501      	adds	r5, #1
 8006336:	68e3      	ldr	r3, [r4, #12]
 8006338:	9903      	ldr	r1, [sp, #12]
 800633a:	1a5b      	subs	r3, r3, r1
 800633c:	42ab      	cmp	r3, r5
 800633e:	dcf2      	bgt.n	8006326 <_printf_i+0x216>
 8006340:	e7eb      	b.n	800631a <_printf_i+0x20a>
 8006342:	2500      	movs	r5, #0
 8006344:	f104 0619 	add.w	r6, r4, #25
 8006348:	e7f5      	b.n	8006336 <_printf_i+0x226>
 800634a:	bf00      	nop
 800634c:	080064b1 	.word	0x080064b1
 8006350:	080064c2 	.word	0x080064c2

08006354 <memmove>:
 8006354:	4288      	cmp	r0, r1
 8006356:	b510      	push	{r4, lr}
 8006358:	eb01 0402 	add.w	r4, r1, r2
 800635c:	d902      	bls.n	8006364 <memmove+0x10>
 800635e:	4284      	cmp	r4, r0
 8006360:	4623      	mov	r3, r4
 8006362:	d807      	bhi.n	8006374 <memmove+0x20>
 8006364:	1e43      	subs	r3, r0, #1
 8006366:	42a1      	cmp	r1, r4
 8006368:	d008      	beq.n	800637c <memmove+0x28>
 800636a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800636e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006372:	e7f8      	b.n	8006366 <memmove+0x12>
 8006374:	4402      	add	r2, r0
 8006376:	4601      	mov	r1, r0
 8006378:	428a      	cmp	r2, r1
 800637a:	d100      	bne.n	800637e <memmove+0x2a>
 800637c:	bd10      	pop	{r4, pc}
 800637e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006386:	e7f7      	b.n	8006378 <memmove+0x24>

08006388 <_sbrk_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4d06      	ldr	r5, [pc, #24]	; (80063a4 <_sbrk_r+0x1c>)
 800638c:	2300      	movs	r3, #0
 800638e:	4604      	mov	r4, r0
 8006390:	4608      	mov	r0, r1
 8006392:	602b      	str	r3, [r5, #0]
 8006394:	f7fb fb0e 	bl	80019b4 <_sbrk>
 8006398:	1c43      	adds	r3, r0, #1
 800639a:	d102      	bne.n	80063a2 <_sbrk_r+0x1a>
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	b103      	cbz	r3, 80063a2 <_sbrk_r+0x1a>
 80063a0:	6023      	str	r3, [r4, #0]
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
 80063a4:	20000384 	.word	0x20000384

080063a8 <memcpy>:
 80063a8:	440a      	add	r2, r1
 80063aa:	4291      	cmp	r1, r2
 80063ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80063b0:	d100      	bne.n	80063b4 <memcpy+0xc>
 80063b2:	4770      	bx	lr
 80063b4:	b510      	push	{r4, lr}
 80063b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063be:	4291      	cmp	r1, r2
 80063c0:	d1f9      	bne.n	80063b6 <memcpy+0xe>
 80063c2:	bd10      	pop	{r4, pc}

080063c4 <_realloc_r>:
 80063c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c8:	4680      	mov	r8, r0
 80063ca:	4614      	mov	r4, r2
 80063cc:	460e      	mov	r6, r1
 80063ce:	b921      	cbnz	r1, 80063da <_realloc_r+0x16>
 80063d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063d4:	4611      	mov	r1, r2
 80063d6:	f7ff bc49 	b.w	8005c6c <_malloc_r>
 80063da:	b92a      	cbnz	r2, 80063e8 <_realloc_r+0x24>
 80063dc:	f7ff fbda 	bl	8005b94 <_free_r>
 80063e0:	4625      	mov	r5, r4
 80063e2:	4628      	mov	r0, r5
 80063e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e8:	f000 f81b 	bl	8006422 <_malloc_usable_size_r>
 80063ec:	4284      	cmp	r4, r0
 80063ee:	4607      	mov	r7, r0
 80063f0:	d802      	bhi.n	80063f8 <_realloc_r+0x34>
 80063f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063f6:	d812      	bhi.n	800641e <_realloc_r+0x5a>
 80063f8:	4621      	mov	r1, r4
 80063fa:	4640      	mov	r0, r8
 80063fc:	f7ff fc36 	bl	8005c6c <_malloc_r>
 8006400:	4605      	mov	r5, r0
 8006402:	2800      	cmp	r0, #0
 8006404:	d0ed      	beq.n	80063e2 <_realloc_r+0x1e>
 8006406:	42bc      	cmp	r4, r7
 8006408:	4622      	mov	r2, r4
 800640a:	4631      	mov	r1, r6
 800640c:	bf28      	it	cs
 800640e:	463a      	movcs	r2, r7
 8006410:	f7ff ffca 	bl	80063a8 <memcpy>
 8006414:	4631      	mov	r1, r6
 8006416:	4640      	mov	r0, r8
 8006418:	f7ff fbbc 	bl	8005b94 <_free_r>
 800641c:	e7e1      	b.n	80063e2 <_realloc_r+0x1e>
 800641e:	4635      	mov	r5, r6
 8006420:	e7df      	b.n	80063e2 <_realloc_r+0x1e>

08006422 <_malloc_usable_size_r>:
 8006422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006426:	1f18      	subs	r0, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	bfbc      	itt	lt
 800642c:	580b      	ldrlt	r3, [r1, r0]
 800642e:	18c0      	addlt	r0, r0, r3
 8006430:	4770      	bx	lr
	...

08006434 <_init>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	bf00      	nop
 8006438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643a:	bc08      	pop	{r3}
 800643c:	469e      	mov	lr, r3
 800643e:	4770      	bx	lr

08006440 <_fini>:
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	bf00      	nop
 8006444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006446:	bc08      	pop	{r3}
 8006448:	469e      	mov	lr, r3
 800644a:	4770      	bx	lr
