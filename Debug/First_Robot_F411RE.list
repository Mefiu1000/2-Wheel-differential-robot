
First_Robot_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005568  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005708  08005708  00015708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005774  08005774  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005774  08005774  00015774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800577c  0800577c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800577c  0800577c  0001577c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000064  080057e8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080057e8  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc4e  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000281f  00000000  00000000  0002fd25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00032548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9f  00000000  00000000  00033308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174ac  00000000  00000000  00033da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011bb3  00000000  00000000  0004b253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e723  00000000  00000000  0005ce06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d10  00000000  00000000  000eb52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ef23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056f0 	.word	0x080056f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080056f0 	.word	0x080056f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Button_Init>:

extern bool* ptrRobotEnable;
//Init

void Button_Init(Button_t* key, GPIO_TypeDef* Gpio_Port, uint16_t Gpio_Pin, uint32_t TimerDebounce)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	4613      	mov	r3, r2
 800058a:	80fb      	strh	r3, [r7, #6]
	key->State = IDLE;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]

	key->Gpio_Port = Gpio_Port;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	68ba      	ldr	r2, [r7, #8]
 8000596:	605a      	str	r2, [r3, #4]
	key->Gpio_Pin = Gpio_Pin;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	811a      	strh	r2, [r3, #8]

	key->TimerDebounce = TimerDebounce;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	60da      	str	r2, [r3, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <Button_IdleRoutine>:

void Button_IdleRoutine(Button_t* key)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(key->Gpio_Port, key->Gpio_Pin) == GPIO_PIN_RESET)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	891b      	ldrh	r3, [r3, #8]
 80005c0:	4619      	mov	r1, r3
 80005c2:	4610      	mov	r0, r2
 80005c4:	f001 fa8a 	bl	8001adc <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d107      	bne.n	80005de <Button_IdleRoutine+0x2e>
	{
		key->State = DEBOUNCE;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2201      	movs	r2, #1
 80005d2:	701a      	strb	r2, [r3, #0]
		key->LastTick = HAL_GetTick();
 80005d4:	f000 ff4e 	bl	8001474 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	611a      	str	r2, [r3, #16]
	}

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <Button_DebounceRoutine>:

void Button_DebounceRoutine(Button_t* key)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
	if( (HAL_GetTick() - key->LastTick) > key->TimerDebounce)
 80005ee:	f000 ff41 	bl	8001474 <HAL_GetTick>
 80005f2:	4602      	mov	r2, r0
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	691b      	ldr	r3, [r3, #16]
 80005f8:	1ad2      	subs	r2, r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	68db      	ldr	r3, [r3, #12]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d911      	bls.n	8000626 <Button_DebounceRoutine+0x40>
	{

		if(HAL_GPIO_ReadPin(key->Gpio_Port, key->Gpio_Pin) == GPIO_PIN_RESET)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	685a      	ldr	r2, [r3, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	891b      	ldrh	r3, [r3, #8]
 800060a:	4619      	mov	r1, r3
 800060c:	4610      	mov	r0, r2
 800060e:	f001 fa65 	bl	8001adc <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d103      	bne.n	8000620 <Button_DebounceRoutine+0x3a>
		{
			key->State = PRESSED;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2202      	movs	r2, #2
 800061c:	701a      	strb	r2, [r3, #0]
		else
		{
			key->State = IDLE;
		}
	}
}
 800061e:	e002      	b.n	8000626 <Button_DebounceRoutine+0x40>
			key->State = IDLE;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <Button_PressedRoutine>:

void Button_PressedRoutine(Button_t* key)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(key->Gpio_Port, key->Gpio_Pin) == GPIO_PIN_SET)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	891b      	ldrh	r3, [r3, #8]
 8000640:	4619      	mov	r1, r3
 8000642:	4610      	mov	r0, r2
 8000644:	f001 fa4a 	bl	8001adc <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d114      	bne.n	8000678 <Button_PressedRoutine+0x48>
	{
		key->State = IDLE;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
		*ptrRobotEnable = !(*ptrRobotEnable);
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <Button_PressedRoutine+0x50>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	bf14      	ite	ne
 800065e:	2301      	movne	r3, #1
 8000660:	2300      	moveq	r3, #0
 8000662:	b2db      	uxtb	r3, r3
 8000664:	f083 0301 	eor.w	r3, r3, #1
 8000668:	b2db      	uxtb	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <Button_PressedRoutine+0x50>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f002 0201 	and.w	r2, r2, #1
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	701a      	strb	r2, [r3, #0]

	}
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000000 	.word	0x20000000

08000684 <Button_Task>:
void Button_Task(Button_t* key)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	switch(key->State)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b02      	cmp	r3, #2
 8000692:	d00e      	beq.n	80006b2 <Button_Task+0x2e>
 8000694:	2b02      	cmp	r3, #2
 8000696:	dc10      	bgt.n	80006ba <Button_Task+0x36>
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <Button_Task+0x1e>
 800069c:	2b01      	cmp	r3, #1
 800069e:	d004      	beq.n	80006aa <Button_Task+0x26>
		break;
	case PRESSED:
		Button_PressedRoutine(key);
		break;
	}
}
 80006a0:	e00b      	b.n	80006ba <Button_Task+0x36>
		Button_IdleRoutine(key);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ff84 	bl	80005b0 <Button_IdleRoutine>
		break;
 80006a8:	e007      	b.n	80006ba <Button_Task+0x36>
		Button_DebounceRoutine(key);
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff9b 	bl	80005e6 <Button_DebounceRoutine>
		break;
 80006b0:	e003      	b.n	80006ba <Button_Task+0x36>
		Button_PressedRoutine(key);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff ffbc 	bl	8000630 <Button_PressedRoutine>
		break;
 80006b8:	bf00      	nop
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <HCSR04p_Init>:

volatile uint16_t Time_uc;

void HCSR04p_Init(HCSR04p_t *hcsr04p,  TIM_HandleTypeDef *timer_trigger, uint32_t Trigger_TimChannel, TIM_HandleTypeDef *timer_echo,
		uint32_t Echo_TimChannel_Start, uint32_t Echo_TimChannel_Stop)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b084      	sub	sp, #16
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	603b      	str	r3, [r7, #0]
	hcsr04p->htim_trigger = timer_trigger;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	601a      	str	r2, [r3, #0]
	hcsr04p->htim_echo = timer_echo;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	683a      	ldr	r2, [r7, #0]
 80006da:	605a      	str	r2, [r3, #4]

	hcsr04p->Trigger_TimChannel = Trigger_TimChannel;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	609a      	str	r2, [r3, #8]

	hcsr04p->Echo_TimChannel_Start = Echo_TimChannel_Start;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	60da      	str	r2, [r3, #12]
	hcsr04p->Echo_TimChannel_Stop = Echo_TimChannel_Stop;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	69fa      	ldr	r2, [r7, #28]
 80006ec:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start(hcsr04p->htim_echo);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 ff26 	bl	8002544 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(hcsr04p->htim_echo, hcsr04p->Echo_TimChannel_Start);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	685a      	ldr	r2, [r3, #4]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	4619      	mov	r1, r3
 8000702:	4610      	mov	r0, r2
 8000704:	f002 f8dc 	bl	80028c0 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start_IT(hcsr04p->htim_echo, hcsr04p->Echo_TimChannel_Stop);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	685a      	ldr	r2, [r3, #4]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	691b      	ldr	r3, [r3, #16]
 8000710:	4619      	mov	r1, r3
 8000712:	4610      	mov	r0, r2
 8000714:	f002 f9a2 	bl	8002a5c <HAL_TIM_IC_Start_IT>

	HAL_TIM_Base_Start(hcsr04p->htim_trigger);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f001 ff11 	bl	8002544 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(hcsr04p->htim_trigger, hcsr04p->Trigger_TimChannel);
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	4619      	mov	r1, r3
 800072c:	4610      	mov	r0, r2
 800072e:	f001 ffbd 	bl	80026ac <HAL_TIM_PWM_Start>
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <HCSR04p_InteruptHandler>:
void HCSR04p_ReadFloat(HCSR04p_t *hcsr04p, float *Read_distance)
{
	*Read_distance = (float)hcsr04p->Result_us * HCSR04p_FLOAT_CONST; //in cm
}
void HCSR04p_InteruptHandler(HCSR04p_t *hcsr04p)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	hcsr04p->Result_us = (uint16_t)hcsr04p->htim_echo->Instance->CCR2 - (uint16_t)hcsr04p->htim_echo->Instance->CCR1; //pulse width
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800074a:	b29a      	uxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000754:	b29b      	uxth	r3, r3
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	b29a      	uxth	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	829a      	strh	r2, [r3, #20]
	//HAL_TIM_IC_Start_IT(htim, HCSR04p_STOP_CHANNEL);
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <L298N_MotorInit>:
#include <L298N.h>


void L298N_MotorInit(Motor_t* motor, GPIO_TypeDef* MotorForward_Port, uint16_t MotorForward_Pin,
		GPIO_TypeDef* MotorBackward_Port, uint16_t MotorBackward_Pin)
{
 800076a:	b480      	push	{r7}
 800076c:	b085      	sub	sp, #20
 800076e:	af00      	add	r7, sp, #0
 8000770:	60f8      	str	r0, [r7, #12]
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4613      	mov	r3, r2
 8000778:	80fb      	strh	r3, [r7, #6]
	motor->State = OPERATION;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]

	motor->MotorForward_Port = MotorForward_Port;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	605a      	str	r2, [r3, #4]
	motor->MotorForward_Pin = MotorForward_Pin;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	88fa      	ldrh	r2, [r7, #6]
 800078a:	811a      	strh	r2, [r3, #8]

	motor->MotorBackward_Port = MotorBackward_Port;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	60da      	str	r2, [r3, #12]
	motor->MotorBackward_Pin = MotorBackward_Pin;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	8b3a      	ldrh	r2, [r7, #24]
 8000796:	821a      	strh	r2, [r3, #16]
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <RB_Write>:


#include "RingBuffer.h"

RB_Status RB_Write(RingBuffer_t* Buff, uint8_t Value)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
	uint8_t HeadTmp = (Buff->Head + 1) % (RING_BUFFER_SIZE + 1); //modulo to avoid accessing element outside of table
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	891b      	ldrh	r3, [r3, #8]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <RB_Write+0x5c>)
 80007b8:	fb83 1302 	smull	r1, r3, r3, r2
 80007bc:	1059      	asrs	r1, r3, #1
 80007be:	17d3      	asrs	r3, r2, #31
 80007c0:	1ac9      	subs	r1, r1, r3
 80007c2:	460b      	mov	r3, r1
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	440b      	add	r3, r1
 80007c8:	1ad1      	subs	r1, r2, r3
 80007ca:	460b      	mov	r3, r1
 80007cc:	73fb      	strb	r3, [r7, #15]

	if(HeadTmp == Buff->Tail)
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	895b      	ldrh	r3, [r3, #10]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d101      	bne.n	80007de <RB_Write+0x3a>
	{
		return RB_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e00a      	b.n	80007f4 <RB_Write+0x50>
	}

	Buff->Buffer[Buff->Head] = Value;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	891b      	ldrh	r3, [r3, #8]
 80007e2:	4619      	mov	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	78fa      	ldrb	r2, [r7, #3]
 80007e8:	545a      	strb	r2, [r3, r1]
	Buff->Head = HeadTmp;
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	811a      	strh	r2, [r3, #8]

	return RB_OK;
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	38e38e39 	.word	0x38e38e39

08000804 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b37      	ldr	r3, [pc, #220]	; (80008fc <MX_GPIO_Init+0xf8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a36      	ldr	r2, [pc, #216]	; (80008fc <MX_GPIO_Init+0xf8>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b34      	ldr	r3, [pc, #208]	; (80008fc <MX_GPIO_Init+0xf8>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b30      	ldr	r3, [pc, #192]	; (80008fc <MX_GPIO_Init+0xf8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a2f      	ldr	r2, [pc, #188]	; (80008fc <MX_GPIO_Init+0xf8>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_GPIO_Init+0xf8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b29      	ldr	r3, [pc, #164]	; (80008fc <MX_GPIO_Init+0xf8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a28      	ldr	r2, [pc, #160]	; (80008fc <MX_GPIO_Init+0xf8>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_GPIO_Init+0xf8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <MX_GPIO_Init+0xf8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a21      	ldr	r2, [pc, #132]	; (80008fc <MX_GPIO_Init+0xf8>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_GPIO_Init+0xf8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	481c      	ldr	r0, [pc, #112]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000890:	f001 f93c 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RightMotor_FWD_Pin|RightMotor_BWD_Pin|LeftMotor_FWD_Pin|LeftMotor_BWD_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f246 0130 	movw	r1, #24624	; 0x6030
 800089a:	481a      	ldr	r0, [pc, #104]	; (8000904 <MX_GPIO_Init+0x100>)
 800089c:	f001 f936 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4814      	ldr	r0, [pc, #80]	; (8000908 <MX_GPIO_Init+0x104>)
 80008b6:	f000 ff8d 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ba:	2320      	movs	r3, #32
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <MX_GPIO_Init+0xfc>)
 80008d2:	f000 ff7f 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RightMotor_FWD_Pin|RightMotor_BWD_Pin|LeftMotor_FWD_Pin|LeftMotor_BWD_Pin;
 80008d6:	f246 0330 	movw	r3, #24624	; 0x6030
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_GPIO_Init+0x100>)
 80008f0:	f000 ff70 	bl	80017d4 <HAL_GPIO_Init>

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40020400 	.word	0x40020400
 8000908:	40020800 	.word	0x40020800

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000912:	f000 fd49 	bl	80013a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000916:	f000 f86d 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091a:	f7ff ff73 	bl	8000804 <MX_GPIO_Init>
  MX_TIM2_Init();
 800091e:	f000 fae7 	bl	8000ef0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000922:	f000 fa11 	bl	8000d48 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000926:	f000 fb2f 	bl	8000f88 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800092a:	f000 fc81 	bl	8001230 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800092e:	f000 f8cb 	bl	8000ac8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HCSR04p_Init(&HCSR04p_front, &HCSR04p_TRIGGER_TIMER, HCSR04p_TRIG_CHANNEL, &HCSR04p_ECHO_TIMER, HCSR04p_START_CHANNEL, HCSR04p_STOP_CHANNEL);
 8000932:	2304      	movs	r3, #4
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	2300      	movs	r3, #0
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <main+0xb8>)
 800093c:	2208      	movs	r2, #8
 800093e:	4921      	ldr	r1, [pc, #132]	; (80009c4 <main+0xb8>)
 8000940:	4821      	ldr	r0, [pc, #132]	; (80009c8 <main+0xbc>)
 8000942:	f7ff febe 	bl	80006c2 <HCSR04p_Init>
  Button_Init(&BlueKey, B1_GPIO_Port, B1_Pin, 20);
 8000946:	2314      	movs	r3, #20
 8000948:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800094c:	491f      	ldr	r1, [pc, #124]	; (80009cc <main+0xc0>)
 800094e:	4820      	ldr	r0, [pc, #128]	; (80009d0 <main+0xc4>)
 8000950:	f7ff fe14 	bl	800057c <Button_Init>
  L298N_MotorInit(&LeftMotor, LeftMotor_FWD_GPIO_Port, LeftMotor_FWD_Pin, LeftMotor_BWD_GPIO_Port, LeftMotor_BWD_Pin);
 8000954:	2320      	movs	r3, #32
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <main+0xc8>)
 800095a:	2210      	movs	r2, #16
 800095c:	491d      	ldr	r1, [pc, #116]	; (80009d4 <main+0xc8>)
 800095e:	481e      	ldr	r0, [pc, #120]	; (80009d8 <main+0xcc>)
 8000960:	f7ff ff03 	bl	800076a <L298N_MotorInit>
  L298N_MotorInit(&RightMotor, RightMotor_FWD_GPIO_Port, RightMotor_FWD_Pin, RightMotor_BWD_GPIO_Port, RightMotor_BWD_Pin);
 8000964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <main+0xc8>)
 800096c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000970:	4918      	ldr	r1, [pc, #96]	; (80009d4 <main+0xc8>)
 8000972:	481a      	ldr	r0, [pc, #104]	; (80009dc <main+0xd0>)
 8000974:	f7ff fef9 	bl	800076a <L298N_MotorInit>


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000978:	2100      	movs	r1, #0
 800097a:	4819      	ldr	r0, [pc, #100]	; (80009e0 <main+0xd4>)
 800097c:	f001 fe96 	bl	80026ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000980:	2104      	movs	r1, #4
 8000982:	4817      	ldr	r0, [pc, #92]	; (80009e0 <main+0xd4>)
 8000984:	f001 fe92 	bl	80026ac <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2120      	movs	r1, #32
 800098c:	4815      	ldr	r0, [pc, #84]	; (80009e4 <main+0xd8>)
 800098e:	f001 f8bd 	bl	8001b0c <HAL_GPIO_WritePin>
  //HAL_UART_Receive_IT(&huart1, HC05_Command, 1);
  HAL_UART_Receive_IT(&huart1, &RXTemp, 1);
 8000992:	2201      	movs	r2, #1
 8000994:	4914      	ldr	r1, [pc, #80]	; (80009e8 <main+0xdc>)
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <main+0xe0>)
 8000998:	f003 fa6d 	bl	8003e76 <HAL_UART_Receive_IT>

  uint8_t i = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	71fb      	strb	r3, [r7, #7]
  for(i = 0; i < 9; i++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	71fb      	strb	r3, [r7, #7]
 80009a4:	e007      	b.n	80009b6 <main+0xaa>
  {
	  RB_Write(&RXBuffer, i);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4619      	mov	r1, r3
 80009aa:	4811      	ldr	r0, [pc, #68]	; (80009f0 <main+0xe4>)
 80009ac:	f7ff fefa 	bl	80007a4 <RB_Write>
  for(i = 0; i < 9; i++)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	3301      	adds	r3, #1
 80009b4:	71fb      	strb	r3, [r7, #7]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b08      	cmp	r3, #8
 80009ba:	d9f4      	bls.n	80009a6 <main+0x9a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Button_Task(&BlueKey); //Check button state
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <main+0xc4>)
 80009be:	f7ff fe61 	bl	8000684 <Button_Task>
 80009c2:	e7fb      	b.n	80009bc <main+0xb0>
 80009c4:	20000110 	.word	0x20000110
 80009c8:	20000080 	.word	0x20000080
 80009cc:	40020800 	.word	0x40020800
 80009d0:	2000009c 	.word	0x2000009c
 80009d4:	40020400 	.word	0x40020400
 80009d8:	200000d4 	.word	0x200000d4
 80009dc:	200000e8 	.word	0x200000e8
 80009e0:	200001a0 	.word	0x200001a0
 80009e4:	40020000 	.word	0x40020000
 80009e8:	20000108 	.word	0x20000108
 80009ec:	200001e8 	.word	0x200001e8
 80009f0:	200000fc 	.word	0x200000fc

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	; 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	2230      	movs	r2, #48	; 0x30
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 f9f0 	bl	8004de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <SystemClock_Config+0xcc>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	4a27      	ldr	r2, [pc, #156]	; (8000ac0 <SystemClock_Config+0xcc>)
 8000a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a26:	6413      	str	r3, [r2, #64]	; 0x40
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <SystemClock_Config+0xcc>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <SystemClock_Config+0xd0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a21      	ldr	r2, [pc, #132]	; (8000ac4 <SystemClock_Config+0xd0>)
 8000a3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <SystemClock_Config+0xd0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a50:	2302      	movs	r3, #2
 8000a52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a54:	2301      	movs	r3, #1
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a58:	2310      	movs	r3, #16
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a64:	2310      	movs	r3, #16
 8000a66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a72:	2304      	movs	r3, #4
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f87a 	bl	8001b74 <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a86:	f000 f8ab 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 fadc 	bl	8002064 <HAL_RCC_ClockConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ab2:	f000 f895 	bl	8000be0 <Error_Handler>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3750      	adds	r7, #80	; 0x50
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40007000 	.word	0x40007000

08000ac8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	201b      	movs	r0, #27
 8000ad2:	f000 fdb6 	bl	8001642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ad6:	201b      	movs	r0, #27
 8000ad8:	f000 fdcf 	bl	800167a <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2025      	movs	r0, #37	; 0x25
 8000ae2:	f000 fdae 	bl	8001642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ae6:	2025      	movs	r0, #37	; 0x25
 8000ae8:	f000 fdc7 	bl	800167a <HAL_NVIC_EnableIRQ>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	if (htim == HCSR04p_front.htim_echo)
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <HAL_TIM_IC_CaptureCallback+0x28>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d106      	bne.n	8000b10 <HAL_TIM_IC_CaptureCallback+0x20>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	7f1b      	ldrb	r3, [r3, #28]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d102      	bne.n	8000b10 <HAL_TIM_IC_CaptureCallback+0x20>
		{
			HCSR04p_InteruptHandler(&HCSR04p_front);
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <HAL_TIM_IC_CaptureCallback+0x28>)
 8000b0c:	f7ff fe15 	bl	800073a <HCSR04p_InteruptHandler>
		}
	}
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000080 	.word	0x20000080

08000b1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a22      	ldr	r2, [pc, #136]	; (8000bb4 <HAL_UART_RxCpltCallback+0x98>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d13d      	bne.n	8000baa <HAL_UART_RxCpltCallback+0x8e>
	{
		//Status_RX = HAL_UART_Receive_IT(&huart1, HC05_Command, 1);
		RB_Write(&RXBuffer, RXTemp);
 8000b2e:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <HAL_UART_RxCpltCallback+0x9c>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	4619      	mov	r1, r3
 8000b34:	4821      	ldr	r0, [pc, #132]	; (8000bbc <HAL_UART_RxCpltCallback+0xa0>)
 8000b36:	f7ff fe35 	bl	80007a4 <RB_Write>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b3a:	2120      	movs	r1, #32
 8000b3c:	4820      	ldr	r0, [pc, #128]	; (8000bc0 <HAL_UART_RxCpltCallback+0xa4>)
 8000b3e:	f000 fffe 	bl	8001b3e <HAL_GPIO_TogglePin>
		*ptrMotor_Action_Flag = true;
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <HAL_UART_RxCpltCallback+0xa8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		if(Status_RX != HAL_OK)
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <HAL_UART_RxCpltCallback+0xac>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d014      	beq.n	8000b7c <HAL_UART_RxCpltCallback+0x60>
		{
			Length = sprintf((char*)Msg, "Error while receiving data\n\r");
 8000b52:	491e      	ldr	r1, [pc, #120]	; (8000bcc <HAL_UART_RxCpltCallback+0xb0>)
 8000b54:	481e      	ldr	r0, [pc, #120]	; (8000bd0 <HAL_UART_RxCpltCallback+0xb4>)
 8000b56:	f004 f927 	bl	8004da8 <siprintf>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_UART_RxCpltCallback+0xb8>)
 8000b60:	701a      	strb	r2, [r3, #0]
			Status_TX = HAL_UART_Transmit(&huart1, Msg, Length, 200);
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_UART_RxCpltCallback+0xb8>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	23c8      	movs	r3, #200	; 0xc8
 8000b6a:	4919      	ldr	r1, [pc, #100]	; (8000bd0 <HAL_UART_RxCpltCallback+0xb4>)
 8000b6c:	481a      	ldr	r0, [pc, #104]	; (8000bd8 <HAL_UART_RxCpltCallback+0xbc>)
 8000b6e:	f003 f8f0 	bl	8003d52 <HAL_UART_Transmit>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_UART_RxCpltCallback+0xc0>)
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	e00d      	b.n	8000b98 <HAL_UART_RxCpltCallback+0x7c>
		}
		else
		{
			RB_Write(&RXBuffer, RXTemp);
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_UART_RxCpltCallback+0x9c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	480e      	ldr	r0, [pc, #56]	; (8000bbc <HAL_UART_RxCpltCallback+0xa0>)
 8000b84:	f7ff fe0e 	bl	80007a4 <RB_Write>

			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b88:	2120      	movs	r1, #32
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <HAL_UART_RxCpltCallback+0xa4>)
 8000b8c:	f000 ffd7 	bl	8001b3e <HAL_GPIO_TogglePin>
			*ptrMotor_Action_Flag = true;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <HAL_UART_RxCpltCallback+0xa8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
		}
		Status_RX = HAL_UART_Receive_IT(&huart1, &RXTemp, 1);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4907      	ldr	r1, [pc, #28]	; (8000bb8 <HAL_UART_RxCpltCallback+0x9c>)
 8000b9c:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <HAL_UART_RxCpltCallback+0xbc>)
 8000b9e:	f003 f96a 	bl	8003e76 <HAL_UART_Receive_IT>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_UART_RxCpltCallback+0xac>)
 8000ba8:	701a      	strb	r2, [r3, #0]
	}
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40011000 	.word	0x40011000
 8000bb8:	20000108 	.word	0x20000108
 8000bbc:	200000fc 	.word	0x200000fc
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	200000cf 	.word	0x200000cf
 8000bcc:	08005708 	.word	0x08005708
 8000bd0:	200000b0 	.word	0x200000b0
 8000bd4:	200000ce 	.word	0x200000ce
 8000bd8:	200001e8 	.word	0x200001e8
 8000bdc:	200000d0 	.word	0x200000d0

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c2a:	2007      	movs	r0, #7
 8000c2c:	f000 fcfe 	bl	800162c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c88:	f000 fbe0 	bl	800144c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <TIM1_CC_IRQHandler+0x10>)
 8000c96:	f001 fffb 	bl	8002c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000110 	.word	0x20000110

08000ca4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <USART1_IRQHandler+0x10>)
 8000caa:	f003 f915 	bl	8003ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200001e8 	.word	0x200001e8

08000cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc0:	4a14      	ldr	r2, [pc, #80]	; (8000d14 <_sbrk+0x5c>)
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <_sbrk+0x60>)
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <_sbrk+0x64>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	; (8000d20 <_sbrk+0x68>)
 8000cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d207      	bcs.n	8000cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce8:	f004 f886 	bl	8004df8 <__errno>
 8000cec:	4603      	mov	r3, r0
 8000cee:	220c      	movs	r2, #12
 8000cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	e009      	b.n	8000d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <_sbrk+0x64>)
 8000d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20020000 	.word	0x20020000
 8000d18:	00000400 	.word	0x00000400
 8000d1c:	2000010c 	.word	0x2000010c
 8000d20:	20000378 	.word	0x20000378

08000d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b09a      	sub	sp, #104	; 0x68
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f004 f82a 	bl	8004de8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d94:	4b54      	ldr	r3, [pc, #336]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000d96:	4a55      	ldr	r2, [pc, #340]	; (8000eec <MX_TIM1_Init+0x1a4>)
 8000d98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000d9a:	4b53      	ldr	r3, [pc, #332]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000d9c:	2254      	movs	r2, #84	; 0x54
 8000d9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b51      	ldr	r3, [pc, #324]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000da6:	4b50      	ldr	r3, [pc, #320]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dae:	4b4e      	ldr	r3, [pc, #312]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db4:	4b4c      	ldr	r3, [pc, #304]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dba:	4b4b      	ldr	r3, [pc, #300]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dc0:	4849      	ldr	r0, [pc, #292]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000dc2:	f001 fb6f 	bl	80024a4 <HAL_TIM_Base_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000dcc:	f7ff ff08 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4842      	ldr	r0, [pc, #264]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000dde:	f002 f9bd 	bl	800315c <HAL_TIM_ConfigClockSource>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000de8:	f7ff fefa 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000dec:	483e      	ldr	r0, [pc, #248]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000dee:	f001 fd0d 	bl	800280c <HAL_TIM_IC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000df8:	f7ff fef2 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dfc:	483a      	ldr	r0, [pc, #232]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000dfe:	f001 fbfb 	bl	80025f8 <HAL_TIM_PWM_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e08:	f7ff feea 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4833      	ldr	r0, [pc, #204]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000e1c:	f002 fe78 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8000e26:	f7ff fedb 	bl	8000be0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e3e:	2200      	movs	r2, #0
 8000e40:	4619      	mov	r1, r3
 8000e42:	4829      	ldr	r0, [pc, #164]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000e44:	f002 f82c 	bl	8002ea0 <HAL_TIM_IC_ConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000e4e:	f7ff fec7 	bl	8000be0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e52:	2302      	movs	r3, #2
 8000e54:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e56:	2302      	movs	r3, #2
 8000e58:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e5e:	2204      	movs	r2, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4821      	ldr	r0, [pc, #132]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000e64:	f002 f81c 	bl	8002ea0 <HAL_TIM_IC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000e6e:	f7ff feb7 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e72:	2360      	movs	r3, #96	; 0x60
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10;
 8000e76:	230a      	movs	r3, #10
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	2208      	movs	r2, #8
 8000e94:	4619      	mov	r1, r3
 8000e96:	4814      	ldr	r0, [pc, #80]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000e98:	f002 f89e 	bl	8002fd8 <HAL_TIM_PWM_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8000ea2:	f7ff fe9d 	bl	8000be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000eca:	f002 fe8f 	bl	8003bec <HAL_TIMEx_ConfigBreakDeadTime>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8000ed4:	f7ff fe84 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <MX_TIM1_Init+0x1a0>)
 8000eda:	f000 f949 	bl	8001170 <HAL_TIM_MspPostInit>

}
 8000ede:	bf00      	nop
 8000ee0:	3768      	adds	r7, #104	; 0x68
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000110 	.word	0x20000110
 8000eec:	40010000 	.word	0x40010000

08000ef0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f22:	f04f 32ff 	mov.w	r2, #4294967295
 8000f26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f34:	4813      	ldr	r0, [pc, #76]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f36:	f001 fab5 	bl	80024a4 <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f40:	f7ff fe4e 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f52:	f002 f903 	bl	800315c <HAL_TIM_ConfigClockSource>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f5c:	f7ff fe40 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f68:	463b      	mov	r3, r7
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f6e:	f002 fdcf 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f78:	f7ff fe32 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000158 	.word	0x20000158

08000f88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08e      	sub	sp, #56	; 0x38
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9c:	f107 0320 	add.w	r3, r7, #32
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fb8:	4b32      	ldr	r3, [pc, #200]	; (8001084 <MX_TIM3_Init+0xfc>)
 8000fba:	4a33      	ldr	r2, [pc, #204]	; (8001088 <MX_TIM3_Init+0x100>)
 8000fbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8000fbe:	4b31      	ldr	r3, [pc, #196]	; (8001084 <MX_TIM3_Init+0xfc>)
 8000fc0:	2229      	movs	r2, #41	; 0x29
 8000fc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <MX_TIM3_Init+0xfc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000fca:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <MX_TIM3_Init+0xfc>)
 8000fcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <MX_TIM3_Init+0xfc>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <MX_TIM3_Init+0xfc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fde:	4829      	ldr	r0, [pc, #164]	; (8001084 <MX_TIM3_Init+0xfc>)
 8000fe0:	f001 fa60 	bl	80024a4 <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fea:	f7ff fdf9 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ff4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4822      	ldr	r0, [pc, #136]	; (8001084 <MX_TIM3_Init+0xfc>)
 8000ffc:	f002 f8ae 	bl	800315c <HAL_TIM_ConfigClockSource>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001006:	f7ff fdeb 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800100a:	481e      	ldr	r0, [pc, #120]	; (8001084 <MX_TIM3_Init+0xfc>)
 800100c:	f001 faf4 	bl	80025f8 <HAL_TIM_PWM_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001016:	f7ff fde3 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	4619      	mov	r1, r3
 8001028:	4816      	ldr	r0, [pc, #88]	; (8001084 <MX_TIM3_Init+0xfc>)
 800102a:	f002 fd71 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001034:	f7ff fdd4 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001038:	2360      	movs	r3, #96	; 0x60
 800103a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800103c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001040:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <MX_TIM3_Init+0xfc>)
 8001052:	f001 ffc1 	bl	8002fd8 <HAL_TIM_PWM_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800105c:	f7ff fdc0 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2204      	movs	r2, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4807      	ldr	r0, [pc, #28]	; (8001084 <MX_TIM3_Init+0xfc>)
 8001068:	f001 ffb6 	bl	8002fd8 <HAL_TIM_PWM_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001072:	f7ff fdb5 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <MX_TIM3_Init+0xfc>)
 8001078:	f000 f87a 	bl	8001170 <HAL_TIM_MspPostInit>

}
 800107c:	bf00      	nop
 800107e:	3738      	adds	r7, #56	; 0x38
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200001a0 	.word	0x200001a0
 8001088:	40000400 	.word	0x40000400

0800108c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a2d      	ldr	r2, [pc, #180]	; (8001160 <HAL_TIM_Base_MspInit+0xd4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d12d      	bne.n	800110a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <HAL_TIM_Base_MspInit+0xd8>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a2b      	ldr	r2, [pc, #172]	; (8001164 <HAL_TIM_Base_MspInit+0xd8>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <HAL_TIM_Base_MspInit+0xd8>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <HAL_TIM_Base_MspInit+0xd8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a24      	ldr	r2, [pc, #144]	; (8001164 <HAL_TIM_Base_MspInit+0xd8>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <HAL_TIM_Base_MspInit+0xd8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HC_SR04p_ECHO_Pin;
 80010e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HC_SR04p_ECHO_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4819      	ldr	r0, [pc, #100]	; (8001168 <HAL_TIM_Base_MspInit+0xdc>)
 8001104:	f000 fb66 	bl	80017d4 <HAL_GPIO_Init>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001108:	e026      	b.n	8001158 <HAL_TIM_Base_MspInit+0xcc>
  else if(tim_baseHandle->Instance==TIM2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001112:	d10e      	bne.n	8001132 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_TIM_Base_MspInit+0xd8>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	4a11      	ldr	r2, [pc, #68]	; (8001164 <HAL_TIM_Base_MspInit+0xd8>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6413      	str	r3, [r2, #64]	; 0x40
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_TIM_Base_MspInit+0xd8>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	693b      	ldr	r3, [r7, #16]
}
 8001130:	e012      	b.n	8001158 <HAL_TIM_Base_MspInit+0xcc>
  else if(tim_baseHandle->Instance==TIM3)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a0d      	ldr	r2, [pc, #52]	; (800116c <HAL_TIM_Base_MspInit+0xe0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d10d      	bne.n	8001158 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_TIM_Base_MspInit+0xd8>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_TIM_Base_MspInit+0xd8>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	6413      	str	r3, [r2, #64]	; 0x40
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_TIM_Base_MspInit+0xd8>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	bf00      	nop
 800115a:	3730      	adds	r7, #48	; 0x30
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40010000 	.word	0x40010000
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000
 800116c:	40000400 	.word	0x40000400

08001170 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a24      	ldr	r2, [pc, #144]	; (8001220 <HAL_TIM_MspPostInit+0xb0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d11f      	bne.n	80011d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <HAL_TIM_MspPostInit+0xb4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a22      	ldr	r2, [pc, #136]	; (8001224 <HAL_TIM_MspPostInit+0xb4>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_TIM_MspPostInit+0xb4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HC_SR04p_TRIG_Pin;
 80011ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HC_SR04p_TRIG_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4817      	ldr	r0, [pc, #92]	; (8001228 <HAL_TIM_MspPostInit+0xb8>)
 80011cc:	f000 fb02 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011d0:	e022      	b.n	8001218 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a15      	ldr	r2, [pc, #84]	; (800122c <HAL_TIM_MspPostInit+0xbc>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d11d      	bne.n	8001218 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_TIM_MspPostInit+0xb4>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <HAL_TIM_MspPostInit+0xb4>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6313      	str	r3, [r2, #48]	; 0x30
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_TIM_MspPostInit+0xb4>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightMotor_PWM_Pin|LeftMotor_PWM_Pin;
 80011f8:	23c0      	movs	r3, #192	; 0xc0
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001208:	2302      	movs	r3, #2
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <HAL_TIM_MspPostInit+0xb8>)
 8001214:	f000 fade 	bl	80017d4 <HAL_GPIO_Init>
}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	; 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40010000 	.word	0x40010000
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000
 800122c:	40000400 	.word	0x40000400

08001230 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <MX_USART1_UART_Init+0x50>)
 8001238:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_USART1_UART_Init+0x4c>)
 800123c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001240:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_USART1_UART_Init+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001268:	f002 fd26 	bl	8003cb8 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001272:	f7ff fcb5 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200001e8 	.word	0x200001e8
 8001280:	40011000 	.word	0x40011000

08001284 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a28      	ldr	r2, [pc, #160]	; (8001344 <HAL_UART_MspInit+0xc0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d14a      	bne.n	800133c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a26      	ldr	r2, [pc, #152]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012b0:	f043 0310 	orr.w	r3, r3, #16
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a18      	ldr	r2, [pc, #96]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = HC05_TX_Pin;
 80012fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800130c:	2307      	movs	r3, #7
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HC05_TX_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <HAL_UART_MspInit+0xc8>)
 8001318:	f000 fa5c 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HC05_RX_Pin;
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800132c:	2307      	movs	r3, #7
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HC05_RX_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	; (8001350 <HAL_UART_MspInit+0xcc>)
 8001338:	f000 fa4c 	bl	80017d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40011000 	.word	0x40011000
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400

08001354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800138c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800135a:	490e      	ldr	r1, [pc, #56]	; (8001394 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001370:	4c0b      	ldr	r4, [pc, #44]	; (80013a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800137e:	f7ff fcd1 	bl	8000d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001382:	f003 fd3f 	bl	8004e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001386:	f7ff fac1 	bl	800090c <main>
  bx  lr    
 800138a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800138c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001398:	08005784 	.word	0x08005784
  ldr r2, =_sbss
 800139c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80013a0:	20000378 	.word	0x20000378

080013a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC_IRQHandler>
	...

080013a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <HAL_Init+0x40>)
 80013b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_Init+0x40>)
 80013be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_Init+0x40>)
 80013ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f000 f92b 	bl	800162c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f000 f808 	bl	80013ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013dc:	f7ff fc06 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023c00 	.word	0x40023c00

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x54>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x58>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001402:	fbb3 f3f1 	udiv	r3, r3, r1
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f943 	bl	8001696 <HAL_SYSTICK_Config>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e00e      	b.n	8001438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d80a      	bhi.n	8001436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 f90b 	bl	8001642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_InitTick+0x5c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000008 	.word	0x20000008
 8001444:	20000010 	.word	0x20000010
 8001448:	2000000c 	.word	0x2000000c

0800144c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x20>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_IncTick+0x24>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_IncTick+0x24>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000010 	.word	0x20000010
 8001470:	2000022c 	.word	0x2000022c

08001474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_GetTick+0x14>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	2000022c 	.word	0x2000022c

0800148c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db0b      	blt.n	800151a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	4907      	ldr	r1, [pc, #28]	; (8001528 <__NVIC_EnableIRQ+0x38>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2001      	movs	r0, #1
 8001512:	fa00 f202 	lsl.w	r2, r0, r2
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000e100 	.word	0xe000e100

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	; (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <__NVIC_SetPriority+0x50>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f8:	d301      	bcc.n	80015fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00f      	b.n	800161e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <SysTick_Config+0x40>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001606:	210f      	movs	r1, #15
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f7ff ff8e 	bl	800152c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <SysTick_Config+0x40>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <SysTick_Config+0x40>)
 8001618:	2207      	movs	r2, #7
 800161a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	e000e010 	.word	0xe000e010

0800162c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff29 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001654:	f7ff ff3e 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 8001658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7ff ff8e 	bl	8001580 <NVIC_EncodePriority>
 8001664:	4602      	mov	r2, r0
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff5d 	bl	800152c <__NVIC_SetPriority>
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff31 	bl	80014f0 <__NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffa2 	bl	80015e8 <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016bc:	f7ff feda 	bl	8001474 <HAL_GetTick>
 80016c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d008      	beq.n	80016e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e052      	b.n	8001786 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0216 	bic.w	r2, r2, #22
 80016ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d103      	bne.n	8001710 <HAL_DMA_Abort+0x62>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170c:	2b00      	cmp	r3, #0
 800170e:	d007      	beq.n	8001720 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0208 	bic.w	r2, r2, #8
 800171e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001730:	e013      	b.n	800175a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001732:	f7ff fe9f 	bl	8001474 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b05      	cmp	r3, #5
 800173e:	d90c      	bls.n	800175a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2220      	movs	r2, #32
 8001744:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2203      	movs	r2, #3
 800174a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e015      	b.n	8001786 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1e4      	bne.n	8001732 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176c:	223f      	movs	r2, #63	; 0x3f
 800176e:	409a      	lsls	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d004      	beq.n	80017ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e00c      	b.n	80017c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2205      	movs	r2, #5
 80017b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0201 	bic.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e159      	b.n	8001aa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8148 	bne.w	8001a9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d005      	beq.n	8001826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	2b02      	cmp	r3, #2
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80a2 	beq.w	8001a9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001976:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d019      	beq.n	80019d6 <HAL_GPIO_Init+0x202>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a48      	ldr	r2, [pc, #288]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0x1fe>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a47      	ldr	r2, [pc, #284]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00d      	beq.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0x1f6>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a45      	ldr	r2, [pc, #276]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_GPIO_Init+0x1f2>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e008      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019c6:	2307      	movs	r3, #7
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019ca:	2303      	movs	r3, #3
 80019cc:	e004      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019d6:	2300      	movs	r3, #0
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f002 0203 	and.w	r2, r2, #3
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4093      	lsls	r3, r2
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e8:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a44:	4a24      	ldr	r2, [pc, #144]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	f67f aea2 	bls.w	80017f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e001      	b.n	8001afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b28:	e003      	b.n	8001b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	041a      	lsls	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	619a      	str	r2, [r3, #24]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	460b      	mov	r3, r1
 8001b48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b50:	887a      	ldrh	r2, [r7, #2]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4013      	ands	r3, r2
 8001b56:	041a      	lsls	r2, r3, #16
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	400b      	ands	r3, r1
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	619a      	str	r2, [r3, #24]
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e267      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d075      	beq.n	8001c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b92:	4b88      	ldr	r3, [pc, #544]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d00c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9e:	4b85      	ldr	r3, [pc, #532]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d112      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001baa:	4b82      	ldr	r3, [pc, #520]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	4b7e      	ldr	r3, [pc, #504]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d05b      	beq.n	8001c7c <HAL_RCC_OscConfig+0x108>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d157      	bne.n	8001c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e242      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCC_OscConfig+0x74>
 8001bda:	4b76      	ldr	r3, [pc, #472]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a75      	ldr	r2, [pc, #468]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e01d      	b.n	8001c24 <HAL_RCC_OscConfig+0xb0>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x98>
 8001bf2:	4b70      	ldr	r3, [pc, #448]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6f      	ldr	r2, [pc, #444]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b6d      	ldr	r3, [pc, #436]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a6c      	ldr	r2, [pc, #432]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_OscConfig+0xb0>
 8001c0c:	4b69      	ldr	r3, [pc, #420]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a68      	ldr	r2, [pc, #416]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b66      	ldr	r3, [pc, #408]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a65      	ldr	r2, [pc, #404]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d013      	beq.n	8001c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fc22 	bl	8001474 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff fc1e 	bl	8001474 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e207      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	4b5b      	ldr	r3, [pc, #364]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0xc0>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fc0e 	bl	8001474 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fc0a 	bl	8001474 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e1f3      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	4b51      	ldr	r3, [pc, #324]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0xe8>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d063      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c8a:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00b      	beq.n	8001cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d11c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca2:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d116      	bne.n	8001cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	4b41      	ldr	r3, [pc, #260]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x152>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e1c7      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4937      	ldr	r1, [pc, #220]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cda:	e03a      	b.n	8001d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d020      	beq.n	8001d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce4:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <HAL_RCC_OscConfig+0x244>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7ff fbc3 	bl	8001474 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7ff fbbf 	bl	8001474 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e1a8      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d10:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4925      	ldr	r1, [pc, #148]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
 8001d24:	e015      	b.n	8001d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_RCC_OscConfig+0x244>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fba2 	bl	8001474 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d34:	f7ff fb9e 	bl	8001474 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e187      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d036      	beq.n	8001dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d016      	beq.n	8001d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_RCC_OscConfig+0x248>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6c:	f7ff fb82 	bl	8001474 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d74:	f7ff fb7e 	bl	8001474 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e167      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x200>
 8001d92:	e01b      	b.n	8001dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_OscConfig+0x248>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fb6b 	bl	8001474 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da0:	e00e      	b.n	8001dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da2:	f7ff fb67 	bl	8001474 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d907      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e150      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
 8001db4:	40023800 	.word	0x40023800
 8001db8:	42470000 	.word	0x42470000
 8001dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc0:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1ea      	bne.n	8001da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 8097 	beq.w	8001f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dde:	4b81      	ldr	r3, [pc, #516]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10f      	bne.n	8001e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b7d      	ldr	r3, [pc, #500]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a7c      	ldr	r2, [pc, #496]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b7a      	ldr	r3, [pc, #488]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e06:	2301      	movs	r3, #1
 8001e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0a:	4b77      	ldr	r3, [pc, #476]	; (8001fe8 <HAL_RCC_OscConfig+0x474>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d118      	bne.n	8001e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e16:	4b74      	ldr	r3, [pc, #464]	; (8001fe8 <HAL_RCC_OscConfig+0x474>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a73      	ldr	r2, [pc, #460]	; (8001fe8 <HAL_RCC_OscConfig+0x474>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e22:	f7ff fb27 	bl	8001474 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2a:	f7ff fb23 	bl	8001474 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e10c      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	4b6a      	ldr	r3, [pc, #424]	; (8001fe8 <HAL_RCC_OscConfig+0x474>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d106      	bne.n	8001e5e <HAL_RCC_OscConfig+0x2ea>
 8001e50:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	4a63      	ldr	r2, [pc, #396]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5c:	e01c      	b.n	8001e98 <HAL_RCC_OscConfig+0x324>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d10c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x30c>
 8001e66:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	4a5e      	ldr	r2, [pc, #376]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6713      	str	r3, [r2, #112]	; 0x70
 8001e72:	4b5c      	ldr	r3, [pc, #368]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	4a5b      	ldr	r2, [pc, #364]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7e:	e00b      	b.n	8001e98 <HAL_RCC_OscConfig+0x324>
 8001e80:	4b58      	ldr	r3, [pc, #352]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e84:	4a57      	ldr	r2, [pc, #348]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e86:	f023 0301 	bic.w	r3, r3, #1
 8001e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8c:	4b55      	ldr	r3, [pc, #340]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	4a54      	ldr	r2, [pc, #336]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e92:	f023 0304 	bic.w	r3, r3, #4
 8001e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d015      	beq.n	8001ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea0:	f7ff fae8 	bl	8001474 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea6:	e00a      	b.n	8001ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea8:	f7ff fae4 	bl	8001474 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e0cb      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebe:	4b49      	ldr	r3, [pc, #292]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0ee      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x334>
 8001eca:	e014      	b.n	8001ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fad2 	bl	8001474 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed4:	f7ff face 	bl	8001474 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e0b5      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eea:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1ee      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d105      	bne.n	8001f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efc:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	4a38      	ldr	r2, [pc, #224]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80a1 	beq.w	8002054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f12:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d05c      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d141      	bne.n	8001faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_RCC_OscConfig+0x478>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff faa2 	bl	8001474 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff fa9e 	bl	8001474 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e087      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	019b      	lsls	r3, r3, #6
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	041b      	lsls	r3, r3, #16
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	061b      	lsls	r3, r3, #24
 8001f76:	491b      	ldr	r1, [pc, #108]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x478>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff fa77 	bl	8001474 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7ff fa73 	bl	8001474 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e05c      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x416>
 8001fa8:	e054      	b.n	8002054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_RCC_OscConfig+0x478>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fa60 	bl	8001474 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff fa5c 	bl	8001474 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e045      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x444>
 8001fd6:	e03d      	b.n	8002054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e038      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x4ec>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d028      	beq.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d121      	bne.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d11a      	bne.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002020:	4013      	ands	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002028:	4293      	cmp	r3, r2
 800202a:	d111      	bne.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	3b01      	subs	r3, #1
 800203a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d107      	bne.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0cc      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002078:	4b68      	ldr	r3, [pc, #416]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d90c      	bls.n	80020a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b65      	ldr	r3, [pc, #404]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b63      	ldr	r3, [pc, #396]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0b8      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b8:	4b59      	ldr	r3, [pc, #356]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a58      	ldr	r2, [pc, #352]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a52      	ldr	r2, [pc, #328]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020dc:	4b50      	ldr	r3, [pc, #320]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	494d      	ldr	r1, [pc, #308]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d044      	beq.n	8002184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d119      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d003      	beq.n	8002122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211e:	2b03      	cmp	r3, #3
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002122:	4b3f      	ldr	r3, [pc, #252]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e06f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e067      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f023 0203 	bic.w	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4934      	ldr	r1, [pc, #208]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	4313      	orrs	r3, r2
 8002152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002154:	f7ff f98e 	bl	8001474 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	e00a      	b.n	8002172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215c:	f7ff f98a 	bl	8001474 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e04f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 020c 	and.w	r2, r3, #12
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	429a      	cmp	r2, r3
 8002182:	d1eb      	bne.n	800215c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002184:	4b25      	ldr	r3, [pc, #148]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d20c      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b22      	ldr	r3, [pc, #136]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e032      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4916      	ldr	r1, [pc, #88]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	490e      	ldr	r1, [pc, #56]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ea:	f000 f821 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	490a      	ldr	r1, [pc, #40]	; (8002224 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	5ccb      	ldrb	r3, [r1, r3]
 80021fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f8ee 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00
 8002220:	40023800 	.word	0x40023800
 8002224:	08005728 	.word	0x08005728
 8002228:	20000008 	.word	0x20000008
 800222c:	2000000c 	.word	0x2000000c

08002230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002234:	b094      	sub	sp, #80	; 0x50
 8002236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	647b      	str	r3, [r7, #68]	; 0x44
 800223c:	2300      	movs	r3, #0
 800223e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002240:	2300      	movs	r3, #0
 8002242:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002248:	4b79      	ldr	r3, [pc, #484]	; (8002430 <HAL_RCC_GetSysClockFreq+0x200>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d00d      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x40>
 8002254:	2b08      	cmp	r3, #8
 8002256:	f200 80e1 	bhi.w	800241c <HAL_RCC_GetSysClockFreq+0x1ec>
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x34>
 800225e:	2b04      	cmp	r3, #4
 8002260:	d003      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x3a>
 8002262:	e0db      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002264:	4b73      	ldr	r3, [pc, #460]	; (8002434 <HAL_RCC_GetSysClockFreq+0x204>)
 8002266:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002268:	e0db      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800226a:	4b73      	ldr	r3, [pc, #460]	; (8002438 <HAL_RCC_GetSysClockFreq+0x208>)
 800226c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800226e:	e0d8      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002270:	4b6f      	ldr	r3, [pc, #444]	; (8002430 <HAL_RCC_GetSysClockFreq+0x200>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002278:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800227a:	4b6d      	ldr	r3, [pc, #436]	; (8002430 <HAL_RCC_GetSysClockFreq+0x200>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d063      	beq.n	800234e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002286:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <HAL_RCC_GetSysClockFreq+0x200>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	099b      	lsrs	r3, r3, #6
 800228c:	2200      	movs	r2, #0
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002290:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002298:	633b      	str	r3, [r7, #48]	; 0x30
 800229a:	2300      	movs	r3, #0
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
 800229e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022a2:	4622      	mov	r2, r4
 80022a4:	462b      	mov	r3, r5
 80022a6:	f04f 0000 	mov.w	r0, #0
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	0159      	lsls	r1, r3, #5
 80022b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b4:	0150      	lsls	r0, r2, #5
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4621      	mov	r1, r4
 80022bc:	1a51      	subs	r1, r2, r1
 80022be:	6139      	str	r1, [r7, #16]
 80022c0:	4629      	mov	r1, r5
 80022c2:	eb63 0301 	sbc.w	r3, r3, r1
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022d4:	4659      	mov	r1, fp
 80022d6:	018b      	lsls	r3, r1, #6
 80022d8:	4651      	mov	r1, sl
 80022da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022de:	4651      	mov	r1, sl
 80022e0:	018a      	lsls	r2, r1, #6
 80022e2:	4651      	mov	r1, sl
 80022e4:	ebb2 0801 	subs.w	r8, r2, r1
 80022e8:	4659      	mov	r1, fp
 80022ea:	eb63 0901 	sbc.w	r9, r3, r1
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002302:	4690      	mov	r8, r2
 8002304:	4699      	mov	r9, r3
 8002306:	4623      	mov	r3, r4
 8002308:	eb18 0303 	adds.w	r3, r8, r3
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	462b      	mov	r3, r5
 8002310:	eb49 0303 	adc.w	r3, r9, r3
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002322:	4629      	mov	r1, r5
 8002324:	024b      	lsls	r3, r1, #9
 8002326:	4621      	mov	r1, r4
 8002328:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800232c:	4621      	mov	r1, r4
 800232e:	024a      	lsls	r2, r1, #9
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002336:	2200      	movs	r2, #0
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
 800233a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800233c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002340:	f7fd ff9e 	bl	8000280 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4613      	mov	r3, r2
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800234c:	e058      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234e:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_RCC_GetSysClockFreq+0x200>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	099b      	lsrs	r3, r3, #6
 8002354:	2200      	movs	r2, #0
 8002356:	4618      	mov	r0, r3
 8002358:	4611      	mov	r1, r2
 800235a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800235e:	623b      	str	r3, [r7, #32]
 8002360:	2300      	movs	r3, #0
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
 8002364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002368:	4642      	mov	r2, r8
 800236a:	464b      	mov	r3, r9
 800236c:	f04f 0000 	mov.w	r0, #0
 8002370:	f04f 0100 	mov.w	r1, #0
 8002374:	0159      	lsls	r1, r3, #5
 8002376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800237a:	0150      	lsls	r0, r2, #5
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4641      	mov	r1, r8
 8002382:	ebb2 0a01 	subs.w	sl, r2, r1
 8002386:	4649      	mov	r1, r9
 8002388:	eb63 0b01 	sbc.w	fp, r3, r1
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800239c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023a0:	ebb2 040a 	subs.w	r4, r2, sl
 80023a4:	eb63 050b 	sbc.w	r5, r3, fp
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	00eb      	lsls	r3, r5, #3
 80023b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023b6:	00e2      	lsls	r2, r4, #3
 80023b8:	4614      	mov	r4, r2
 80023ba:	461d      	mov	r5, r3
 80023bc:	4643      	mov	r3, r8
 80023be:	18e3      	adds	r3, r4, r3
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	464b      	mov	r3, r9
 80023c4:	eb45 0303 	adc.w	r3, r5, r3
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023d6:	4629      	mov	r1, r5
 80023d8:	028b      	lsls	r3, r1, #10
 80023da:	4621      	mov	r1, r4
 80023dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023e0:	4621      	mov	r1, r4
 80023e2:	028a      	lsls	r2, r1, #10
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ea:	2200      	movs	r2, #0
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	61fa      	str	r2, [r7, #28]
 80023f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023f4:	f7fd ff44 	bl	8000280 <__aeabi_uldivmod>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4613      	mov	r3, r2
 80023fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_GetSysClockFreq+0x200>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	3301      	adds	r3, #1
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800241a:	e002      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCC_GetSysClockFreq+0x204>)
 800241e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002424:	4618      	mov	r0, r3
 8002426:	3750      	adds	r7, #80	; 0x50
 8002428:	46bd      	mov	sp, r7
 800242a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	00f42400 	.word	0x00f42400
 8002438:	007a1200 	.word	0x007a1200

0800243c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <HAL_RCC_GetHCLKFreq+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000008 	.word	0x20000008

08002454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002458:	f7ff fff0 	bl	800243c <HAL_RCC_GetHCLKFreq>
 800245c:	4602      	mov	r2, r0
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	0a9b      	lsrs	r3, r3, #10
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	4903      	ldr	r1, [pc, #12]	; (8002478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800246a:	5ccb      	ldrb	r3, [r1, r3]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	08005738 	.word	0x08005738

0800247c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002480:	f7ff ffdc 	bl	800243c <HAL_RCC_GetHCLKFreq>
 8002484:	4602      	mov	r2, r0
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	0b5b      	lsrs	r3, r3, #13
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	4903      	ldr	r1, [pc, #12]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002492:	5ccb      	ldrb	r3, [r1, r3]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40023800 	.word	0x40023800
 80024a0:	08005738 	.word	0x08005738

080024a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e041      	b.n	800253a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fdde 	bl	800108c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3304      	adds	r3, #4
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f000 ff2a 	bl	800333c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d001      	beq.n	800255c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e03c      	b.n	80025d6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <HAL_TIM_Base_Start+0xa0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d018      	beq.n	80025a0 <HAL_TIM_Base_Start+0x5c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002576:	d013      	beq.n	80025a0 <HAL_TIM_Base_Start+0x5c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <HAL_TIM_Base_Start+0xa4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00e      	beq.n	80025a0 <HAL_TIM_Base_Start+0x5c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a19      	ldr	r2, [pc, #100]	; (80025ec <HAL_TIM_Base_Start+0xa8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d009      	beq.n	80025a0 <HAL_TIM_Base_Start+0x5c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a17      	ldr	r2, [pc, #92]	; (80025f0 <HAL_TIM_Base_Start+0xac>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d004      	beq.n	80025a0 <HAL_TIM_Base_Start+0x5c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <HAL_TIM_Base_Start+0xb0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d111      	bne.n	80025c4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d010      	beq.n	80025d4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0201 	orr.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c2:	e007      	b.n	80025d4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40010000 	.word	0x40010000
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40000800 	.word	0x40000800
 80025f0:	40000c00 	.word	0x40000c00
 80025f4:	40014000 	.word	0x40014000

080025f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e041      	b.n	800268e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f839 	bl	8002696 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3304      	adds	r3, #4
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f000 fe80 	bl	800333c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <HAL_TIM_PWM_Start+0x24>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	bf14      	ite	ne
 80026c8:	2301      	movne	r3, #1
 80026ca:	2300      	moveq	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e022      	b.n	8002716 <HAL_TIM_PWM_Start+0x6a>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d109      	bne.n	80026ea <HAL_TIM_PWM_Start+0x3e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	bf14      	ite	ne
 80026e2:	2301      	movne	r3, #1
 80026e4:	2300      	moveq	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	e015      	b.n	8002716 <HAL_TIM_PWM_Start+0x6a>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d109      	bne.n	8002704 <HAL_TIM_PWM_Start+0x58>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	bf14      	ite	ne
 80026fc:	2301      	movne	r3, #1
 80026fe:	2300      	moveq	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	e008      	b.n	8002716 <HAL_TIM_PWM_Start+0x6a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b01      	cmp	r3, #1
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e068      	b.n	80027f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d104      	bne.n	800272e <HAL_TIM_PWM_Start+0x82>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800272c:	e013      	b.n	8002756 <HAL_TIM_PWM_Start+0xaa>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d104      	bne.n	800273e <HAL_TIM_PWM_Start+0x92>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800273c:	e00b      	b.n	8002756 <HAL_TIM_PWM_Start+0xaa>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b08      	cmp	r3, #8
 8002742:	d104      	bne.n	800274e <HAL_TIM_PWM_Start+0xa2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800274c:	e003      	b.n	8002756 <HAL_TIM_PWM_Start+0xaa>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2201      	movs	r2, #1
 800275c:	6839      	ldr	r1, [r7, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f001 f9b0 	bl	8003ac4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a23      	ldr	r2, [pc, #140]	; (80027f8 <HAL_TIM_PWM_Start+0x14c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d107      	bne.n	800277e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800277c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1d      	ldr	r2, [pc, #116]	; (80027f8 <HAL_TIM_PWM_Start+0x14c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d018      	beq.n	80027ba <HAL_TIM_PWM_Start+0x10e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002790:	d013      	beq.n	80027ba <HAL_TIM_PWM_Start+0x10e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a19      	ldr	r2, [pc, #100]	; (80027fc <HAL_TIM_PWM_Start+0x150>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00e      	beq.n	80027ba <HAL_TIM_PWM_Start+0x10e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a17      	ldr	r2, [pc, #92]	; (8002800 <HAL_TIM_PWM_Start+0x154>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d009      	beq.n	80027ba <HAL_TIM_PWM_Start+0x10e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a16      	ldr	r2, [pc, #88]	; (8002804 <HAL_TIM_PWM_Start+0x158>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_TIM_PWM_Start+0x10e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a14      	ldr	r2, [pc, #80]	; (8002808 <HAL_TIM_PWM_Start+0x15c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d111      	bne.n	80027de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b06      	cmp	r3, #6
 80027ca:	d010      	beq.n	80027ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027dc:	e007      	b.n	80027ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40010000 	.word	0x40010000
 80027fc:	40000400 	.word	0x40000400
 8002800:	40000800 	.word	0x40000800
 8002804:	40000c00 	.word	0x40000c00
 8002808:	40014000 	.word	0x40014000

0800280c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e041      	b.n	80028a2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f839 	bl	80028aa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f000 fd76 	bl	800333c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d104      	bne.n	80028da <HAL_TIM_IC_Start+0x1a>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	e013      	b.n	8002902 <HAL_TIM_IC_Start+0x42>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d104      	bne.n	80028ea <HAL_TIM_IC_Start+0x2a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	e00b      	b.n	8002902 <HAL_TIM_IC_Start+0x42>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d104      	bne.n	80028fa <HAL_TIM_IC_Start+0x3a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	e003      	b.n	8002902 <HAL_TIM_IC_Start+0x42>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002900:	b2db      	uxtb	r3, r3
 8002902:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d104      	bne.n	8002914 <HAL_TIM_IC_Start+0x54>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002910:	b2db      	uxtb	r3, r3
 8002912:	e013      	b.n	800293c <HAL_TIM_IC_Start+0x7c>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b04      	cmp	r3, #4
 8002918:	d104      	bne.n	8002924 <HAL_TIM_IC_Start+0x64>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e00b      	b.n	800293c <HAL_TIM_IC_Start+0x7c>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b08      	cmp	r3, #8
 8002928:	d104      	bne.n	8002934 <HAL_TIM_IC_Start+0x74>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e003      	b.n	800293c <HAL_TIM_IC_Start+0x7c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800293a:	b2db      	uxtb	r3, r3
 800293c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d102      	bne.n	800294a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002944:	7bbb      	ldrb	r3, [r7, #14]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d001      	beq.n	800294e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e077      	b.n	8002a3e <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d104      	bne.n	800295e <HAL_TIM_IC_Start+0x9e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800295c:	e013      	b.n	8002986 <HAL_TIM_IC_Start+0xc6>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b04      	cmp	r3, #4
 8002962:	d104      	bne.n	800296e <HAL_TIM_IC_Start+0xae>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800296c:	e00b      	b.n	8002986 <HAL_TIM_IC_Start+0xc6>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d104      	bne.n	800297e <HAL_TIM_IC_Start+0xbe>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800297c:	e003      	b.n	8002986 <HAL_TIM_IC_Start+0xc6>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2202      	movs	r2, #2
 8002982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <HAL_TIM_IC_Start+0xd6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002994:	e013      	b.n	80029be <HAL_TIM_IC_Start+0xfe>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d104      	bne.n	80029a6 <HAL_TIM_IC_Start+0xe6>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a4:	e00b      	b.n	80029be <HAL_TIM_IC_Start+0xfe>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d104      	bne.n	80029b6 <HAL_TIM_IC_Start+0xf6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b4:	e003      	b.n	80029be <HAL_TIM_IC_Start+0xfe>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2202      	movs	r2, #2
 80029ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2201      	movs	r2, #1
 80029c4:	6839      	ldr	r1, [r7, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 f87c 	bl	8003ac4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <HAL_TIM_IC_Start+0x188>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d018      	beq.n	8002a08 <HAL_TIM_IC_Start+0x148>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029de:	d013      	beq.n	8002a08 <HAL_TIM_IC_Start+0x148>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_TIM_IC_Start+0x18c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00e      	beq.n	8002a08 <HAL_TIM_IC_Start+0x148>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_TIM_IC_Start+0x190>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d009      	beq.n	8002a08 <HAL_TIM_IC_Start+0x148>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a16      	ldr	r2, [pc, #88]	; (8002a54 <HAL_TIM_IC_Start+0x194>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d004      	beq.n	8002a08 <HAL_TIM_IC_Start+0x148>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <HAL_TIM_IC_Start+0x198>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d111      	bne.n	8002a2c <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b06      	cmp	r3, #6
 8002a18:	d010      	beq.n	8002a3c <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0201 	orr.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2a:	e007      	b.n	8002a3c <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800
 8002a54:	40000c00 	.word	0x40000c00
 8002a58:	40014000 	.word	0x40014000

08002a5c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d104      	bne.n	8002a7a <HAL_TIM_IC_Start_IT+0x1e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	e013      	b.n	8002aa2 <HAL_TIM_IC_Start_IT+0x46>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d104      	bne.n	8002a8a <HAL_TIM_IC_Start_IT+0x2e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	e00b      	b.n	8002aa2 <HAL_TIM_IC_Start_IT+0x46>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d104      	bne.n	8002a9a <HAL_TIM_IC_Start_IT+0x3e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	e003      	b.n	8002aa2 <HAL_TIM_IC_Start_IT+0x46>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <HAL_TIM_IC_Start_IT+0x58>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e013      	b.n	8002adc <HAL_TIM_IC_Start_IT+0x80>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d104      	bne.n	8002ac4 <HAL_TIM_IC_Start_IT+0x68>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e00b      	b.n	8002adc <HAL_TIM_IC_Start_IT+0x80>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d104      	bne.n	8002ad4 <HAL_TIM_IC_Start_IT+0x78>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e003      	b.n	8002adc <HAL_TIM_IC_Start_IT+0x80>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ade:	7bbb      	ldrb	r3, [r7, #14]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d102      	bne.n	8002aea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ae4:	7b7b      	ldrb	r3, [r7, #13]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d001      	beq.n	8002aee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e0c2      	b.n	8002c74 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d104      	bne.n	8002afe <HAL_TIM_IC_Start_IT+0xa2>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002afc:	e013      	b.n	8002b26 <HAL_TIM_IC_Start_IT+0xca>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d104      	bne.n	8002b0e <HAL_TIM_IC_Start_IT+0xb2>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b0c:	e00b      	b.n	8002b26 <HAL_TIM_IC_Start_IT+0xca>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d104      	bne.n	8002b1e <HAL_TIM_IC_Start_IT+0xc2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b1c:	e003      	b.n	8002b26 <HAL_TIM_IC_Start_IT+0xca>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d104      	bne.n	8002b36 <HAL_TIM_IC_Start_IT+0xda>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b34:	e013      	b.n	8002b5e <HAL_TIM_IC_Start_IT+0x102>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d104      	bne.n	8002b46 <HAL_TIM_IC_Start_IT+0xea>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b44:	e00b      	b.n	8002b5e <HAL_TIM_IC_Start_IT+0x102>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d104      	bne.n	8002b56 <HAL_TIM_IC_Start_IT+0xfa>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b54:	e003      	b.n	8002b5e <HAL_TIM_IC_Start_IT+0x102>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b0c      	cmp	r3, #12
 8002b62:	d841      	bhi.n	8002be8 <HAL_TIM_IC_Start_IT+0x18c>
 8002b64:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <HAL_TIM_IC_Start_IT+0x110>)
 8002b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6a:	bf00      	nop
 8002b6c:	08002ba1 	.word	0x08002ba1
 8002b70:	08002be9 	.word	0x08002be9
 8002b74:	08002be9 	.word	0x08002be9
 8002b78:	08002be9 	.word	0x08002be9
 8002b7c:	08002bb3 	.word	0x08002bb3
 8002b80:	08002be9 	.word	0x08002be9
 8002b84:	08002be9 	.word	0x08002be9
 8002b88:	08002be9 	.word	0x08002be9
 8002b8c:	08002bc5 	.word	0x08002bc5
 8002b90:	08002be9 	.word	0x08002be9
 8002b94:	08002be9 	.word	0x08002be9
 8002b98:	08002be9 	.word	0x08002be9
 8002b9c:	08002bd7 	.word	0x08002bd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0202 	orr.w	r2, r2, #2
 8002bae:	60da      	str	r2, [r3, #12]
      break;
 8002bb0:	e01d      	b.n	8002bee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0204 	orr.w	r2, r2, #4
 8002bc0:	60da      	str	r2, [r3, #12]
      break;
 8002bc2:	e014      	b.n	8002bee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0208 	orr.w	r2, r2, #8
 8002bd2:	60da      	str	r2, [r3, #12]
      break;
 8002bd4:	e00b      	b.n	8002bee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0210 	orr.w	r2, r2, #16
 8002be4:	60da      	str	r2, [r3, #12]
      break;
 8002be6:	e002      	b.n	8002bee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      break;
 8002bec:	bf00      	nop
  }

  if (status == HAL_OK)
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d13e      	bne.n	8002c72 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	6839      	ldr	r1, [r7, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 ff61 	bl	8003ac4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <HAL_TIM_IC_Start_IT+0x220>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d018      	beq.n	8002c3e <HAL_TIM_IC_Start_IT+0x1e2>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c14:	d013      	beq.n	8002c3e <HAL_TIM_IC_Start_IT+0x1e2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <HAL_TIM_IC_Start_IT+0x224>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00e      	beq.n	8002c3e <HAL_TIM_IC_Start_IT+0x1e2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <HAL_TIM_IC_Start_IT+0x228>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d009      	beq.n	8002c3e <HAL_TIM_IC_Start_IT+0x1e2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <HAL_TIM_IC_Start_IT+0x22c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d004      	beq.n	8002c3e <HAL_TIM_IC_Start_IT+0x1e2>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <HAL_TIM_IC_Start_IT+0x230>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d111      	bne.n	8002c62 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b06      	cmp	r3, #6
 8002c4e:	d010      	beq.n	8002c72 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c60:	e007      	b.n	8002c72 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40000800 	.word	0x40000800
 8002c88:	40000c00 	.word	0x40000c00
 8002c8c:	40014000 	.word	0x40014000

08002c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d122      	bne.n	8002cec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d11b      	bne.n	8002cec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0202 	mvn.w	r2, #2
 8002cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fd ff0c 	bl	8000af0 <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fb0f 	bl	80032fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fb16 	bl	8003312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d122      	bne.n	8002d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d11b      	bne.n	8002d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0204 	mvn.w	r2, #4
 8002d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fd fee2 	bl	8000af0 <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fae5 	bl	80032fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 faec 	bl	8003312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0208 	mvn.w	r2, #8
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fd feb8 	bl	8000af0 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fabb 	bl	80032fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fac2 	bl	8003312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d122      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d11b      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0210 	mvn.w	r2, #16
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fd fe8e 	bl	8000af0 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa91 	bl	80032fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fa98 	bl	8003312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10e      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d107      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0201 	mvn.w	r2, #1
 8002e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fa6b 	bl	80032ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b80      	cmp	r3, #128	; 0x80
 8002e20:	d10e      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2c:	2b80      	cmp	r3, #128	; 0x80
 8002e2e:	d107      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 ff32 	bl	8003ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d10e      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d107      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fa5d 	bl	8003326 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d10e      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d107      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0220 	mvn.w	r2, #32
 8002e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fefc 	bl	8003c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_IC_ConfigChannel+0x1e>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e088      	b.n	8002fd0 <HAL_TIM_IC_ConfigChannel+0x130>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	6819      	ldr	r1, [r3, #0]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f000 fc3a 	bl	8003754 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 020c 	bic.w	r2, r2, #12
 8002eee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6999      	ldr	r1, [r3, #24]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	619a      	str	r2, [r3, #24]
 8002f02:	e060      	b.n	8002fc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d11c      	bne.n	8002f44 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f000 fcb2 	bl	8003882 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6999      	ldr	r1, [r3, #24]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	021a      	lsls	r2, r3, #8
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	619a      	str	r2, [r3, #24]
 8002f42:	e040      	b.n	8002fc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d11b      	bne.n	8002f82 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	6819      	ldr	r1, [r3, #0]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f000 fcff 	bl	800395c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 020c 	bic.w	r2, r2, #12
 8002f6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69d9      	ldr	r1, [r3, #28]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	61da      	str	r2, [r3, #28]
 8002f80:	e021      	b.n	8002fc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d11c      	bne.n	8002fc2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	6819      	ldr	r1, [r3, #0]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f000 fd1c 	bl	80039d4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002faa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69d9      	ldr	r1, [r3, #28]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	021a      	lsls	r2, r3, #8
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	61da      	str	r2, [r3, #28]
 8002fc0:	e001      	b.n	8002fc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e0ae      	b.n	8003154 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b0c      	cmp	r3, #12
 8003002:	f200 809f 	bhi.w	8003144 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003006:	a201      	add	r2, pc, #4	; (adr r2, 800300c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	08003041 	.word	0x08003041
 8003010:	08003145 	.word	0x08003145
 8003014:	08003145 	.word	0x08003145
 8003018:	08003145 	.word	0x08003145
 800301c:	08003081 	.word	0x08003081
 8003020:	08003145 	.word	0x08003145
 8003024:	08003145 	.word	0x08003145
 8003028:	08003145 	.word	0x08003145
 800302c:	080030c3 	.word	0x080030c3
 8003030:	08003145 	.word	0x08003145
 8003034:	08003145 	.word	0x08003145
 8003038:	08003145 	.word	0x08003145
 800303c:	08003103 	.word	0x08003103
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f9f8 	bl	800343c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0208 	orr.w	r2, r2, #8
 800305a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0204 	bic.w	r2, r2, #4
 800306a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6999      	ldr	r1, [r3, #24]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	619a      	str	r2, [r3, #24]
      break;
 800307e:	e064      	b.n	800314a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fa3e 	bl	8003508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800309a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6999      	ldr	r1, [r3, #24]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	021a      	lsls	r2, r3, #8
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	619a      	str	r2, [r3, #24]
      break;
 80030c0:	e043      	b.n	800314a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fa89 	bl	80035e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69da      	ldr	r2, [r3, #28]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0208 	orr.w	r2, r2, #8
 80030dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0204 	bic.w	r2, r2, #4
 80030ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69d9      	ldr	r1, [r3, #28]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	61da      	str	r2, [r3, #28]
      break;
 8003100:	e023      	b.n	800314a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fad3 	bl	80036b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800311c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69d9      	ldr	r1, [r3, #28]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	021a      	lsls	r2, r3, #8
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	61da      	str	r2, [r3, #28]
      break;
 8003142:	e002      	b.n	800314a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
      break;
 8003148:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_TIM_ConfigClockSource+0x1c>
 8003174:	2302      	movs	r3, #2
 8003176:	e0b4      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0x186>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800319e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b0:	d03e      	beq.n	8003230 <HAL_TIM_ConfigClockSource+0xd4>
 80031b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b6:	f200 8087 	bhi.w	80032c8 <HAL_TIM_ConfigClockSource+0x16c>
 80031ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031be:	f000 8086 	beq.w	80032ce <HAL_TIM_ConfigClockSource+0x172>
 80031c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c6:	d87f      	bhi.n	80032c8 <HAL_TIM_ConfigClockSource+0x16c>
 80031c8:	2b70      	cmp	r3, #112	; 0x70
 80031ca:	d01a      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0xa6>
 80031cc:	2b70      	cmp	r3, #112	; 0x70
 80031ce:	d87b      	bhi.n	80032c8 <HAL_TIM_ConfigClockSource+0x16c>
 80031d0:	2b60      	cmp	r3, #96	; 0x60
 80031d2:	d050      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x11a>
 80031d4:	2b60      	cmp	r3, #96	; 0x60
 80031d6:	d877      	bhi.n	80032c8 <HAL_TIM_ConfigClockSource+0x16c>
 80031d8:	2b50      	cmp	r3, #80	; 0x50
 80031da:	d03c      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0xfa>
 80031dc:	2b50      	cmp	r3, #80	; 0x50
 80031de:	d873      	bhi.n	80032c8 <HAL_TIM_ConfigClockSource+0x16c>
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d058      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0x13a>
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d86f      	bhi.n	80032c8 <HAL_TIM_ConfigClockSource+0x16c>
 80031e8:	2b30      	cmp	r3, #48	; 0x30
 80031ea:	d064      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0x15a>
 80031ec:	2b30      	cmp	r3, #48	; 0x30
 80031ee:	d86b      	bhi.n	80032c8 <HAL_TIM_ConfigClockSource+0x16c>
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d060      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0x15a>
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d867      	bhi.n	80032c8 <HAL_TIM_ConfigClockSource+0x16c>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d05c      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0x15a>
 80031fc:	2b10      	cmp	r3, #16
 80031fe:	d05a      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003200:	e062      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6899      	ldr	r1, [r3, #8]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f000 fc37 	bl	8003a84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003224:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	609a      	str	r2, [r3, #8]
      break;
 800322e:	e04f      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6899      	ldr	r1, [r3, #8]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f000 fc20 	bl	8003a84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003252:	609a      	str	r2, [r3, #8]
      break;
 8003254:	e03c      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6859      	ldr	r1, [r3, #4]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	461a      	mov	r2, r3
 8003264:	f000 fade 	bl	8003824 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2150      	movs	r1, #80	; 0x50
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fbed 	bl	8003a4e <TIM_ITRx_SetConfig>
      break;
 8003274:	e02c      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	461a      	mov	r2, r3
 8003284:	f000 fb3a 	bl	80038fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2160      	movs	r1, #96	; 0x60
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fbdd 	bl	8003a4e <TIM_ITRx_SetConfig>
      break;
 8003294:	e01c      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6859      	ldr	r1, [r3, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	461a      	mov	r2, r3
 80032a4:	f000 fabe 	bl	8003824 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2140      	movs	r1, #64	; 0x40
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fbcd 	bl	8003a4e <TIM_ITRx_SetConfig>
      break;
 80032b4:	e00c      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4619      	mov	r1, r3
 80032c0:	4610      	mov	r0, r2
 80032c2:	f000 fbc4 	bl	8003a4e <TIM_ITRx_SetConfig>
      break;
 80032c6:	e003      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
      break;
 80032cc:	e000      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a34      	ldr	r2, [pc, #208]	; (8003420 <TIM_Base_SetConfig+0xe4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00f      	beq.n	8003374 <TIM_Base_SetConfig+0x38>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335a:	d00b      	beq.n	8003374 <TIM_Base_SetConfig+0x38>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a31      	ldr	r2, [pc, #196]	; (8003424 <TIM_Base_SetConfig+0xe8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d007      	beq.n	8003374 <TIM_Base_SetConfig+0x38>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a30      	ldr	r2, [pc, #192]	; (8003428 <TIM_Base_SetConfig+0xec>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d003      	beq.n	8003374 <TIM_Base_SetConfig+0x38>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a2f      	ldr	r2, [pc, #188]	; (800342c <TIM_Base_SetConfig+0xf0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d108      	bne.n	8003386 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a25      	ldr	r2, [pc, #148]	; (8003420 <TIM_Base_SetConfig+0xe4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d01b      	beq.n	80033c6 <TIM_Base_SetConfig+0x8a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003394:	d017      	beq.n	80033c6 <TIM_Base_SetConfig+0x8a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a22      	ldr	r2, [pc, #136]	; (8003424 <TIM_Base_SetConfig+0xe8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <TIM_Base_SetConfig+0x8a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a21      	ldr	r2, [pc, #132]	; (8003428 <TIM_Base_SetConfig+0xec>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00f      	beq.n	80033c6 <TIM_Base_SetConfig+0x8a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a20      	ldr	r2, [pc, #128]	; (800342c <TIM_Base_SetConfig+0xf0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00b      	beq.n	80033c6 <TIM_Base_SetConfig+0x8a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a1f      	ldr	r2, [pc, #124]	; (8003430 <TIM_Base_SetConfig+0xf4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d007      	beq.n	80033c6 <TIM_Base_SetConfig+0x8a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1e      	ldr	r2, [pc, #120]	; (8003434 <TIM_Base_SetConfig+0xf8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d003      	beq.n	80033c6 <TIM_Base_SetConfig+0x8a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <TIM_Base_SetConfig+0xfc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d108      	bne.n	80033d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a08      	ldr	r2, [pc, #32]	; (8003420 <TIM_Base_SetConfig+0xe4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d103      	bne.n	800340c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	615a      	str	r2, [r3, #20]
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40010000 	.word	0x40010000
 8003424:	40000400 	.word	0x40000400
 8003428:	40000800 	.word	0x40000800
 800342c:	40000c00 	.word	0x40000c00
 8003430:	40014000 	.word	0x40014000
 8003434:	40014400 	.word	0x40014400
 8003438:	40014800 	.word	0x40014800

0800343c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f023 0201 	bic.w	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0303 	bic.w	r3, r3, #3
 8003472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f023 0302 	bic.w	r3, r3, #2
 8003484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a1c      	ldr	r2, [pc, #112]	; (8003504 <TIM_OC1_SetConfig+0xc8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d10c      	bne.n	80034b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 0308 	bic.w	r3, r3, #8
 800349e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f023 0304 	bic.w	r3, r3, #4
 80034b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a13      	ldr	r2, [pc, #76]	; (8003504 <TIM_OC1_SetConfig+0xc8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d111      	bne.n	80034de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	621a      	str	r2, [r3, #32]
}
 80034f8:	bf00      	nop
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	40010000 	.word	0x40010000

08003508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f023 0210 	bic.w	r2, r3, #16
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f023 0320 	bic.w	r3, r3, #32
 8003552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <TIM_OC2_SetConfig+0xd4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d10d      	bne.n	8003584 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800356e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a15      	ldr	r2, [pc, #84]	; (80035dc <TIM_OC2_SetConfig+0xd4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d113      	bne.n	80035b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800359a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40010000 	.word	0x40010000

080035e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <TIM_OC3_SetConfig+0xd0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10d      	bne.n	800365a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a14      	ldr	r2, [pc, #80]	; (80036b0 <TIM_OC3_SetConfig+0xd0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d113      	bne.n	800368a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	621a      	str	r2, [r3, #32]
}
 80036a4:	bf00      	nop
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	40010000 	.word	0x40010000

080036b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	031b      	lsls	r3, r3, #12
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a10      	ldr	r2, [pc, #64]	; (8003750 <TIM_OC4_SetConfig+0x9c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d109      	bne.n	8003728 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800371a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	019b      	lsls	r3, r3, #6
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	621a      	str	r2, [r3, #32]
}
 8003742:	bf00      	nop
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40010000 	.word	0x40010000

08003754 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f023 0201 	bic.w	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4a24      	ldr	r2, [pc, #144]	; (8003810 <TIM_TI1_SetConfig+0xbc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <TIM_TI1_SetConfig+0x56>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003788:	d00f      	beq.n	80037aa <TIM_TI1_SetConfig+0x56>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4a21      	ldr	r2, [pc, #132]	; (8003814 <TIM_TI1_SetConfig+0xc0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00b      	beq.n	80037aa <TIM_TI1_SetConfig+0x56>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4a20      	ldr	r2, [pc, #128]	; (8003818 <TIM_TI1_SetConfig+0xc4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d007      	beq.n	80037aa <TIM_TI1_SetConfig+0x56>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <TIM_TI1_SetConfig+0xc8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d003      	beq.n	80037aa <TIM_TI1_SetConfig+0x56>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <TIM_TI1_SetConfig+0xcc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <TIM_TI1_SetConfig+0x5a>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <TIM_TI1_SetConfig+0x5c>
 80037ae:	2300      	movs	r3, #0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f023 0303 	bic.w	r3, r3, #3
 80037ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	e003      	b.n	80037ce <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f023 030a 	bic.w	r3, r3, #10
 80037e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f003 030a 	and.w	r3, r3, #10
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	621a      	str	r2, [r3, #32]
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40010000 	.word	0x40010000
 8003814:	40000400 	.word	0x40000400
 8003818:	40000800 	.word	0x40000800
 800381c:	40000c00 	.word	0x40000c00
 8003820:	40014000 	.word	0x40014000

08003824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	f023 0201 	bic.w	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800384e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f023 030a 	bic.w	r3, r3, #10
 8003860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	621a      	str	r2, [r3, #32]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003882:	b480      	push	{r7}
 8003884:	b087      	sub	sp, #28
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f023 0210 	bic.w	r2, r3, #16
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	031b      	lsls	r3, r3, #12
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	621a      	str	r2, [r3, #32]
}
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f023 0210 	bic.w	r2, r3, #16
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003926:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	031b      	lsls	r3, r3, #12
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003938:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f023 0303 	bic.w	r3, r3, #3
 8003988:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003998:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80039ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	621a      	str	r2, [r3, #32]
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	031b      	lsls	r3, r3, #12
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003a26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	031b      	lsls	r3, r3, #12
 8003a2c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	621a      	str	r2, [r3, #32]
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f043 0307 	orr.w	r3, r3, #7
 8003a70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	609a      	str	r2, [r3, #8]
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	021a      	lsls	r2, r3, #8
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	609a      	str	r2, [r3, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1a      	ldr	r2, [r3, #32]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1a      	ldr	r2, [r3, #32]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	fa01 f303 	lsl.w	r3, r1, r3
 8003afc:	431a      	orrs	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e050      	b.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1c      	ldr	r2, [pc, #112]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d018      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b74:	d013      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00e      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d009      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a15      	ldr	r2, [pc, #84]	; (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d004      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40010000 	.word	0x40010000
 8003bdc:	40000400 	.word	0x40000400
 8003be0:	40000800 	.word	0x40000800
 8003be4:	40000c00 	.word	0x40000c00
 8003be8:	40014000 	.word	0x40014000

08003bec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e03d      	b.n	8003c84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e03f      	b.n	8003d4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd fad0 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2224      	movs	r2, #36	; 0x24
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fddf 	bl	80048c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b08a      	sub	sp, #40	; 0x28
 8003d56:	af02      	add	r7, sp, #8
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d17c      	bne.n	8003e6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_UART_Transmit+0x2c>
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e075      	b.n	8003e6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_UART_Transmit+0x3e>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e06e      	b.n	8003e6e <HAL_UART_Transmit+0x11c>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2221      	movs	r2, #33	; 0x21
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003da6:	f7fd fb65 	bl	8001474 <HAL_GetTick>
 8003daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	88fa      	ldrh	r2, [r7, #6]
 8003db0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	88fa      	ldrh	r2, [r7, #6]
 8003db6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc0:	d108      	bne.n	8003dd4 <HAL_UART_Transmit+0x82>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d104      	bne.n	8003dd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	e003      	b.n	8003ddc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003de4:	e02a      	b.n	8003e3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2200      	movs	r2, #0
 8003dee:	2180      	movs	r1, #128	; 0x80
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 fb1f 	bl	8004434 <UART_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e036      	b.n	8003e6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10b      	bne.n	8003e1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	3302      	adds	r3, #2
 8003e1a:	61bb      	str	r3, [r7, #24]
 8003e1c:	e007      	b.n	8003e2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	781a      	ldrb	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1cf      	bne.n	8003de6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2140      	movs	r1, #64	; 0x40
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 faef 	bl	8004434 <UART_WaitOnFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e006      	b.n	8003e6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	4613      	mov	r3, r2
 8003e82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d11d      	bne.n	8003ecc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_Receive_IT+0x26>
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e016      	b.n	8003ece <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Receive_IT+0x38>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e00f      	b.n	8003ece <HAL_UART_Receive_IT+0x58>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fb24 	bl	8004510 <UART_Start_Receive_IT>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	e000      	b.n	8003ece <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ecc:	2302      	movs	r3, #2
  }
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b0ba      	sub	sp, #232	; 0xe8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_UART_IRQHandler+0x66>
 8003f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fc07 	bl	800474a <UART_Receive_IT>
      return;
 8003f3c:	e256      	b.n	80043ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80de 	beq.w	8004104 <HAL_UART_IRQHandler+0x22c>
 8003f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80d1 	beq.w	8004104 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_UART_IRQHandler+0xae>
 8003f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <HAL_UART_IRQHandler+0xd2>
 8003f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f043 0202 	orr.w	r2, r3, #2
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <HAL_UART_IRQHandler+0xf6>
 8003fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d011      	beq.n	8003ffe <HAL_UART_IRQHandler+0x126>
 8003fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f043 0208 	orr.w	r2, r3, #8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 81ed 	beq.w	80043e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_UART_IRQHandler+0x14e>
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fb92 	bl	800474a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	bf0c      	ite	eq
 8004034:	2301      	moveq	r3, #1
 8004036:	2300      	movne	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <HAL_UART_IRQHandler+0x17a>
 800404a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04f      	beq.n	80040f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa9a 	bl	800458c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b40      	cmp	r3, #64	; 0x40
 8004064:	d141      	bne.n	80040ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3314      	adds	r3, #20
 800406c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800407c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3314      	adds	r3, #20
 800408e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800409e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1d9      	bne.n	8004066 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d013      	beq.n	80040e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	4a7d      	ldr	r2, [pc, #500]	; (80042b4 <HAL_UART_IRQHandler+0x3dc>)
 80040c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd fb61 	bl	800178e <HAL_DMA_Abort_IT>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040dc:	4610      	mov	r0, r2
 80040de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e00e      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f990 	bl	8004408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	e00a      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f98c 	bl	8004408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	e006      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f988 	bl	8004408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040fe:	e170      	b.n	80043e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	bf00      	nop
    return;
 8004102:	e16e      	b.n	80043e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	2b01      	cmp	r3, #1
 800410a:	f040 814a 	bne.w	80043a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800410e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8143 	beq.w	80043a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800411c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 813c 	beq.w	80043a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	f040 80b4 	bne.w	80042b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800415c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8140 	beq.w	80043e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800416a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800416e:	429a      	cmp	r2, r3
 8004170:	f080 8139 	bcs.w	80043e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800417a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004186:	f000 8088 	beq.w	800429a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	330c      	adds	r3, #12
 8004190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1d9      	bne.n	800418a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3314      	adds	r3, #20
 80041dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3314      	adds	r3, #20
 80041f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004202:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800420c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e1      	bne.n	80041d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3314      	adds	r3, #20
 8004218:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3314      	adds	r3, #20
 8004232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004236:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004238:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800423c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e3      	bne.n	8004212 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800426a:	f023 0310 	bic.w	r3, r3, #16
 800426e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800427c:	65ba      	str	r2, [r7, #88]	; 0x58
 800427e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004282:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800428a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e3      	bne.n	8004258 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	4618      	mov	r0, r3
 8004296:	f7fd fa0a 	bl	80016ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	4619      	mov	r1, r3
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8b6 	bl	800441c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042b0:	e099      	b.n	80043e6 <HAL_UART_IRQHandler+0x50e>
 80042b2:	bf00      	nop
 80042b4:	08004653 	.word	0x08004653
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 808b 	beq.w	80043ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80042d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8086 	beq.w	80043ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004302:	647a      	str	r2, [r7, #68]	; 0x44
 8004304:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004308:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e3      	bne.n	80042de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	623b      	str	r3, [r7, #32]
   return(result);
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800433a:	633a      	str	r2, [r7, #48]	; 0x30
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e3      	bne.n	8004316 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	60fb      	str	r3, [r7, #12]
   return(result);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0310 	bic.w	r3, r3, #16
 8004372:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004380:	61fa      	str	r2, [r7, #28]
 8004382:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	69b9      	ldr	r1, [r7, #24]
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	617b      	str	r3, [r7, #20]
   return(result);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e3      	bne.n	800435c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004394:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f83e 	bl	800441c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043a0:	e023      	b.n	80043ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <HAL_UART_IRQHandler+0x4ea>
 80043ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f95d 	bl	800467a <UART_Transmit_IT>
    return;
 80043c0:	e014      	b.n	80043ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00e      	beq.n	80043ec <HAL_UART_IRQHandler+0x514>
 80043ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f99d 	bl	800471a <UART_EndTransmit_IT>
    return;
 80043e0:	e004      	b.n	80043ec <HAL_UART_IRQHandler+0x514>
    return;
 80043e2:	bf00      	nop
 80043e4:	e002      	b.n	80043ec <HAL_UART_IRQHandler+0x514>
      return;
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <HAL_UART_IRQHandler+0x514>
      return;
 80043ea:	bf00      	nop
  }
}
 80043ec:	37e8      	adds	r7, #232	; 0xe8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop

080043f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b090      	sub	sp, #64	; 0x40
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	4613      	mov	r3, r2
 8004442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004444:	e050      	b.n	80044e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d04c      	beq.n	80044e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800444e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <UART_WaitOnFlagUntilTimeout+0x30>
 8004454:	f7fd f80e 	bl	8001474 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004460:	429a      	cmp	r2, r3
 8004462:	d241      	bcs.n	80044e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800447a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004484:	637a      	str	r2, [r7, #52]	; 0x34
 8004486:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800448a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800448c:	e841 2300 	strex	r3, r2, [r1]
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e5      	bne.n	8004464 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3314      	adds	r3, #20
 800449e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	613b      	str	r3, [r7, #16]
   return(result);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3314      	adds	r3, #20
 80044b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044b8:	623a      	str	r2, [r7, #32]
 80044ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	69f9      	ldr	r1, [r7, #28]
 80044be:	6a3a      	ldr	r2, [r7, #32]
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e5      	bne.n	8004498 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e00f      	b.n	8004508 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	429a      	cmp	r2, r3
 8004504:	d09f      	beq.n	8004446 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3740      	adds	r7, #64	; 0x40
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	4613      	mov	r3, r2
 800451c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	88fa      	ldrh	r2, [r7, #6]
 8004528:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	88fa      	ldrh	r2, [r7, #6]
 800452e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2222      	movs	r2, #34	; 0x22
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0201 	orr.w	r2, r2, #1
 800456c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0220 	orr.w	r2, r2, #32
 800457c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800458c:	b480      	push	{r7}
 800458e:	b095      	sub	sp, #84	; 0x54
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045b4:	643a      	str	r2, [r7, #64]	; 0x40
 80045b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045bc:	e841 2300 	strex	r3, r2, [r1]
 80045c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e5      	bne.n	8004594 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3314      	adds	r3, #20
 80045ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	64bb      	str	r3, [r7, #72]	; 0x48
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3314      	adds	r3, #20
 80045e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e5      	bne.n	80045c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	2b01      	cmp	r3, #1
 8004602:	d119      	bne.n	8004638 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	60bb      	str	r3, [r7, #8]
   return(result);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f023 0310 	bic.w	r3, r3, #16
 800461a:	647b      	str	r3, [r7, #68]	; 0x44
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004624:	61ba      	str	r2, [r7, #24]
 8004626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6979      	ldr	r1, [r7, #20]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	613b      	str	r3, [r7, #16]
   return(result);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e5      	bne.n	8004604 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004646:	bf00      	nop
 8004648:	3754      	adds	r7, #84	; 0x54
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7ff fecb 	bl	8004408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004672:	bf00      	nop
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b21      	cmp	r3, #33	; 0x21
 800468c:	d13e      	bne.n	800470c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004696:	d114      	bne.n	80046c2 <UART_Transmit_IT+0x48>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d110      	bne.n	80046c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	1c9a      	adds	r2, r3, #2
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	621a      	str	r2, [r3, #32]
 80046c0:	e008      	b.n	80046d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6211      	str	r1, [r2, #32]
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29b      	uxth	r3, r3
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4619      	mov	r1, r3
 80046e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10f      	bne.n	8004708 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004706:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	e000      	b.n	800470e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
  }
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004730:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fe5a 	bl	80043f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b08c      	sub	sp, #48	; 0x30
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b22      	cmp	r3, #34	; 0x22
 800475c:	f040 80ab 	bne.w	80048b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004768:	d117      	bne.n	800479a <UART_Receive_IT+0x50>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d113      	bne.n	800479a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004772:	2300      	movs	r3, #0
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004788:	b29a      	uxth	r2, r3
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	1c9a      	adds	r2, r3, #2
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	629a      	str	r2, [r3, #40]	; 0x28
 8004798:	e026      	b.n	80047e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ac:	d007      	beq.n	80047be <UART_Receive_IT+0x74>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <UART_Receive_IT+0x82>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e008      	b.n	80047de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4619      	mov	r1, r3
 80047f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d15a      	bne.n	80048b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0220 	bic.w	r2, r2, #32
 800480a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800481a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0201 	bic.w	r2, r2, #1
 800482a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	2b01      	cmp	r3, #1
 800483a:	d135      	bne.n	80048a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	613b      	str	r3, [r7, #16]
   return(result);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f023 0310 	bic.w	r3, r3, #16
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004862:	623a      	str	r2, [r7, #32]
 8004864:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	69f9      	ldr	r1, [r7, #28]
 8004868:	6a3a      	ldr	r2, [r7, #32]
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e5      	bne.n	8004842 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b10      	cmp	r3, #16
 8004882:	d10a      	bne.n	800489a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800489e:	4619      	mov	r1, r3
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff fdbb 	bl	800441c <HAL_UARTEx_RxEventCallback>
 80048a6:	e002      	b.n	80048ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fc f937 	bl	8000b1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e002      	b.n	80048b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e000      	b.n	80048b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
  }
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3730      	adds	r7, #48	; 0x30
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c4:	b0c0      	sub	sp, #256	; 0x100
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	68d9      	ldr	r1, [r3, #12]
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	ea40 0301 	orr.w	r3, r0, r1
 80048e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	431a      	orrs	r2, r3
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004918:	f021 010c 	bic.w	r1, r1, #12
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004926:	430b      	orrs	r3, r1
 8004928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	6999      	ldr	r1, [r3, #24]
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	ea40 0301 	orr.w	r3, r0, r1
 8004946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4b8f      	ldr	r3, [pc, #572]	; (8004b8c <UART_SetConfig+0x2cc>)
 8004950:	429a      	cmp	r2, r3
 8004952:	d005      	beq.n	8004960 <UART_SetConfig+0xa0>
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b8d      	ldr	r3, [pc, #564]	; (8004b90 <UART_SetConfig+0x2d0>)
 800495c:	429a      	cmp	r2, r3
 800495e:	d104      	bne.n	800496a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004960:	f7fd fd8c 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 8004964:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004968:	e003      	b.n	8004972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800496a:	f7fd fd73 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 800496e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497c:	f040 810c 	bne.w	8004b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004984:	2200      	movs	r2, #0
 8004986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800498a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800498e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004992:	4622      	mov	r2, r4
 8004994:	462b      	mov	r3, r5
 8004996:	1891      	adds	r1, r2, r2
 8004998:	65b9      	str	r1, [r7, #88]	; 0x58
 800499a:	415b      	adcs	r3, r3
 800499c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800499e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049a2:	4621      	mov	r1, r4
 80049a4:	eb12 0801 	adds.w	r8, r2, r1
 80049a8:	4629      	mov	r1, r5
 80049aa:	eb43 0901 	adc.w	r9, r3, r1
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049c2:	4690      	mov	r8, r2
 80049c4:	4699      	mov	r9, r3
 80049c6:	4623      	mov	r3, r4
 80049c8:	eb18 0303 	adds.w	r3, r8, r3
 80049cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049d0:	462b      	mov	r3, r5
 80049d2:	eb49 0303 	adc.w	r3, r9, r3
 80049d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049ee:	460b      	mov	r3, r1
 80049f0:	18db      	adds	r3, r3, r3
 80049f2:	653b      	str	r3, [r7, #80]	; 0x50
 80049f4:	4613      	mov	r3, r2
 80049f6:	eb42 0303 	adc.w	r3, r2, r3
 80049fa:	657b      	str	r3, [r7, #84]	; 0x54
 80049fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a04:	f7fb fc3c 	bl	8000280 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4b61      	ldr	r3, [pc, #388]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	011c      	lsls	r4, r3, #4
 8004a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a28:	4642      	mov	r2, r8
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	1891      	adds	r1, r2, r2
 8004a2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a30:	415b      	adcs	r3, r3
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a38:	4641      	mov	r1, r8
 8004a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a3e:	4649      	mov	r1, r9
 8004a40:	eb43 0b01 	adc.w	fp, r3, r1
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a58:	4692      	mov	sl, r2
 8004a5a:	469b      	mov	fp, r3
 8004a5c:	4643      	mov	r3, r8
 8004a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a66:	464b      	mov	r3, r9
 8004a68:	eb4b 0303 	adc.w	r3, fp, r3
 8004a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a84:	460b      	mov	r3, r1
 8004a86:	18db      	adds	r3, r3, r3
 8004a88:	643b      	str	r3, [r7, #64]	; 0x40
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	eb42 0303 	adc.w	r3, r2, r3
 8004a90:	647b      	str	r3, [r7, #68]	; 0x44
 8004a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a9a:	f7fb fbf1 	bl	8000280 <__aeabi_uldivmod>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	4b3b      	ldr	r3, [pc, #236]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	2264      	movs	r2, #100	; 0x64
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	1acb      	subs	r3, r1, r3
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004aba:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004abc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ac8:	441c      	add	r4, r3
 8004aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004adc:	4642      	mov	r2, r8
 8004ade:	464b      	mov	r3, r9
 8004ae0:	1891      	adds	r1, r2, r2
 8004ae2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ae4:	415b      	adcs	r3, r3
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004aec:	4641      	mov	r1, r8
 8004aee:	1851      	adds	r1, r2, r1
 8004af0:	6339      	str	r1, [r7, #48]	; 0x30
 8004af2:	4649      	mov	r1, r9
 8004af4:	414b      	adcs	r3, r1
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b04:	4659      	mov	r1, fp
 8004b06:	00cb      	lsls	r3, r1, #3
 8004b08:	4651      	mov	r1, sl
 8004b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b0e:	4651      	mov	r1, sl
 8004b10:	00ca      	lsls	r2, r1, #3
 8004b12:	4610      	mov	r0, r2
 8004b14:	4619      	mov	r1, r3
 8004b16:	4603      	mov	r3, r0
 8004b18:	4642      	mov	r2, r8
 8004b1a:	189b      	adds	r3, r3, r2
 8004b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b20:	464b      	mov	r3, r9
 8004b22:	460a      	mov	r2, r1
 8004b24:	eb42 0303 	adc.w	r3, r2, r3
 8004b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b40:	460b      	mov	r3, r1
 8004b42:	18db      	adds	r3, r3, r3
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b46:	4613      	mov	r3, r2
 8004b48:	eb42 0303 	adc.w	r3, r2, r3
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b56:	f7fb fb93 	bl	8000280 <__aeabi_uldivmod>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004b60:	fba3 1302 	umull	r1, r3, r3, r2
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	2164      	movs	r1, #100	; 0x64
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	3332      	adds	r3, #50	; 0x32
 8004b72:	4a08      	ldr	r2, [pc, #32]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	f003 0207 	and.w	r2, r3, #7
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4422      	add	r2, r4
 8004b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b88:	e106      	b.n	8004d98 <UART_SetConfig+0x4d8>
 8004b8a:	bf00      	nop
 8004b8c:	40011000 	.word	0x40011000
 8004b90:	40011400 	.word	0x40011400
 8004b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004baa:	4642      	mov	r2, r8
 8004bac:	464b      	mov	r3, r9
 8004bae:	1891      	adds	r1, r2, r2
 8004bb0:	6239      	str	r1, [r7, #32]
 8004bb2:	415b      	adcs	r3, r3
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bba:	4641      	mov	r1, r8
 8004bbc:	1854      	adds	r4, r2, r1
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	eb43 0501 	adc.w	r5, r3, r1
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	00eb      	lsls	r3, r5, #3
 8004bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bd2:	00e2      	lsls	r2, r4, #3
 8004bd4:	4614      	mov	r4, r2
 8004bd6:	461d      	mov	r5, r3
 8004bd8:	4643      	mov	r3, r8
 8004bda:	18e3      	adds	r3, r4, r3
 8004bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004be0:	464b      	mov	r3, r9
 8004be2:	eb45 0303 	adc.w	r3, r5, r3
 8004be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c06:	4629      	mov	r1, r5
 8004c08:	008b      	lsls	r3, r1, #2
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c10:	4621      	mov	r1, r4
 8004c12:	008a      	lsls	r2, r1, #2
 8004c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c18:	f7fb fb32 	bl	8000280 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4b60      	ldr	r3, [pc, #384]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004c22:	fba3 2302 	umull	r2, r3, r3, r2
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	011c      	lsls	r4, r3, #4
 8004c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	464b      	mov	r3, r9
 8004c40:	1891      	adds	r1, r2, r2
 8004c42:	61b9      	str	r1, [r7, #24]
 8004c44:	415b      	adcs	r3, r3
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	1851      	adds	r1, r2, r1
 8004c50:	6139      	str	r1, [r7, #16]
 8004c52:	4649      	mov	r1, r9
 8004c54:	414b      	adcs	r3, r1
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c64:	4659      	mov	r1, fp
 8004c66:	00cb      	lsls	r3, r1, #3
 8004c68:	4651      	mov	r1, sl
 8004c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c6e:	4651      	mov	r1, sl
 8004c70:	00ca      	lsls	r2, r1, #3
 8004c72:	4610      	mov	r0, r2
 8004c74:	4619      	mov	r1, r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	4642      	mov	r2, r8
 8004c7a:	189b      	adds	r3, r3, r2
 8004c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c80:	464b      	mov	r3, r9
 8004c82:	460a      	mov	r2, r1
 8004c84:	eb42 0303 	adc.w	r3, r2, r3
 8004c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	008b      	lsls	r3, r1, #2
 8004ca8:	4641      	mov	r1, r8
 8004caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cae:	4641      	mov	r1, r8
 8004cb0:	008a      	lsls	r2, r1, #2
 8004cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cb6:	f7fb fae3 	bl	8000280 <__aeabi_uldivmod>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	4b38      	ldr	r3, [pc, #224]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	2264      	movs	r2, #100	; 0x64
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	1acb      	subs	r3, r1, r3
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	3332      	adds	r3, #50	; 0x32
 8004cd4:	4a33      	ldr	r2, [pc, #204]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ce0:	441c      	add	r4, r3
 8004ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	673b      	str	r3, [r7, #112]	; 0x70
 8004cea:	677a      	str	r2, [r7, #116]	; 0x74
 8004cec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	1891      	adds	r1, r2, r2
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	415b      	adcs	r3, r3
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d00:	4641      	mov	r1, r8
 8004d02:	1851      	adds	r1, r2, r1
 8004d04:	6039      	str	r1, [r7, #0]
 8004d06:	4649      	mov	r1, r9
 8004d08:	414b      	adcs	r3, r1
 8004d0a:	607b      	str	r3, [r7, #4]
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d18:	4659      	mov	r1, fp
 8004d1a:	00cb      	lsls	r3, r1, #3
 8004d1c:	4651      	mov	r1, sl
 8004d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d22:	4651      	mov	r1, sl
 8004d24:	00ca      	lsls	r2, r1, #3
 8004d26:	4610      	mov	r0, r2
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	189b      	adds	r3, r3, r2
 8004d30:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d32:	464b      	mov	r3, r9
 8004d34:	460a      	mov	r2, r1
 8004d36:	eb42 0303 	adc.w	r3, r2, r3
 8004d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	663b      	str	r3, [r7, #96]	; 0x60
 8004d46:	667a      	str	r2, [r7, #100]	; 0x64
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d54:	4649      	mov	r1, r9
 8004d56:	008b      	lsls	r3, r1, #2
 8004d58:	4641      	mov	r1, r8
 8004d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d5e:	4641      	mov	r1, r8
 8004d60:	008a      	lsls	r2, r1, #2
 8004d62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d66:	f7fb fa8b 	bl	8000280 <__aeabi_uldivmod>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004d70:	fba3 1302 	umull	r1, r3, r3, r2
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	2164      	movs	r1, #100	; 0x64
 8004d78:	fb01 f303 	mul.w	r3, r1, r3
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	3332      	adds	r3, #50	; 0x32
 8004d82:	4a08      	ldr	r2, [pc, #32]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004d84:	fba2 2303 	umull	r2, r3, r2, r3
 8004d88:	095b      	lsrs	r3, r3, #5
 8004d8a:	f003 020f 	and.w	r2, r3, #15
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4422      	add	r2, r4
 8004d96:	609a      	str	r2, [r3, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004da4:	51eb851f 	.word	0x51eb851f

08004da8 <siprintf>:
 8004da8:	b40e      	push	{r1, r2, r3}
 8004daa:	b500      	push	{lr}
 8004dac:	b09c      	sub	sp, #112	; 0x70
 8004dae:	ab1d      	add	r3, sp, #116	; 0x74
 8004db0:	9002      	str	r0, [sp, #8]
 8004db2:	9006      	str	r0, [sp, #24]
 8004db4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004db8:	4809      	ldr	r0, [pc, #36]	; (8004de0 <siprintf+0x38>)
 8004dba:	9107      	str	r1, [sp, #28]
 8004dbc:	9104      	str	r1, [sp, #16]
 8004dbe:	4909      	ldr	r1, [pc, #36]	; (8004de4 <siprintf+0x3c>)
 8004dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dc4:	9105      	str	r1, [sp, #20]
 8004dc6:	6800      	ldr	r0, [r0, #0]
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	a902      	add	r1, sp, #8
 8004dcc:	f000 f992 	bl	80050f4 <_svfiprintf_r>
 8004dd0:	9b02      	ldr	r3, [sp, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	b01c      	add	sp, #112	; 0x70
 8004dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ddc:	b003      	add	sp, #12
 8004dde:	4770      	bx	lr
 8004de0:	20000060 	.word	0x20000060
 8004de4:	ffff0208 	.word	0xffff0208

08004de8 <memset>:
 8004de8:	4402      	add	r2, r0
 8004dea:	4603      	mov	r3, r0
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d100      	bne.n	8004df2 <memset+0xa>
 8004df0:	4770      	bx	lr
 8004df2:	f803 1b01 	strb.w	r1, [r3], #1
 8004df6:	e7f9      	b.n	8004dec <memset+0x4>

08004df8 <__errno>:
 8004df8:	4b01      	ldr	r3, [pc, #4]	; (8004e00 <__errno+0x8>)
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000060 	.word	0x20000060

08004e04 <__libc_init_array>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	4d0d      	ldr	r5, [pc, #52]	; (8004e3c <__libc_init_array+0x38>)
 8004e08:	4c0d      	ldr	r4, [pc, #52]	; (8004e40 <__libc_init_array+0x3c>)
 8004e0a:	1b64      	subs	r4, r4, r5
 8004e0c:	10a4      	asrs	r4, r4, #2
 8004e0e:	2600      	movs	r6, #0
 8004e10:	42a6      	cmp	r6, r4
 8004e12:	d109      	bne.n	8004e28 <__libc_init_array+0x24>
 8004e14:	4d0b      	ldr	r5, [pc, #44]	; (8004e44 <__libc_init_array+0x40>)
 8004e16:	4c0c      	ldr	r4, [pc, #48]	; (8004e48 <__libc_init_array+0x44>)
 8004e18:	f000 fc6a 	bl	80056f0 <_init>
 8004e1c:	1b64      	subs	r4, r4, r5
 8004e1e:	10a4      	asrs	r4, r4, #2
 8004e20:	2600      	movs	r6, #0
 8004e22:	42a6      	cmp	r6, r4
 8004e24:	d105      	bne.n	8004e32 <__libc_init_array+0x2e>
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2c:	4798      	blx	r3
 8004e2e:	3601      	adds	r6, #1
 8004e30:	e7ee      	b.n	8004e10 <__libc_init_array+0xc>
 8004e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e36:	4798      	blx	r3
 8004e38:	3601      	adds	r6, #1
 8004e3a:	e7f2      	b.n	8004e22 <__libc_init_array+0x1e>
 8004e3c:	0800577c 	.word	0x0800577c
 8004e40:	0800577c 	.word	0x0800577c
 8004e44:	0800577c 	.word	0x0800577c
 8004e48:	08005780 	.word	0x08005780

08004e4c <__retarget_lock_acquire_recursive>:
 8004e4c:	4770      	bx	lr

08004e4e <__retarget_lock_release_recursive>:
 8004e4e:	4770      	bx	lr

08004e50 <_free_r>:
 8004e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e52:	2900      	cmp	r1, #0
 8004e54:	d044      	beq.n	8004ee0 <_free_r+0x90>
 8004e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e5a:	9001      	str	r0, [sp, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e62:	bfb8      	it	lt
 8004e64:	18e4      	addlt	r4, r4, r3
 8004e66:	f000 f8df 	bl	8005028 <__malloc_lock>
 8004e6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <_free_r+0x94>)
 8004e6c:	9801      	ldr	r0, [sp, #4]
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	b933      	cbnz	r3, 8004e80 <_free_r+0x30>
 8004e72:	6063      	str	r3, [r4, #4]
 8004e74:	6014      	str	r4, [r2, #0]
 8004e76:	b003      	add	sp, #12
 8004e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e7c:	f000 b8da 	b.w	8005034 <__malloc_unlock>
 8004e80:	42a3      	cmp	r3, r4
 8004e82:	d908      	bls.n	8004e96 <_free_r+0x46>
 8004e84:	6825      	ldr	r5, [r4, #0]
 8004e86:	1961      	adds	r1, r4, r5
 8004e88:	428b      	cmp	r3, r1
 8004e8a:	bf01      	itttt	eq
 8004e8c:	6819      	ldreq	r1, [r3, #0]
 8004e8e:	685b      	ldreq	r3, [r3, #4]
 8004e90:	1949      	addeq	r1, r1, r5
 8004e92:	6021      	streq	r1, [r4, #0]
 8004e94:	e7ed      	b.n	8004e72 <_free_r+0x22>
 8004e96:	461a      	mov	r2, r3
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	b10b      	cbz	r3, 8004ea0 <_free_r+0x50>
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	d9fa      	bls.n	8004e96 <_free_r+0x46>
 8004ea0:	6811      	ldr	r1, [r2, #0]
 8004ea2:	1855      	adds	r5, r2, r1
 8004ea4:	42a5      	cmp	r5, r4
 8004ea6:	d10b      	bne.n	8004ec0 <_free_r+0x70>
 8004ea8:	6824      	ldr	r4, [r4, #0]
 8004eaa:	4421      	add	r1, r4
 8004eac:	1854      	adds	r4, r2, r1
 8004eae:	42a3      	cmp	r3, r4
 8004eb0:	6011      	str	r1, [r2, #0]
 8004eb2:	d1e0      	bne.n	8004e76 <_free_r+0x26>
 8004eb4:	681c      	ldr	r4, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	6053      	str	r3, [r2, #4]
 8004eba:	440c      	add	r4, r1
 8004ebc:	6014      	str	r4, [r2, #0]
 8004ebe:	e7da      	b.n	8004e76 <_free_r+0x26>
 8004ec0:	d902      	bls.n	8004ec8 <_free_r+0x78>
 8004ec2:	230c      	movs	r3, #12
 8004ec4:	6003      	str	r3, [r0, #0]
 8004ec6:	e7d6      	b.n	8004e76 <_free_r+0x26>
 8004ec8:	6825      	ldr	r5, [r4, #0]
 8004eca:	1961      	adds	r1, r4, r5
 8004ecc:	428b      	cmp	r3, r1
 8004ece:	bf04      	itt	eq
 8004ed0:	6819      	ldreq	r1, [r3, #0]
 8004ed2:	685b      	ldreq	r3, [r3, #4]
 8004ed4:	6063      	str	r3, [r4, #4]
 8004ed6:	bf04      	itt	eq
 8004ed8:	1949      	addeq	r1, r1, r5
 8004eda:	6021      	streq	r1, [r4, #0]
 8004edc:	6054      	str	r4, [r2, #4]
 8004ede:	e7ca      	b.n	8004e76 <_free_r+0x26>
 8004ee0:	b003      	add	sp, #12
 8004ee2:	bd30      	pop	{r4, r5, pc}
 8004ee4:	20000370 	.word	0x20000370

08004ee8 <sbrk_aligned>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	4e0e      	ldr	r6, [pc, #56]	; (8004f24 <sbrk_aligned+0x3c>)
 8004eec:	460c      	mov	r4, r1
 8004eee:	6831      	ldr	r1, [r6, #0]
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	b911      	cbnz	r1, 8004efa <sbrk_aligned+0x12>
 8004ef4:	f000 fba6 	bl	8005644 <_sbrk_r>
 8004ef8:	6030      	str	r0, [r6, #0]
 8004efa:	4621      	mov	r1, r4
 8004efc:	4628      	mov	r0, r5
 8004efe:	f000 fba1 	bl	8005644 <_sbrk_r>
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	d00a      	beq.n	8004f1c <sbrk_aligned+0x34>
 8004f06:	1cc4      	adds	r4, r0, #3
 8004f08:	f024 0403 	bic.w	r4, r4, #3
 8004f0c:	42a0      	cmp	r0, r4
 8004f0e:	d007      	beq.n	8004f20 <sbrk_aligned+0x38>
 8004f10:	1a21      	subs	r1, r4, r0
 8004f12:	4628      	mov	r0, r5
 8004f14:	f000 fb96 	bl	8005644 <_sbrk_r>
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d101      	bne.n	8004f20 <sbrk_aligned+0x38>
 8004f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8004f20:	4620      	mov	r0, r4
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	20000374 	.word	0x20000374

08004f28 <_malloc_r>:
 8004f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f2c:	1ccd      	adds	r5, r1, #3
 8004f2e:	f025 0503 	bic.w	r5, r5, #3
 8004f32:	3508      	adds	r5, #8
 8004f34:	2d0c      	cmp	r5, #12
 8004f36:	bf38      	it	cc
 8004f38:	250c      	movcc	r5, #12
 8004f3a:	2d00      	cmp	r5, #0
 8004f3c:	4607      	mov	r7, r0
 8004f3e:	db01      	blt.n	8004f44 <_malloc_r+0x1c>
 8004f40:	42a9      	cmp	r1, r5
 8004f42:	d905      	bls.n	8004f50 <_malloc_r+0x28>
 8004f44:	230c      	movs	r3, #12
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	2600      	movs	r6, #0
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005024 <_malloc_r+0xfc>
 8004f54:	f000 f868 	bl	8005028 <__malloc_lock>
 8004f58:	f8d8 3000 	ldr.w	r3, [r8]
 8004f5c:	461c      	mov	r4, r3
 8004f5e:	bb5c      	cbnz	r4, 8004fb8 <_malloc_r+0x90>
 8004f60:	4629      	mov	r1, r5
 8004f62:	4638      	mov	r0, r7
 8004f64:	f7ff ffc0 	bl	8004ee8 <sbrk_aligned>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	d155      	bne.n	800501a <_malloc_r+0xf2>
 8004f6e:	f8d8 4000 	ldr.w	r4, [r8]
 8004f72:	4626      	mov	r6, r4
 8004f74:	2e00      	cmp	r6, #0
 8004f76:	d145      	bne.n	8005004 <_malloc_r+0xdc>
 8004f78:	2c00      	cmp	r4, #0
 8004f7a:	d048      	beq.n	800500e <_malloc_r+0xe6>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4638      	mov	r0, r7
 8004f82:	eb04 0903 	add.w	r9, r4, r3
 8004f86:	f000 fb5d 	bl	8005644 <_sbrk_r>
 8004f8a:	4581      	cmp	r9, r0
 8004f8c:	d13f      	bne.n	800500e <_malloc_r+0xe6>
 8004f8e:	6821      	ldr	r1, [r4, #0]
 8004f90:	1a6d      	subs	r5, r5, r1
 8004f92:	4629      	mov	r1, r5
 8004f94:	4638      	mov	r0, r7
 8004f96:	f7ff ffa7 	bl	8004ee8 <sbrk_aligned>
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d037      	beq.n	800500e <_malloc_r+0xe6>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	442b      	add	r3, r5
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d038      	beq.n	800501e <_malloc_r+0xf6>
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	42a2      	cmp	r2, r4
 8004fb0:	d12b      	bne.n	800500a <_malloc_r+0xe2>
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	e00f      	b.n	8004fd8 <_malloc_r+0xb0>
 8004fb8:	6822      	ldr	r2, [r4, #0]
 8004fba:	1b52      	subs	r2, r2, r5
 8004fbc:	d41f      	bmi.n	8004ffe <_malloc_r+0xd6>
 8004fbe:	2a0b      	cmp	r2, #11
 8004fc0:	d917      	bls.n	8004ff2 <_malloc_r+0xca>
 8004fc2:	1961      	adds	r1, r4, r5
 8004fc4:	42a3      	cmp	r3, r4
 8004fc6:	6025      	str	r5, [r4, #0]
 8004fc8:	bf18      	it	ne
 8004fca:	6059      	strne	r1, [r3, #4]
 8004fcc:	6863      	ldr	r3, [r4, #4]
 8004fce:	bf08      	it	eq
 8004fd0:	f8c8 1000 	streq.w	r1, [r8]
 8004fd4:	5162      	str	r2, [r4, r5]
 8004fd6:	604b      	str	r3, [r1, #4]
 8004fd8:	4638      	mov	r0, r7
 8004fda:	f104 060b 	add.w	r6, r4, #11
 8004fde:	f000 f829 	bl	8005034 <__malloc_unlock>
 8004fe2:	f026 0607 	bic.w	r6, r6, #7
 8004fe6:	1d23      	adds	r3, r4, #4
 8004fe8:	1af2      	subs	r2, r6, r3
 8004fea:	d0ae      	beq.n	8004f4a <_malloc_r+0x22>
 8004fec:	1b9b      	subs	r3, r3, r6
 8004fee:	50a3      	str	r3, [r4, r2]
 8004ff0:	e7ab      	b.n	8004f4a <_malloc_r+0x22>
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	6862      	ldr	r2, [r4, #4]
 8004ff6:	d1dd      	bne.n	8004fb4 <_malloc_r+0x8c>
 8004ff8:	f8c8 2000 	str.w	r2, [r8]
 8004ffc:	e7ec      	b.n	8004fd8 <_malloc_r+0xb0>
 8004ffe:	4623      	mov	r3, r4
 8005000:	6864      	ldr	r4, [r4, #4]
 8005002:	e7ac      	b.n	8004f5e <_malloc_r+0x36>
 8005004:	4634      	mov	r4, r6
 8005006:	6876      	ldr	r6, [r6, #4]
 8005008:	e7b4      	b.n	8004f74 <_malloc_r+0x4c>
 800500a:	4613      	mov	r3, r2
 800500c:	e7cc      	b.n	8004fa8 <_malloc_r+0x80>
 800500e:	230c      	movs	r3, #12
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	4638      	mov	r0, r7
 8005014:	f000 f80e 	bl	8005034 <__malloc_unlock>
 8005018:	e797      	b.n	8004f4a <_malloc_r+0x22>
 800501a:	6025      	str	r5, [r4, #0]
 800501c:	e7dc      	b.n	8004fd8 <_malloc_r+0xb0>
 800501e:	605b      	str	r3, [r3, #4]
 8005020:	deff      	udf	#255	; 0xff
 8005022:	bf00      	nop
 8005024:	20000370 	.word	0x20000370

08005028 <__malloc_lock>:
 8005028:	4801      	ldr	r0, [pc, #4]	; (8005030 <__malloc_lock+0x8>)
 800502a:	f7ff bf0f 	b.w	8004e4c <__retarget_lock_acquire_recursive>
 800502e:	bf00      	nop
 8005030:	2000036c 	.word	0x2000036c

08005034 <__malloc_unlock>:
 8005034:	4801      	ldr	r0, [pc, #4]	; (800503c <__malloc_unlock+0x8>)
 8005036:	f7ff bf0a 	b.w	8004e4e <__retarget_lock_release_recursive>
 800503a:	bf00      	nop
 800503c:	2000036c 	.word	0x2000036c

08005040 <__ssputs_r>:
 8005040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	688e      	ldr	r6, [r1, #8]
 8005046:	461f      	mov	r7, r3
 8005048:	42be      	cmp	r6, r7
 800504a:	680b      	ldr	r3, [r1, #0]
 800504c:	4682      	mov	sl, r0
 800504e:	460c      	mov	r4, r1
 8005050:	4690      	mov	r8, r2
 8005052:	d82c      	bhi.n	80050ae <__ssputs_r+0x6e>
 8005054:	898a      	ldrh	r2, [r1, #12]
 8005056:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800505a:	d026      	beq.n	80050aa <__ssputs_r+0x6a>
 800505c:	6965      	ldr	r5, [r4, #20]
 800505e:	6909      	ldr	r1, [r1, #16]
 8005060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005064:	eba3 0901 	sub.w	r9, r3, r1
 8005068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800506c:	1c7b      	adds	r3, r7, #1
 800506e:	444b      	add	r3, r9
 8005070:	106d      	asrs	r5, r5, #1
 8005072:	429d      	cmp	r5, r3
 8005074:	bf38      	it	cc
 8005076:	461d      	movcc	r5, r3
 8005078:	0553      	lsls	r3, r2, #21
 800507a:	d527      	bpl.n	80050cc <__ssputs_r+0x8c>
 800507c:	4629      	mov	r1, r5
 800507e:	f7ff ff53 	bl	8004f28 <_malloc_r>
 8005082:	4606      	mov	r6, r0
 8005084:	b360      	cbz	r0, 80050e0 <__ssputs_r+0xa0>
 8005086:	6921      	ldr	r1, [r4, #16]
 8005088:	464a      	mov	r2, r9
 800508a:	f000 faeb 	bl	8005664 <memcpy>
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	6126      	str	r6, [r4, #16]
 800509c:	6165      	str	r5, [r4, #20]
 800509e:	444e      	add	r6, r9
 80050a0:	eba5 0509 	sub.w	r5, r5, r9
 80050a4:	6026      	str	r6, [r4, #0]
 80050a6:	60a5      	str	r5, [r4, #8]
 80050a8:	463e      	mov	r6, r7
 80050aa:	42be      	cmp	r6, r7
 80050ac:	d900      	bls.n	80050b0 <__ssputs_r+0x70>
 80050ae:	463e      	mov	r6, r7
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	4632      	mov	r2, r6
 80050b4:	4641      	mov	r1, r8
 80050b6:	f000 faab 	bl	8005610 <memmove>
 80050ba:	68a3      	ldr	r3, [r4, #8]
 80050bc:	1b9b      	subs	r3, r3, r6
 80050be:	60a3      	str	r3, [r4, #8]
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	4433      	add	r3, r6
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	2000      	movs	r0, #0
 80050c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050cc:	462a      	mov	r2, r5
 80050ce:	f000 fad7 	bl	8005680 <_realloc_r>
 80050d2:	4606      	mov	r6, r0
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d1e0      	bne.n	800509a <__ssputs_r+0x5a>
 80050d8:	6921      	ldr	r1, [r4, #16]
 80050da:	4650      	mov	r0, sl
 80050dc:	f7ff feb8 	bl	8004e50 <_free_r>
 80050e0:	230c      	movs	r3, #12
 80050e2:	f8ca 3000 	str.w	r3, [sl]
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	f04f 30ff 	mov.w	r0, #4294967295
 80050f2:	e7e9      	b.n	80050c8 <__ssputs_r+0x88>

080050f4 <_svfiprintf_r>:
 80050f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f8:	4698      	mov	r8, r3
 80050fa:	898b      	ldrh	r3, [r1, #12]
 80050fc:	061b      	lsls	r3, r3, #24
 80050fe:	b09d      	sub	sp, #116	; 0x74
 8005100:	4607      	mov	r7, r0
 8005102:	460d      	mov	r5, r1
 8005104:	4614      	mov	r4, r2
 8005106:	d50e      	bpl.n	8005126 <_svfiprintf_r+0x32>
 8005108:	690b      	ldr	r3, [r1, #16]
 800510a:	b963      	cbnz	r3, 8005126 <_svfiprintf_r+0x32>
 800510c:	2140      	movs	r1, #64	; 0x40
 800510e:	f7ff ff0b 	bl	8004f28 <_malloc_r>
 8005112:	6028      	str	r0, [r5, #0]
 8005114:	6128      	str	r0, [r5, #16]
 8005116:	b920      	cbnz	r0, 8005122 <_svfiprintf_r+0x2e>
 8005118:	230c      	movs	r3, #12
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	e0d0      	b.n	80052c4 <_svfiprintf_r+0x1d0>
 8005122:	2340      	movs	r3, #64	; 0x40
 8005124:	616b      	str	r3, [r5, #20]
 8005126:	2300      	movs	r3, #0
 8005128:	9309      	str	r3, [sp, #36]	; 0x24
 800512a:	2320      	movs	r3, #32
 800512c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005130:	f8cd 800c 	str.w	r8, [sp, #12]
 8005134:	2330      	movs	r3, #48	; 0x30
 8005136:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80052dc <_svfiprintf_r+0x1e8>
 800513a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800513e:	f04f 0901 	mov.w	r9, #1
 8005142:	4623      	mov	r3, r4
 8005144:	469a      	mov	sl, r3
 8005146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800514a:	b10a      	cbz	r2, 8005150 <_svfiprintf_r+0x5c>
 800514c:	2a25      	cmp	r2, #37	; 0x25
 800514e:	d1f9      	bne.n	8005144 <_svfiprintf_r+0x50>
 8005150:	ebba 0b04 	subs.w	fp, sl, r4
 8005154:	d00b      	beq.n	800516e <_svfiprintf_r+0x7a>
 8005156:	465b      	mov	r3, fp
 8005158:	4622      	mov	r2, r4
 800515a:	4629      	mov	r1, r5
 800515c:	4638      	mov	r0, r7
 800515e:	f7ff ff6f 	bl	8005040 <__ssputs_r>
 8005162:	3001      	adds	r0, #1
 8005164:	f000 80a9 	beq.w	80052ba <_svfiprintf_r+0x1c6>
 8005168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800516a:	445a      	add	r2, fp
 800516c:	9209      	str	r2, [sp, #36]	; 0x24
 800516e:	f89a 3000 	ldrb.w	r3, [sl]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 80a1 	beq.w	80052ba <_svfiprintf_r+0x1c6>
 8005178:	2300      	movs	r3, #0
 800517a:	f04f 32ff 	mov.w	r2, #4294967295
 800517e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005182:	f10a 0a01 	add.w	sl, sl, #1
 8005186:	9304      	str	r3, [sp, #16]
 8005188:	9307      	str	r3, [sp, #28]
 800518a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800518e:	931a      	str	r3, [sp, #104]	; 0x68
 8005190:	4654      	mov	r4, sl
 8005192:	2205      	movs	r2, #5
 8005194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005198:	4850      	ldr	r0, [pc, #320]	; (80052dc <_svfiprintf_r+0x1e8>)
 800519a:	f7fb f821 	bl	80001e0 <memchr>
 800519e:	9a04      	ldr	r2, [sp, #16]
 80051a0:	b9d8      	cbnz	r0, 80051da <_svfiprintf_r+0xe6>
 80051a2:	06d0      	lsls	r0, r2, #27
 80051a4:	bf44      	itt	mi
 80051a6:	2320      	movmi	r3, #32
 80051a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ac:	0711      	lsls	r1, r2, #28
 80051ae:	bf44      	itt	mi
 80051b0:	232b      	movmi	r3, #43	; 0x2b
 80051b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b6:	f89a 3000 	ldrb.w	r3, [sl]
 80051ba:	2b2a      	cmp	r3, #42	; 0x2a
 80051bc:	d015      	beq.n	80051ea <_svfiprintf_r+0xf6>
 80051be:	9a07      	ldr	r2, [sp, #28]
 80051c0:	4654      	mov	r4, sl
 80051c2:	2000      	movs	r0, #0
 80051c4:	f04f 0c0a 	mov.w	ip, #10
 80051c8:	4621      	mov	r1, r4
 80051ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051ce:	3b30      	subs	r3, #48	; 0x30
 80051d0:	2b09      	cmp	r3, #9
 80051d2:	d94d      	bls.n	8005270 <_svfiprintf_r+0x17c>
 80051d4:	b1b0      	cbz	r0, 8005204 <_svfiprintf_r+0x110>
 80051d6:	9207      	str	r2, [sp, #28]
 80051d8:	e014      	b.n	8005204 <_svfiprintf_r+0x110>
 80051da:	eba0 0308 	sub.w	r3, r0, r8
 80051de:	fa09 f303 	lsl.w	r3, r9, r3
 80051e2:	4313      	orrs	r3, r2
 80051e4:	9304      	str	r3, [sp, #16]
 80051e6:	46a2      	mov	sl, r4
 80051e8:	e7d2      	b.n	8005190 <_svfiprintf_r+0x9c>
 80051ea:	9b03      	ldr	r3, [sp, #12]
 80051ec:	1d19      	adds	r1, r3, #4
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	9103      	str	r1, [sp, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bfbb      	ittet	lt
 80051f6:	425b      	neglt	r3, r3
 80051f8:	f042 0202 	orrlt.w	r2, r2, #2
 80051fc:	9307      	strge	r3, [sp, #28]
 80051fe:	9307      	strlt	r3, [sp, #28]
 8005200:	bfb8      	it	lt
 8005202:	9204      	strlt	r2, [sp, #16]
 8005204:	7823      	ldrb	r3, [r4, #0]
 8005206:	2b2e      	cmp	r3, #46	; 0x2e
 8005208:	d10c      	bne.n	8005224 <_svfiprintf_r+0x130>
 800520a:	7863      	ldrb	r3, [r4, #1]
 800520c:	2b2a      	cmp	r3, #42	; 0x2a
 800520e:	d134      	bne.n	800527a <_svfiprintf_r+0x186>
 8005210:	9b03      	ldr	r3, [sp, #12]
 8005212:	1d1a      	adds	r2, r3, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	9203      	str	r2, [sp, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	bfb8      	it	lt
 800521c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005220:	3402      	adds	r4, #2
 8005222:	9305      	str	r3, [sp, #20]
 8005224:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80052ec <_svfiprintf_r+0x1f8>
 8005228:	7821      	ldrb	r1, [r4, #0]
 800522a:	2203      	movs	r2, #3
 800522c:	4650      	mov	r0, sl
 800522e:	f7fa ffd7 	bl	80001e0 <memchr>
 8005232:	b138      	cbz	r0, 8005244 <_svfiprintf_r+0x150>
 8005234:	9b04      	ldr	r3, [sp, #16]
 8005236:	eba0 000a 	sub.w	r0, r0, sl
 800523a:	2240      	movs	r2, #64	; 0x40
 800523c:	4082      	lsls	r2, r0
 800523e:	4313      	orrs	r3, r2
 8005240:	3401      	adds	r4, #1
 8005242:	9304      	str	r3, [sp, #16]
 8005244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005248:	4825      	ldr	r0, [pc, #148]	; (80052e0 <_svfiprintf_r+0x1ec>)
 800524a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800524e:	2206      	movs	r2, #6
 8005250:	f7fa ffc6 	bl	80001e0 <memchr>
 8005254:	2800      	cmp	r0, #0
 8005256:	d038      	beq.n	80052ca <_svfiprintf_r+0x1d6>
 8005258:	4b22      	ldr	r3, [pc, #136]	; (80052e4 <_svfiprintf_r+0x1f0>)
 800525a:	bb1b      	cbnz	r3, 80052a4 <_svfiprintf_r+0x1b0>
 800525c:	9b03      	ldr	r3, [sp, #12]
 800525e:	3307      	adds	r3, #7
 8005260:	f023 0307 	bic.w	r3, r3, #7
 8005264:	3308      	adds	r3, #8
 8005266:	9303      	str	r3, [sp, #12]
 8005268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800526a:	4433      	add	r3, r6
 800526c:	9309      	str	r3, [sp, #36]	; 0x24
 800526e:	e768      	b.n	8005142 <_svfiprintf_r+0x4e>
 8005270:	fb0c 3202 	mla	r2, ip, r2, r3
 8005274:	460c      	mov	r4, r1
 8005276:	2001      	movs	r0, #1
 8005278:	e7a6      	b.n	80051c8 <_svfiprintf_r+0xd4>
 800527a:	2300      	movs	r3, #0
 800527c:	3401      	adds	r4, #1
 800527e:	9305      	str	r3, [sp, #20]
 8005280:	4619      	mov	r1, r3
 8005282:	f04f 0c0a 	mov.w	ip, #10
 8005286:	4620      	mov	r0, r4
 8005288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800528c:	3a30      	subs	r2, #48	; 0x30
 800528e:	2a09      	cmp	r2, #9
 8005290:	d903      	bls.n	800529a <_svfiprintf_r+0x1a6>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0c6      	beq.n	8005224 <_svfiprintf_r+0x130>
 8005296:	9105      	str	r1, [sp, #20]
 8005298:	e7c4      	b.n	8005224 <_svfiprintf_r+0x130>
 800529a:	fb0c 2101 	mla	r1, ip, r1, r2
 800529e:	4604      	mov	r4, r0
 80052a0:	2301      	movs	r3, #1
 80052a2:	e7f0      	b.n	8005286 <_svfiprintf_r+0x192>
 80052a4:	ab03      	add	r3, sp, #12
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	462a      	mov	r2, r5
 80052aa:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <_svfiprintf_r+0x1f4>)
 80052ac:	a904      	add	r1, sp, #16
 80052ae:	4638      	mov	r0, r7
 80052b0:	f3af 8000 	nop.w
 80052b4:	1c42      	adds	r2, r0, #1
 80052b6:	4606      	mov	r6, r0
 80052b8:	d1d6      	bne.n	8005268 <_svfiprintf_r+0x174>
 80052ba:	89ab      	ldrh	r3, [r5, #12]
 80052bc:	065b      	lsls	r3, r3, #25
 80052be:	f53f af2d 	bmi.w	800511c <_svfiprintf_r+0x28>
 80052c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052c4:	b01d      	add	sp, #116	; 0x74
 80052c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ca:	ab03      	add	r3, sp, #12
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	462a      	mov	r2, r5
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <_svfiprintf_r+0x1f4>)
 80052d2:	a904      	add	r1, sp, #16
 80052d4:	4638      	mov	r0, r7
 80052d6:	f000 f879 	bl	80053cc <_printf_i>
 80052da:	e7eb      	b.n	80052b4 <_svfiprintf_r+0x1c0>
 80052dc:	08005740 	.word	0x08005740
 80052e0:	0800574a 	.word	0x0800574a
 80052e4:	00000000 	.word	0x00000000
 80052e8:	08005041 	.word	0x08005041
 80052ec:	08005746 	.word	0x08005746

080052f0 <_printf_common>:
 80052f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f4:	4616      	mov	r6, r2
 80052f6:	4699      	mov	r9, r3
 80052f8:	688a      	ldr	r2, [r1, #8]
 80052fa:	690b      	ldr	r3, [r1, #16]
 80052fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005300:	4293      	cmp	r3, r2
 8005302:	bfb8      	it	lt
 8005304:	4613      	movlt	r3, r2
 8005306:	6033      	str	r3, [r6, #0]
 8005308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800530c:	4607      	mov	r7, r0
 800530e:	460c      	mov	r4, r1
 8005310:	b10a      	cbz	r2, 8005316 <_printf_common+0x26>
 8005312:	3301      	adds	r3, #1
 8005314:	6033      	str	r3, [r6, #0]
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	0699      	lsls	r1, r3, #26
 800531a:	bf42      	ittt	mi
 800531c:	6833      	ldrmi	r3, [r6, #0]
 800531e:	3302      	addmi	r3, #2
 8005320:	6033      	strmi	r3, [r6, #0]
 8005322:	6825      	ldr	r5, [r4, #0]
 8005324:	f015 0506 	ands.w	r5, r5, #6
 8005328:	d106      	bne.n	8005338 <_printf_common+0x48>
 800532a:	f104 0a19 	add.w	sl, r4, #25
 800532e:	68e3      	ldr	r3, [r4, #12]
 8005330:	6832      	ldr	r2, [r6, #0]
 8005332:	1a9b      	subs	r3, r3, r2
 8005334:	42ab      	cmp	r3, r5
 8005336:	dc26      	bgt.n	8005386 <_printf_common+0x96>
 8005338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800533c:	1e13      	subs	r3, r2, #0
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	bf18      	it	ne
 8005342:	2301      	movne	r3, #1
 8005344:	0692      	lsls	r2, r2, #26
 8005346:	d42b      	bmi.n	80053a0 <_printf_common+0xb0>
 8005348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800534c:	4649      	mov	r1, r9
 800534e:	4638      	mov	r0, r7
 8005350:	47c0      	blx	r8
 8005352:	3001      	adds	r0, #1
 8005354:	d01e      	beq.n	8005394 <_printf_common+0xa4>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	6922      	ldr	r2, [r4, #16]
 800535a:	f003 0306 	and.w	r3, r3, #6
 800535e:	2b04      	cmp	r3, #4
 8005360:	bf02      	ittt	eq
 8005362:	68e5      	ldreq	r5, [r4, #12]
 8005364:	6833      	ldreq	r3, [r6, #0]
 8005366:	1aed      	subeq	r5, r5, r3
 8005368:	68a3      	ldr	r3, [r4, #8]
 800536a:	bf0c      	ite	eq
 800536c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005370:	2500      	movne	r5, #0
 8005372:	4293      	cmp	r3, r2
 8005374:	bfc4      	itt	gt
 8005376:	1a9b      	subgt	r3, r3, r2
 8005378:	18ed      	addgt	r5, r5, r3
 800537a:	2600      	movs	r6, #0
 800537c:	341a      	adds	r4, #26
 800537e:	42b5      	cmp	r5, r6
 8005380:	d11a      	bne.n	80053b8 <_printf_common+0xc8>
 8005382:	2000      	movs	r0, #0
 8005384:	e008      	b.n	8005398 <_printf_common+0xa8>
 8005386:	2301      	movs	r3, #1
 8005388:	4652      	mov	r2, sl
 800538a:	4649      	mov	r1, r9
 800538c:	4638      	mov	r0, r7
 800538e:	47c0      	blx	r8
 8005390:	3001      	adds	r0, #1
 8005392:	d103      	bne.n	800539c <_printf_common+0xac>
 8005394:	f04f 30ff 	mov.w	r0, #4294967295
 8005398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539c:	3501      	adds	r5, #1
 800539e:	e7c6      	b.n	800532e <_printf_common+0x3e>
 80053a0:	18e1      	adds	r1, r4, r3
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	2030      	movs	r0, #48	; 0x30
 80053a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053aa:	4422      	add	r2, r4
 80053ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053b4:	3302      	adds	r3, #2
 80053b6:	e7c7      	b.n	8005348 <_printf_common+0x58>
 80053b8:	2301      	movs	r3, #1
 80053ba:	4622      	mov	r2, r4
 80053bc:	4649      	mov	r1, r9
 80053be:	4638      	mov	r0, r7
 80053c0:	47c0      	blx	r8
 80053c2:	3001      	adds	r0, #1
 80053c4:	d0e6      	beq.n	8005394 <_printf_common+0xa4>
 80053c6:	3601      	adds	r6, #1
 80053c8:	e7d9      	b.n	800537e <_printf_common+0x8e>
	...

080053cc <_printf_i>:
 80053cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053d0:	7e0f      	ldrb	r7, [r1, #24]
 80053d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053d4:	2f78      	cmp	r7, #120	; 0x78
 80053d6:	4691      	mov	r9, r2
 80053d8:	4680      	mov	r8, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	469a      	mov	sl, r3
 80053de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053e2:	d807      	bhi.n	80053f4 <_printf_i+0x28>
 80053e4:	2f62      	cmp	r7, #98	; 0x62
 80053e6:	d80a      	bhi.n	80053fe <_printf_i+0x32>
 80053e8:	2f00      	cmp	r7, #0
 80053ea:	f000 80d4 	beq.w	8005596 <_printf_i+0x1ca>
 80053ee:	2f58      	cmp	r7, #88	; 0x58
 80053f0:	f000 80c0 	beq.w	8005574 <_printf_i+0x1a8>
 80053f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053fc:	e03a      	b.n	8005474 <_printf_i+0xa8>
 80053fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005402:	2b15      	cmp	r3, #21
 8005404:	d8f6      	bhi.n	80053f4 <_printf_i+0x28>
 8005406:	a101      	add	r1, pc, #4	; (adr r1, 800540c <_printf_i+0x40>)
 8005408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800540c:	08005465 	.word	0x08005465
 8005410:	08005479 	.word	0x08005479
 8005414:	080053f5 	.word	0x080053f5
 8005418:	080053f5 	.word	0x080053f5
 800541c:	080053f5 	.word	0x080053f5
 8005420:	080053f5 	.word	0x080053f5
 8005424:	08005479 	.word	0x08005479
 8005428:	080053f5 	.word	0x080053f5
 800542c:	080053f5 	.word	0x080053f5
 8005430:	080053f5 	.word	0x080053f5
 8005434:	080053f5 	.word	0x080053f5
 8005438:	0800557d 	.word	0x0800557d
 800543c:	080054a5 	.word	0x080054a5
 8005440:	08005537 	.word	0x08005537
 8005444:	080053f5 	.word	0x080053f5
 8005448:	080053f5 	.word	0x080053f5
 800544c:	0800559f 	.word	0x0800559f
 8005450:	080053f5 	.word	0x080053f5
 8005454:	080054a5 	.word	0x080054a5
 8005458:	080053f5 	.word	0x080053f5
 800545c:	080053f5 	.word	0x080053f5
 8005460:	0800553f 	.word	0x0800553f
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	1d1a      	adds	r2, r3, #4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	602a      	str	r2, [r5, #0]
 800546c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005474:	2301      	movs	r3, #1
 8005476:	e09f      	b.n	80055b8 <_printf_i+0x1ec>
 8005478:	6820      	ldr	r0, [r4, #0]
 800547a:	682b      	ldr	r3, [r5, #0]
 800547c:	0607      	lsls	r7, r0, #24
 800547e:	f103 0104 	add.w	r1, r3, #4
 8005482:	6029      	str	r1, [r5, #0]
 8005484:	d501      	bpl.n	800548a <_printf_i+0xbe>
 8005486:	681e      	ldr	r6, [r3, #0]
 8005488:	e003      	b.n	8005492 <_printf_i+0xc6>
 800548a:	0646      	lsls	r6, r0, #25
 800548c:	d5fb      	bpl.n	8005486 <_printf_i+0xba>
 800548e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005492:	2e00      	cmp	r6, #0
 8005494:	da03      	bge.n	800549e <_printf_i+0xd2>
 8005496:	232d      	movs	r3, #45	; 0x2d
 8005498:	4276      	negs	r6, r6
 800549a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800549e:	485a      	ldr	r0, [pc, #360]	; (8005608 <_printf_i+0x23c>)
 80054a0:	230a      	movs	r3, #10
 80054a2:	e012      	b.n	80054ca <_printf_i+0xfe>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	6820      	ldr	r0, [r4, #0]
 80054a8:	1d19      	adds	r1, r3, #4
 80054aa:	6029      	str	r1, [r5, #0]
 80054ac:	0605      	lsls	r5, r0, #24
 80054ae:	d501      	bpl.n	80054b4 <_printf_i+0xe8>
 80054b0:	681e      	ldr	r6, [r3, #0]
 80054b2:	e002      	b.n	80054ba <_printf_i+0xee>
 80054b4:	0641      	lsls	r1, r0, #25
 80054b6:	d5fb      	bpl.n	80054b0 <_printf_i+0xe4>
 80054b8:	881e      	ldrh	r6, [r3, #0]
 80054ba:	4853      	ldr	r0, [pc, #332]	; (8005608 <_printf_i+0x23c>)
 80054bc:	2f6f      	cmp	r7, #111	; 0x6f
 80054be:	bf0c      	ite	eq
 80054c0:	2308      	moveq	r3, #8
 80054c2:	230a      	movne	r3, #10
 80054c4:	2100      	movs	r1, #0
 80054c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ca:	6865      	ldr	r5, [r4, #4]
 80054cc:	60a5      	str	r5, [r4, #8]
 80054ce:	2d00      	cmp	r5, #0
 80054d0:	bfa2      	ittt	ge
 80054d2:	6821      	ldrge	r1, [r4, #0]
 80054d4:	f021 0104 	bicge.w	r1, r1, #4
 80054d8:	6021      	strge	r1, [r4, #0]
 80054da:	b90e      	cbnz	r6, 80054e0 <_printf_i+0x114>
 80054dc:	2d00      	cmp	r5, #0
 80054de:	d04b      	beq.n	8005578 <_printf_i+0x1ac>
 80054e0:	4615      	mov	r5, r2
 80054e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80054e6:	fb03 6711 	mls	r7, r3, r1, r6
 80054ea:	5dc7      	ldrb	r7, [r0, r7]
 80054ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054f0:	4637      	mov	r7, r6
 80054f2:	42bb      	cmp	r3, r7
 80054f4:	460e      	mov	r6, r1
 80054f6:	d9f4      	bls.n	80054e2 <_printf_i+0x116>
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d10b      	bne.n	8005514 <_printf_i+0x148>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	07de      	lsls	r6, r3, #31
 8005500:	d508      	bpl.n	8005514 <_printf_i+0x148>
 8005502:	6923      	ldr	r3, [r4, #16]
 8005504:	6861      	ldr	r1, [r4, #4]
 8005506:	4299      	cmp	r1, r3
 8005508:	bfde      	ittt	le
 800550a:	2330      	movle	r3, #48	; 0x30
 800550c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005510:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005514:	1b52      	subs	r2, r2, r5
 8005516:	6122      	str	r2, [r4, #16]
 8005518:	f8cd a000 	str.w	sl, [sp]
 800551c:	464b      	mov	r3, r9
 800551e:	aa03      	add	r2, sp, #12
 8005520:	4621      	mov	r1, r4
 8005522:	4640      	mov	r0, r8
 8005524:	f7ff fee4 	bl	80052f0 <_printf_common>
 8005528:	3001      	adds	r0, #1
 800552a:	d14a      	bne.n	80055c2 <_printf_i+0x1f6>
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	b004      	add	sp, #16
 8005532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	f043 0320 	orr.w	r3, r3, #32
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	4833      	ldr	r0, [pc, #204]	; (800560c <_printf_i+0x240>)
 8005540:	2778      	movs	r7, #120	; 0x78
 8005542:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	6829      	ldr	r1, [r5, #0]
 800554a:	061f      	lsls	r7, r3, #24
 800554c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005550:	d402      	bmi.n	8005558 <_printf_i+0x18c>
 8005552:	065f      	lsls	r7, r3, #25
 8005554:	bf48      	it	mi
 8005556:	b2b6      	uxthmi	r6, r6
 8005558:	07df      	lsls	r7, r3, #31
 800555a:	bf48      	it	mi
 800555c:	f043 0320 	orrmi.w	r3, r3, #32
 8005560:	6029      	str	r1, [r5, #0]
 8005562:	bf48      	it	mi
 8005564:	6023      	strmi	r3, [r4, #0]
 8005566:	b91e      	cbnz	r6, 8005570 <_printf_i+0x1a4>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	f023 0320 	bic.w	r3, r3, #32
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	2310      	movs	r3, #16
 8005572:	e7a7      	b.n	80054c4 <_printf_i+0xf8>
 8005574:	4824      	ldr	r0, [pc, #144]	; (8005608 <_printf_i+0x23c>)
 8005576:	e7e4      	b.n	8005542 <_printf_i+0x176>
 8005578:	4615      	mov	r5, r2
 800557a:	e7bd      	b.n	80054f8 <_printf_i+0x12c>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	6826      	ldr	r6, [r4, #0]
 8005580:	6961      	ldr	r1, [r4, #20]
 8005582:	1d18      	adds	r0, r3, #4
 8005584:	6028      	str	r0, [r5, #0]
 8005586:	0635      	lsls	r5, r6, #24
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	d501      	bpl.n	8005590 <_printf_i+0x1c4>
 800558c:	6019      	str	r1, [r3, #0]
 800558e:	e002      	b.n	8005596 <_printf_i+0x1ca>
 8005590:	0670      	lsls	r0, r6, #25
 8005592:	d5fb      	bpl.n	800558c <_printf_i+0x1c0>
 8005594:	8019      	strh	r1, [r3, #0]
 8005596:	2300      	movs	r3, #0
 8005598:	6123      	str	r3, [r4, #16]
 800559a:	4615      	mov	r5, r2
 800559c:	e7bc      	b.n	8005518 <_printf_i+0x14c>
 800559e:	682b      	ldr	r3, [r5, #0]
 80055a0:	1d1a      	adds	r2, r3, #4
 80055a2:	602a      	str	r2, [r5, #0]
 80055a4:	681d      	ldr	r5, [r3, #0]
 80055a6:	6862      	ldr	r2, [r4, #4]
 80055a8:	2100      	movs	r1, #0
 80055aa:	4628      	mov	r0, r5
 80055ac:	f7fa fe18 	bl	80001e0 <memchr>
 80055b0:	b108      	cbz	r0, 80055b6 <_printf_i+0x1ea>
 80055b2:	1b40      	subs	r0, r0, r5
 80055b4:	6060      	str	r0, [r4, #4]
 80055b6:	6863      	ldr	r3, [r4, #4]
 80055b8:	6123      	str	r3, [r4, #16]
 80055ba:	2300      	movs	r3, #0
 80055bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c0:	e7aa      	b.n	8005518 <_printf_i+0x14c>
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	462a      	mov	r2, r5
 80055c6:	4649      	mov	r1, r9
 80055c8:	4640      	mov	r0, r8
 80055ca:	47d0      	blx	sl
 80055cc:	3001      	adds	r0, #1
 80055ce:	d0ad      	beq.n	800552c <_printf_i+0x160>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	079b      	lsls	r3, r3, #30
 80055d4:	d413      	bmi.n	80055fe <_printf_i+0x232>
 80055d6:	68e0      	ldr	r0, [r4, #12]
 80055d8:	9b03      	ldr	r3, [sp, #12]
 80055da:	4298      	cmp	r0, r3
 80055dc:	bfb8      	it	lt
 80055de:	4618      	movlt	r0, r3
 80055e0:	e7a6      	b.n	8005530 <_printf_i+0x164>
 80055e2:	2301      	movs	r3, #1
 80055e4:	4632      	mov	r2, r6
 80055e6:	4649      	mov	r1, r9
 80055e8:	4640      	mov	r0, r8
 80055ea:	47d0      	blx	sl
 80055ec:	3001      	adds	r0, #1
 80055ee:	d09d      	beq.n	800552c <_printf_i+0x160>
 80055f0:	3501      	adds	r5, #1
 80055f2:	68e3      	ldr	r3, [r4, #12]
 80055f4:	9903      	ldr	r1, [sp, #12]
 80055f6:	1a5b      	subs	r3, r3, r1
 80055f8:	42ab      	cmp	r3, r5
 80055fa:	dcf2      	bgt.n	80055e2 <_printf_i+0x216>
 80055fc:	e7eb      	b.n	80055d6 <_printf_i+0x20a>
 80055fe:	2500      	movs	r5, #0
 8005600:	f104 0619 	add.w	r6, r4, #25
 8005604:	e7f5      	b.n	80055f2 <_printf_i+0x226>
 8005606:	bf00      	nop
 8005608:	08005751 	.word	0x08005751
 800560c:	08005762 	.word	0x08005762

08005610 <memmove>:
 8005610:	4288      	cmp	r0, r1
 8005612:	b510      	push	{r4, lr}
 8005614:	eb01 0402 	add.w	r4, r1, r2
 8005618:	d902      	bls.n	8005620 <memmove+0x10>
 800561a:	4284      	cmp	r4, r0
 800561c:	4623      	mov	r3, r4
 800561e:	d807      	bhi.n	8005630 <memmove+0x20>
 8005620:	1e43      	subs	r3, r0, #1
 8005622:	42a1      	cmp	r1, r4
 8005624:	d008      	beq.n	8005638 <memmove+0x28>
 8005626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800562a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800562e:	e7f8      	b.n	8005622 <memmove+0x12>
 8005630:	4402      	add	r2, r0
 8005632:	4601      	mov	r1, r0
 8005634:	428a      	cmp	r2, r1
 8005636:	d100      	bne.n	800563a <memmove+0x2a>
 8005638:	bd10      	pop	{r4, pc}
 800563a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800563e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005642:	e7f7      	b.n	8005634 <memmove+0x24>

08005644 <_sbrk_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4d06      	ldr	r5, [pc, #24]	; (8005660 <_sbrk_r+0x1c>)
 8005648:	2300      	movs	r3, #0
 800564a:	4604      	mov	r4, r0
 800564c:	4608      	mov	r0, r1
 800564e:	602b      	str	r3, [r5, #0]
 8005650:	f7fb fb32 	bl	8000cb8 <_sbrk>
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d102      	bne.n	800565e <_sbrk_r+0x1a>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	b103      	cbz	r3, 800565e <_sbrk_r+0x1a>
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	20000368 	.word	0x20000368

08005664 <memcpy>:
 8005664:	440a      	add	r2, r1
 8005666:	4291      	cmp	r1, r2
 8005668:	f100 33ff 	add.w	r3, r0, #4294967295
 800566c:	d100      	bne.n	8005670 <memcpy+0xc>
 800566e:	4770      	bx	lr
 8005670:	b510      	push	{r4, lr}
 8005672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800567a:	4291      	cmp	r1, r2
 800567c:	d1f9      	bne.n	8005672 <memcpy+0xe>
 800567e:	bd10      	pop	{r4, pc}

08005680 <_realloc_r>:
 8005680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005684:	4680      	mov	r8, r0
 8005686:	4614      	mov	r4, r2
 8005688:	460e      	mov	r6, r1
 800568a:	b921      	cbnz	r1, 8005696 <_realloc_r+0x16>
 800568c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005690:	4611      	mov	r1, r2
 8005692:	f7ff bc49 	b.w	8004f28 <_malloc_r>
 8005696:	b92a      	cbnz	r2, 80056a4 <_realloc_r+0x24>
 8005698:	f7ff fbda 	bl	8004e50 <_free_r>
 800569c:	4625      	mov	r5, r4
 800569e:	4628      	mov	r0, r5
 80056a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a4:	f000 f81b 	bl	80056de <_malloc_usable_size_r>
 80056a8:	4284      	cmp	r4, r0
 80056aa:	4607      	mov	r7, r0
 80056ac:	d802      	bhi.n	80056b4 <_realloc_r+0x34>
 80056ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056b2:	d812      	bhi.n	80056da <_realloc_r+0x5a>
 80056b4:	4621      	mov	r1, r4
 80056b6:	4640      	mov	r0, r8
 80056b8:	f7ff fc36 	bl	8004f28 <_malloc_r>
 80056bc:	4605      	mov	r5, r0
 80056be:	2800      	cmp	r0, #0
 80056c0:	d0ed      	beq.n	800569e <_realloc_r+0x1e>
 80056c2:	42bc      	cmp	r4, r7
 80056c4:	4622      	mov	r2, r4
 80056c6:	4631      	mov	r1, r6
 80056c8:	bf28      	it	cs
 80056ca:	463a      	movcs	r2, r7
 80056cc:	f7ff ffca 	bl	8005664 <memcpy>
 80056d0:	4631      	mov	r1, r6
 80056d2:	4640      	mov	r0, r8
 80056d4:	f7ff fbbc 	bl	8004e50 <_free_r>
 80056d8:	e7e1      	b.n	800569e <_realloc_r+0x1e>
 80056da:	4635      	mov	r5, r6
 80056dc:	e7df      	b.n	800569e <_realloc_r+0x1e>

080056de <_malloc_usable_size_r>:
 80056de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e2:	1f18      	subs	r0, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bfbc      	itt	lt
 80056e8:	580b      	ldrlt	r3, [r1, r0]
 80056ea:	18c0      	addlt	r0, r0, r3
 80056ec:	4770      	bx	lr
	...

080056f0 <_init>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	bf00      	nop
 80056f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f6:	bc08      	pop	{r3}
 80056f8:	469e      	mov	lr, r3
 80056fa:	4770      	bx	lr

080056fc <_fini>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr
