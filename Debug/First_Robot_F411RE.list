
First_Robot_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009128  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  080092c8  080092c8  000192c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009838  08009838  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009840  08009840  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009840  08009840  00019840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009844  08009844  00019844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  200001e4  08009a2c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08009a2c  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010bfc  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d82  00000000  00000000  00030e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  00033bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6d  00000000  00000000  00034ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ab3  00000000  00000000  00035625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a6d  00000000  00000000  0004e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090e06  00000000  00000000  00061b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e58  00000000  00000000  000f294c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f77a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080092b0 	.word	0x080092b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080092b0 	.word	0x080092b0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b9a6 	b.w	8000ff0 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f83c 	bl	8000d28 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_d2lz>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x1c>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff57 	bl	8000bac <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff48 	bl	8000bac <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9e08      	ldr	r6, [sp, #32]
 8000d2e:	460d      	mov	r5, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	460f      	mov	r7, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0xe2>
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	b143      	cbz	r3, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d48:	f1c3 0220 	rsb	r2, r3, #32
 8000d4c:	409f      	lsls	r7, r3
 8000d4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d52:	4317      	orrs	r7, r2
 8000d54:	409c      	lsls	r4, r3
 8000d56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d5a:	fa1f f58c 	uxth.w	r5, ip
 8000d5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d62:	0c22      	lsrs	r2, r4, #16
 8000d64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d6c:	fb01 f005 	mul.w	r0, r1, r5
 8000d70:	4290      	cmp	r0, r2
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d7c:	f080 811c 	bcs.w	8000fb8 <__udivmoddi4+0x290>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f240 8119 	bls.w	8000fb8 <__udivmoddi4+0x290>
 8000d86:	3902      	subs	r1, #2
 8000d88:	4462      	add	r2, ip
 8000d8a:	1a12      	subs	r2, r2, r0
 8000d8c:	b2a4      	uxth	r4, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9a:	fb00 f505 	mul.w	r5, r0, r5
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x90>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000daa:	f080 8107 	bcs.w	8000fbc <__udivmoddi4+0x294>
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	f240 8104 	bls.w	8000fbc <__udivmoddi4+0x294>
 8000db4:	4464      	add	r4, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11e      	cbz	r6, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40dc      	lsrs	r4, r3
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0xbc>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f000 80ed 	beq.w	8000fb2 <__udivmoddi4+0x28a>
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e9c6 0500 	strd	r0, r5, [r6]
 8000dde:	4608      	mov	r0, r1
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d149      	bne.n	8000e80 <__udivmoddi4+0x158>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0xce>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f200 80f8 	bhi.w	8000fe6 <__udivmoddi4+0x2be>
 8000df6:	1a84      	subs	r4, r0, r2
 8000df8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4617      	mov	r7, r2
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d0e2      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	e9c6 4700 	strd	r4, r7, [r6]
 8000e08:	e7df      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xe6>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f382 	clz	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x210>
 8000e18:	1a8a      	subs	r2, r1, r2
 8000e1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	2101      	movs	r1, #1
 8000e24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e28:	fb07 2015 	mls	r0, r7, r5, r2
 8000e2c:	0c22      	lsrs	r2, r4, #16
 8000e2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e32:	fb0e f005 	mul.w	r0, lr, r5
 8000e36:	4290      	cmp	r0, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x124>
 8000e3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x122>
 8000e44:	4290      	cmp	r0, r2
 8000e46:	f200 80cb 	bhi.w	8000fe0 <__udivmoddi4+0x2b8>
 8000e4a:	4645      	mov	r5, r8
 8000e4c:	1a12      	subs	r2, r2, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e54:	fb07 2210 	mls	r2, r7, r0, r2
 8000e58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e60:	45a6      	cmp	lr, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x14e>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x14c>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f200 80bb 	bhi.w	8000fea <__udivmoddi4+0x2c2>
 8000e74:	4610      	mov	r0, r2
 8000e76:	eba4 040e 	sub.w	r4, r4, lr
 8000e7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7e:	e79f      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e80:	f1c1 0720 	rsb	r7, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e92:	fa20 f307 	lsr.w	r3, r0, r7
 8000e96:	40fd      	lsrs	r5, r7
 8000e98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eb0:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb4:	42a5      	cmp	r5, r4
 8000eb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eba:	fa00 f001 	lsl.w	r0, r0, r1
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b0>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec8:	f080 8088 	bcs.w	8000fdc <__udivmoddi4+0x2b4>
 8000ecc:	42a5      	cmp	r5, r4
 8000ece:	f240 8085 	bls.w	8000fdc <__udivmoddi4+0x2b4>
 8000ed2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed6:	4464      	add	r4, ip
 8000ed8:	1b64      	subs	r4, r4, r5
 8000eda:	b29d      	uxth	r5, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eec:	45a6      	cmp	lr, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1da>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef8:	d26c      	bcs.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	d96a      	bls.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f06:	fba3 9502 	umull	r9, r5, r3, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	42ac      	cmp	r4, r5
 8000f10:	46c8      	mov	r8, r9
 8000f12:	46ae      	mov	lr, r5
 8000f14:	d356      	bcc.n	8000fc4 <__udivmoddi4+0x29c>
 8000f16:	d053      	beq.n	8000fc0 <__udivmoddi4+0x298>
 8000f18:	b156      	cbz	r6, 8000f30 <__udivmoddi4+0x208>
 8000f1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f22:	fa04 f707 	lsl.w	r7, r4, r7
 8000f26:	40ca      	lsrs	r2, r1
 8000f28:	40cc      	lsrs	r4, r1
 8000f2a:	4317      	orrs	r7, r2
 8000f2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f30:	4618      	mov	r0, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f38:	f1c3 0120 	rsb	r1, r3, #32
 8000f3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f40:	fa20 f201 	lsr.w	r2, r0, r1
 8000f44:	fa25 f101 	lsr.w	r1, r5, r1
 8000f48:	409d      	lsls	r5, r3
 8000f4a:	432a      	orrs	r2, r5
 8000f4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f50:	fa1f fe8c 	uxth.w	lr, ip
 8000f54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f58:	fb07 1510 	mls	r5, r7, r0, r1
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f62:	fb00 f50e 	mul.w	r5, r0, lr
 8000f66:	428d      	cmp	r5, r1
 8000f68:	fa04 f403 	lsl.w	r4, r4, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x258>
 8000f6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f76:	d22f      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f78:	428d      	cmp	r5, r1
 8000f7a:	d92d      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4461      	add	r1, ip
 8000f80:	1b49      	subs	r1, r1, r5
 8000f82:	b292      	uxth	r2, r2
 8000f84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f88:	fb07 1115 	mls	r1, r7, r5, r1
 8000f8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f90:	fb05 f10e 	mul.w	r1, r5, lr
 8000f94:	4291      	cmp	r1, r2
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x282>
 8000f98:	eb1c 0202 	adds.w	r2, ip, r2
 8000f9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fa0:	d216      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa2:	4291      	cmp	r1, r2
 8000fa4:	d914      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa6:	3d02      	subs	r5, #2
 8000fa8:	4462      	add	r2, ip
 8000faa:	1a52      	subs	r2, r2, r1
 8000fac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fb0:	e738      	b.n	8000e24 <__udivmoddi4+0xfc>
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e708      	b.n	8000dca <__udivmoddi4+0xa2>
 8000fb8:	4639      	mov	r1, r7
 8000fba:	e6e6      	b.n	8000d8a <__udivmoddi4+0x62>
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	e6fb      	b.n	8000db8 <__udivmoddi4+0x90>
 8000fc0:	4548      	cmp	r0, r9
 8000fc2:	d2a9      	bcs.n	8000f18 <__udivmoddi4+0x1f0>
 8000fc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	e7a3      	b.n	8000f18 <__udivmoddi4+0x1f0>
 8000fd0:	4645      	mov	r5, r8
 8000fd2:	e7ea      	b.n	8000faa <__udivmoddi4+0x282>
 8000fd4:	462b      	mov	r3, r5
 8000fd6:	e794      	b.n	8000f02 <__udivmoddi4+0x1da>
 8000fd8:	4640      	mov	r0, r8
 8000fda:	e7d1      	b.n	8000f80 <__udivmoddi4+0x258>
 8000fdc:	46d0      	mov	r8, sl
 8000fde:	e77b      	b.n	8000ed8 <__udivmoddi4+0x1b0>
 8000fe0:	3d02      	subs	r5, #2
 8000fe2:	4462      	add	r2, ip
 8000fe4:	e732      	b.n	8000e4c <__udivmoddi4+0x124>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e70a      	b.n	8000e00 <__udivmoddi4+0xd8>
 8000fea:	4464      	add	r4, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e742      	b.n	8000e76 <__udivmoddi4+0x14e>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <Button_Init>:

extern bool* ptrRobotEnable;
//Init

void Button_Init(Button_t* key, GPIO_TypeDef* Gpio_Port, uint16_t Gpio_Pin, uint32_t TimerDebounce)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	4613      	mov	r3, r2
 8001002:	80fb      	strh	r3, [r7, #6]
	key->State = IDLE;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]

	key->Gpio_Port = Gpio_Port;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	605a      	str	r2, [r3, #4]
	key->Gpio_Pin = Gpio_Pin;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	88fa      	ldrh	r2, [r7, #6]
 8001014:	811a      	strh	r2, [r3, #8]

	key->TimerDebounce = TimerDebounce;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	60da      	str	r2, [r3, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <Button_IdleRoutine>:

void Button_IdleRoutine(Button_t* key)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(key->Gpio_Port, key->Gpio_Pin) == GPIO_PIN_RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	891b      	ldrh	r3, [r3, #8]
 8001038:	4619      	mov	r1, r3
 800103a:	4610      	mov	r0, r2
 800103c:	f002 f906 	bl	800324c <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d107      	bne.n	8001056 <Button_IdleRoutine+0x2e>
	{
		key->State = DEBOUNCE;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
		key->LastTick = HAL_GetTick();
 800104c:	f001 fda6 	bl	8002b9c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	611a      	str	r2, [r3, #16]
	}

}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <Button_DebounceRoutine>:

void Button_DebounceRoutine(Button_t* key)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
	if( (HAL_GetTick() - key->LastTick) > key->TimerDebounce)
 8001066:	f001 fd99 	bl	8002b9c <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	1ad2      	subs	r2, r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	429a      	cmp	r2, r3
 8001078:	d911      	bls.n	800109e <Button_DebounceRoutine+0x40>
	{

		if(HAL_GPIO_ReadPin(key->Gpio_Port, key->Gpio_Pin) == GPIO_PIN_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	891b      	ldrh	r3, [r3, #8]
 8001082:	4619      	mov	r1, r3
 8001084:	4610      	mov	r0, r2
 8001086:	f002 f8e1 	bl	800324c <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d103      	bne.n	8001098 <Button_DebounceRoutine+0x3a>
		{
			key->State = PRESSED;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2202      	movs	r2, #2
 8001094:	701a      	strb	r2, [r3, #0]
		else
		{
			key->State = IDLE;
		}
	}
}
 8001096:	e002      	b.n	800109e <Button_DebounceRoutine+0x40>
			key->State = IDLE;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <Button_PressedRoutine>:

void Button_PressedRoutine(Button_t* key)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(key->Gpio_Port, key->Gpio_Pin) == GPIO_PIN_SET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	891b      	ldrh	r3, [r3, #8]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4610      	mov	r0, r2
 80010bc:	f002 f8c6 	bl	800324c <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d118      	bne.n	80010f8 <Button_PressedRoutine+0x50>
	{
		key->State = IDLE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
		*ptrRobotEnable = !(*ptrRobotEnable);
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <Button_PressedRoutine+0x58>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	bf14      	ite	ne
 80010d6:	2301      	movne	r3, #1
 80010d8:	2300      	moveq	r3, #0
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	f083 0301 	eor.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <Button_PressedRoutine+0x58>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f002 0201 	and.w	r2, r2, #1
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010f0:	2120      	movs	r1, #32
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <Button_PressedRoutine+0x5c>)
 80010f4:	f002 f8db 	bl	80032ae <HAL_GPIO_TogglePin>

	}
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000008 	.word	0x20000008
 8001104:	40020000 	.word	0x40020000

08001108 <Button_Task>:
void Button_Task(Button_t* key)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	switch(key->State)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d00e      	beq.n	8001136 <Button_Task+0x2e>
 8001118:	2b02      	cmp	r3, #2
 800111a:	dc10      	bgt.n	800113e <Button_Task+0x36>
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <Button_Task+0x1e>
 8001120:	2b01      	cmp	r3, #1
 8001122:	d004      	beq.n	800112e <Button_Task+0x26>
		break;
	case PRESSED:
		Button_PressedRoutine(key);
		break;
	}
}
 8001124:	e00b      	b.n	800113e <Button_Task+0x36>
		Button_IdleRoutine(key);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ff7e 	bl	8001028 <Button_IdleRoutine>
		break;
 800112c:	e007      	b.n	800113e <Button_Task+0x36>
		Button_DebounceRoutine(key);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff95 	bl	800105e <Button_DebounceRoutine>
		break;
 8001134:	e003      	b.n	800113e <Button_Task+0x36>
		Button_PressedRoutine(key);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffb6 	bl	80010a8 <Button_PressedRoutine>
		break;
 800113c:	bf00      	nop
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HCSR04p_Init>:

volatile uint16_t Time_uc;

void HCSR04p_Init(HCSR04p_t *hcsr04p,  TIM_HandleTypeDef *timer_trigger, uint32_t Trigger_TimChannel, TIM_HandleTypeDef *timer_echo,
		uint32_t Echo_TimChannel_Start, uint32_t Echo_TimChannel_Stop)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	603b      	str	r3, [r7, #0]
	hcsr04p->htim_trigger = timer_trigger;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	601a      	str	r2, [r3, #0]
	hcsr04p->htim_echo = timer_echo;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	605a      	str	r2, [r3, #4]

	hcsr04p->Trigger_TimChannel = Trigger_TimChannel;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	609a      	str	r2, [r3, #8]

	hcsr04p->Echo_TimChannel_Start = Echo_TimChannel_Start;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	60da      	str	r2, [r3, #12]
	hcsr04p->Echo_TimChannel_Stop = Echo_TimChannel_Stop;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start(hcsr04p->htim_echo);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fd9c 	bl	8003cb4 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(hcsr04p->htim_echo, hcsr04p->Echo_TimChannel_Start);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	4619      	mov	r1, r3
 8001186:	4610      	mov	r0, r2
 8001188:	f002 ff52 	bl	8004030 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start_IT(hcsr04p->htim_echo, hcsr04p->Echo_TimChannel_Stop);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	4619      	mov	r1, r3
 8001196:	4610      	mov	r0, r2
 8001198:	f003 f818 	bl	80041cc <HAL_TIM_IC_Start_IT>

	HAL_TIM_Base_Start(hcsr04p->htim_trigger);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 fd87 	bl	8003cb4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(hcsr04p->htim_trigger, hcsr04p->Trigger_TimChannel);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	4619      	mov	r1, r3
 80011b0:	4610      	mov	r0, r2
 80011b2:	f002 fe33 	bl	8003e1c <HAL_TIM_PWM_Start>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HCSR04p_ReadFloat>:
void HCSR04p_ReadInteger(HCSR04p_t *hcsr04p, uint16_t *Read_distance)
{
	*Read_distance = hcsr04p->Result_us / 58; //in cm
}
void HCSR04p_ReadFloat(HCSR04p_t *hcsr04p, float *Read_distance)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	*Read_distance = (float)hcsr04p->Result_us * HCSR04p_FLOAT_CONST; //in cm
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	8a9b      	ldrh	r3, [r3, #20]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d6:	ee17 0a90 	vmov	r0, s15
 80011da:	f7ff f9cd 	bl	8000578 <__aeabi_f2d>
 80011de:	a30a      	add	r3, pc, #40	; (adr r3, 8001208 <HCSR04p_ReadFloat+0x48>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fa20 	bl	8000628 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fcfc 	bl	8000bec <__aeabi_d2f>
 80011f4:	4602      	mov	r2, r0
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	601a      	str	r2, [r3, #0]
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	f3af 8000 	nop.w
 8001208:	04816f00 	.word	0x04816f00
 800120c:	3f918fc5 	.word	0x3f918fc5

08001210 <HCSR04p_InteruptHandler>:
void HCSR04p_InteruptHandler(HCSR04p_t *hcsr04p)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	hcsr04p->Result_us = (uint16_t)hcsr04p->htim_echo->Instance->CCR2 - (uint16_t)hcsr04p->htim_echo->Instance->CCR1; //pulse width
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001220:	b29a      	uxth	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122a:	b29b      	uxth	r3, r3
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	b29a      	uxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	829a      	strh	r2, [r3, #20]
	*ptrReadDist = true;
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HCSR04p_InteruptHandler+0x38>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
	//HAL_TIM_IC_Start_IT(htim, HCSR04p_STOP_CHANNEL);
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20000004 	.word	0x20000004

0800124c <L298N_MotorInit>:
#include <L298N.h>


void L298N_MotorInit(Motor_t* motor, GPIO_TypeDef* MotorForward_Port, uint16_t MotorForward_Pin,
		GPIO_TypeDef* MotorBackward_Port, uint16_t MotorBackward_Pin)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	80fb      	strh	r3, [r7, #6]
	motor->State = OPERATION;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]

	motor->MotorForward_Port = MotorForward_Port;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	605a      	str	r2, [r3, #4]
	motor->MotorForward_Pin = MotorForward_Pin;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	88fa      	ldrh	r2, [r7, #6]
 800126c:	811a      	strh	r2, [r3, #8]

	motor->MotorBackward_Port = MotorBackward_Port;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	60da      	str	r2, [r3, #12]
	motor->MotorBackward_Pin = MotorBackward_Pin;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8b3a      	ldrh	r2, [r7, #24]
 8001278:	821a      	strh	r2, [r3, #16]
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <L298N_MotorTask>:

void L298N_MotorTask(Motor_t* Leftmotor, Motor_t* Rightmotor, PID_t* PID)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
	switch(Leftmotor->State)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d010      	beq.n	80012bc <L298N_MotorTask+0x36>
 800129a:	2b02      	cmp	r3, #2
 800129c:	dc14      	bgt.n	80012c8 <L298N_MotorTask+0x42>
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <L298N_MotorTask+0x22>
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d005      	beq.n	80012b2 <L298N_MotorTask+0x2c>
		break;
	case MAINTAIN_DISTANCE:
		L298N_MotorHoldDistanceRoutine(Leftmotor, Rightmotor, PID);
		break;
	}
}
 80012a6:	e00f      	b.n	80012c8 <L298N_MotorTask+0x42>
		L298N_MotorOperationRoutine(Leftmotor, Rightmotor);
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f000 f810 	bl	80012d0 <L298N_MotorOperationRoutine>
		break;
 80012b0:	e00a      	b.n	80012c8 <L298N_MotorTask+0x42>
		L298N_MotorChangeOperationRoutine(Leftmotor, Rightmotor);
 80012b2:	68b9      	ldr	r1, [r7, #8]
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f000 f82b 	bl	8001310 <L298N_MotorChangeOperationRoutine>
		break;
 80012ba:	e005      	b.n	80012c8 <L298N_MotorTask+0x42>
		L298N_MotorHoldDistanceRoutine(Leftmotor, Rightmotor, PID);
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f90f 	bl	80014e4 <L298N_MotorHoldDistanceRoutine>
		break;
 80012c6:	bf00      	nop
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <L298N_MotorOperationRoutine>:

void L298N_MotorOperationRoutine(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
	if(*ptrMotor_Action_Flag == true)
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <L298N_MotorOperationRoutine+0x3c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00d      	beq.n	8001300 <L298N_MotorOperationRoutine+0x30>
	{
		Leftmotor->LastState = Leftmotor->State;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	705a      	strb	r2, [r3, #1]
		Rightmotor->LastState = Leftmotor->State;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	781a      	ldrb	r2, [r3, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	705a      	strb	r2, [r3, #1]

		Leftmotor->State = CHANGE_OPERATION;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
		Rightmotor->State = CHANGE_OPERATION;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
	}
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	2000000c 	.word	0x2000000c

08001310 <L298N_MotorChangeOperationRoutine>:

void L298N_MotorChangeOperationRoutine(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	uint8_t State = OPERATION;
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]

	switch(HC05_Command[0])
 800131e:	4b3b      	ldr	r3, [pc, #236]	; (800140c <L298N_MotorChangeOperationRoutine+0xfc>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3b42      	subs	r3, #66	; 0x42
 8001324:	2b14      	cmp	r3, #20
 8001326:	d85e      	bhi.n	80013e6 <L298N_MotorChangeOperationRoutine+0xd6>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <L298N_MotorChangeOperationRoutine+0x20>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	0800138f 	.word	0x0800138f
 8001334:	080013e7 	.word	0x080013e7
 8001338:	080013e7 	.word	0x080013e7
 800133c:	080013e7 	.word	0x080013e7
 8001340:	08001385 	.word	0x08001385
 8001344:	080013e7 	.word	0x080013e7
 8001348:	080013e1 	.word	0x080013e1
 800134c:	080013e7 	.word	0x080013e7
 8001350:	080013e7 	.word	0x080013e7
 8001354:	080013e7 	.word	0x080013e7
 8001358:	08001399 	.word	0x08001399
 800135c:	080013e7 	.word	0x080013e7
 8001360:	080013e7 	.word	0x080013e7
 8001364:	080013e7 	.word	0x080013e7
 8001368:	080013e7 	.word	0x080013e7
 800136c:	080013e7 	.word	0x080013e7
 8001370:	080013a3 	.word	0x080013a3
 8001374:	080013ad 	.word	0x080013ad
 8001378:	080013e7 	.word	0x080013e7
 800137c:	080013e7 	.word	0x080013e7
 8001380:	080013b7 	.word	0x080013b7
	{
	case MOVE_FORWARD:
		Move_Forward(Leftmotor, Rightmotor);
 8001384:	6839      	ldr	r1, [r7, #0]
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f98e 	bl	80016a8 <Move_Forward>
		break;
 800138c:	e02f      	b.n	80013ee <L298N_MotorChangeOperationRoutine+0xde>
	case MOVE_BACKWARD:
		Move_Backward(Leftmotor, Rightmotor);
 800138e:	6839      	ldr	r1, [r7, #0]
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f9c3 	bl	800171c <Move_Backward>
		break;
 8001396:	e02a      	b.n	80013ee <L298N_MotorChangeOperationRoutine+0xde>
	case MOVE_LEFT:
		Move_Left(Leftmotor, Rightmotor);
 8001398:	6839      	ldr	r1, [r7, #0]
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f9f8 	bl	8001790 <Move_Left>
		break;
 80013a0:	e025      	b.n	80013ee <L298N_MotorChangeOperationRoutine+0xde>
	case MOVE_RIGHT:
		Move_Right(Leftmotor, Rightmotor);
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fa2d 	bl	8001804 <Move_Right>
		break;
 80013aa:	e020      	b.n	80013ee <L298N_MotorChangeOperationRoutine+0xde>
	case STOP:
		Move_Stop(Leftmotor, Rightmotor);
 80013ac:	6839      	ldr	r1, [r7, #0]
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fa62 	bl	8001878 <Move_Stop>
		break;
 80013b4:	e01b      	b.n	80013ee <L298N_MotorChangeOperationRoutine+0xde>
	case CHANGE_SPEED:
		uint16_t Speed;
		Speed = Motor_CalculateSpeed(HC05_Command[1],HC05_Command[2], HC05_Command[3]);
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <L298N_MotorChangeOperationRoutine+0xfc>)
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	4a14      	ldr	r2, [pc, #80]	; (800140c <L298N_MotorChangeOperationRoutine+0xfc>)
 80013bc:	7891      	ldrb	r1, [r2, #2]
 80013be:	4a13      	ldr	r2, [pc, #76]	; (800140c <L298N_MotorChangeOperationRoutine+0xfc>)
 80013c0:	78d2      	ldrb	r2, [r2, #3]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f828 	bl	8001418 <Motor_CalculateSpeed>
 80013c8:	4603      	mov	r3, r0
 80013ca:	81bb      	strh	r3, [r7, #12]
		Motor_SetSpeed(Speed, Speed);
 80013cc:	89ba      	ldrh	r2, [r7, #12]
 80013ce:	89bb      	ldrh	r3, [r7, #12]
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fa7a 	bl	80018cc <Motor_SetSpeed>
		State = Leftmotor->LastState;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	785b      	ldrb	r3, [r3, #1]
 80013dc:	73fb      	strb	r3, [r7, #15]
		break;
 80013de:	e006      	b.n	80013ee <L298N_MotorChangeOperationRoutine+0xde>
	case HOLD_DISTANCE:
		State = MAINTAIN_DISTANCE;
 80013e0:	2302      	movs	r3, #2
 80013e2:	73fb      	strb	r3, [r7, #15]
		break;
 80013e4:	e003      	b.n	80013ee <L298N_MotorChangeOperationRoutine+0xde>
	default:
		RB_Flush(&RX_Buffer);
 80013e6:	480a      	ldr	r0, [pc, #40]	; (8001410 <L298N_MotorChangeOperationRoutine+0x100>)
 80013e8:	f000 fb20 	bl	8001a2c <RB_Flush>
		break;
 80013ec:	bf00      	nop
	}

	Leftmotor->State = State;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	701a      	strb	r2, [r3, #0]
	Rightmotor->State = State;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	701a      	strb	r2, [r3, #0]
	*ptrMotor_Action_Flag = false;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <L298N_MotorChangeOperationRoutine+0x104>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000238 	.word	0x20000238
 8001410:	20000284 	.word	0x20000284
 8001414:	2000000c 	.word	0x2000000c

08001418 <Motor_CalculateSpeed>:

uint16_t Motor_CalculateSpeed(uint8_t num_100,uint8_t num_10, uint8_t num_1)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	460b      	mov	r3, r1
 8001424:	71bb      	strb	r3, [r7, #6]
 8001426:	4613      	mov	r3, r2
 8001428:	717b      	strb	r3, [r7, #5]

	uint16_t Speed;
	Speed = (num_1 - '0') + (num_10- '0') * 10 + (num_100- '0') * 100;
 800142a:	797b      	ldrb	r3, [r7, #5]
 800142c:	b29a      	uxth	r2, r3
 800142e:	79bb      	ldrb	r3, [r7, #6]
 8001430:	3b30      	subs	r3, #48	; 0x30
 8001432:	b29b      	uxth	r3, r3
 8001434:	4619      	mov	r1, r3
 8001436:	0089      	lsls	r1, r1, #2
 8001438:	440b      	add	r3, r1
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	b29b      	uxth	r3, r3
 800143e:	4413      	add	r3, r2
 8001440:	b29a      	uxth	r2, r3
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	3b30      	subs	r3, #48	; 0x30
 8001446:	b29b      	uxth	r3, r3
 8001448:	4619      	mov	r1, r3
 800144a:	0089      	lsls	r1, r1, #2
 800144c:	440b      	add	r3, r1
 800144e:	4619      	mov	r1, r3
 8001450:	0088      	lsls	r0, r1, #2
 8001452:	4619      	mov	r1, r3
 8001454:	4603      	mov	r3, r0
 8001456:	440b      	add	r3, r1
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	b29b      	uxth	r3, r3
 800145c:	4413      	add	r3, r2
 800145e:	b29b      	uxth	r3, r3
 8001460:	3b30      	subs	r3, #48	; 0x30
 8001462:	81fb      	strh	r3, [r7, #14]

	return Speed;
 8001464:	89fb      	ldrh	r3, [r7, #14]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <CheckDirection>:


static int8_t CheckDirection(int8_t prev_dir, int8_t dir)
{
 8001472:	b480      	push	{r7}
 8001474:	b085      	sub	sp, #20
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	460a      	mov	r2, r1
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	4613      	mov	r3, r2
 8001480:	71bb      	strb	r3, [r7, #6]
	int8_t result = dir - prev_dir;
 8001482:	79ba      	ldrb	r2, [r7, #6]
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	73fb      	strb	r3, [r7, #15]

	if(result == 0) return 0; //same dir
 800148c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <CheckDirection+0x26>
 8001494:	2300      	movs	r3, #0
 8001496:	e01f      	b.n	80014d8 <CheckDirection+0x66>

	if(dir != 0) //not stay
 8001498:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00c      	beq.n	80014ba <CheckDirection+0x48>
	{
		if(result > 0) return 1; // change direction to forward
 80014a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	dd01      	ble.n	80014ac <CheckDirection+0x3a>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e015      	b.n	80014d8 <CheckDirection+0x66>
		else if(result < 0) return -1;	// change direction to backward
 80014ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da0f      	bge.n	80014d4 <CheckDirection+0x62>
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	e00e      	b.n	80014d8 <CheckDirection+0x66>
	}
	else
	{
		if(result > 0) return -1;  // S - BWD = 1
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	dd02      	ble.n	80014c8 <CheckDirection+0x56>
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e007      	b.n	80014d8 <CheckDirection+0x66>
		else if(result < 0) return 1; // S - FWD = -1
 80014c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	da01      	bge.n	80014d4 <CheckDirection+0x62>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e001      	b.n	80014d8 <CheckDirection+0x66>

	}

	return -2; //error
 80014d4:	f06f 0301 	mvn.w	r3, #1
	// FWD - BWD = 1 - (-1) = 2
	// FWD - S = 1 - 0 = 1
	// BWD - FWD = -1 - 1 = -2
	//BWD - S = -1 - 0 = -1
	// S - FWD = -1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <L298N_MotorHoldDistanceRoutine>:

void L298N_MotorHoldDistanceRoutine(Motor_t* Leftmotor, Motor_t* Rightmotor, PID_t* PID)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	if(*ptrMotor_Action_Flag == true)
 80014f0:	4b68      	ldr	r3, [pc, #416]	; (8001694 <L298N_MotorHoldDistanceRoutine+0x1b0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00d      	beq.n	8001516 <L298N_MotorHoldDistanceRoutine+0x32>
	{
		Leftmotor->LastState = Leftmotor->State;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	781a      	ldrb	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	705a      	strb	r2, [r3, #1]
		Rightmotor->LastState = Leftmotor->State;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	705a      	strb	r2, [r3, #1]

		Leftmotor->State = CHANGE_OPERATION;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
		Rightmotor->State = CHANGE_OPERATION;
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
	}

	if(*ptrReadDist == false) return;
 8001516:	4b60      	ldr	r3, [pc, #384]	; (8001698 <L298N_MotorHoldDistanceRoutine+0x1b4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	f083 0301 	eor.w	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	f040 80b1 	bne.w	800168a <L298N_MotorHoldDistanceRoutine+0x1a6>

	float error;
	int16_t MotorSpeed;
	int8_t direction = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	757b      	strb	r3, [r7, #21]

	error = Distance_f - *ptrHoldDistance_value ;
 800152c:	4b5b      	ldr	r3, [pc, #364]	; (800169c <L298N_MotorHoldDistanceRoutine+0x1b8>)
 800152e:	ed93 7a00 	vldr	s14, [r3]
 8001532:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <L298N_MotorHoldDistanceRoutine+0x1bc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153e:	edc7 7a04 	vstr	s15, [r7, #16]
	PID->error_integral += error;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	ed93 7a02 	vldr	s14, [r3, #8]
 8001548:	edd7 7a04 	vldr	s15, [r7, #16]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	edc3 7a02 	vstr	s15, [r3, #8]
	PID->error_derivative = (PID->previous_error - error);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	ed93 7a01 	vldr	s14, [r3, #4]
 800155c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->previous_error = error;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	605a      	str	r2, [r3, #4]

	MotorSpeed = round(PID->P * error + PID->I * PID->error_integral + PID->D * PID->error_derivative);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	ed93 7a04 	vldr	s14, [r3, #16]
 8001576:	edd7 7a04 	vldr	s15, [r7, #16]
 800157a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	edd3 6a05 	vldr	s13, [r3, #20]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	edd3 7a02 	vldr	s15, [r3, #8]
 800158a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	edd3 6a06 	vldr	s13, [r3, #24]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	edd3 7a03 	vldr	s15, [r3, #12]
 800159e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a6:	ee17 0a90 	vmov	r0, s15
 80015aa:	f7fe ffe5 	bl	8000578 <__aeabi_f2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	ec43 2b10 	vmov	d0, r2, r3
 80015b6:	f007 fe33 	bl	8009220 <round>
 80015ba:	ec53 2b10 	vmov	r2, r3, d0
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff facb 	bl	8000b5c <__aeabi_d2iz>
 80015c6:	4603      	mov	r3, r0
 80015c8:	82fb      	strh	r3, [r7, #22]

	if(MotorSpeed > 0) direction = 1;
 80015ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	dd02      	ble.n	80015d8 <L298N_MotorHoldDistanceRoutine+0xf4>
 80015d2:	2301      	movs	r3, #1
 80015d4:	757b      	strb	r3, [r7, #21]
 80015d6:	e005      	b.n	80015e4 <L298N_MotorHoldDistanceRoutine+0x100>
	else if(MotorSpeed < 0) direction = -1;
 80015d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da01      	bge.n	80015e4 <L298N_MotorHoldDistanceRoutine+0x100>
 80015e0:	23ff      	movs	r3, #255	; 0xff
 80015e2:	757b      	strb	r3, [r7, #21]

	MotorSpeed = abs(MotorSpeed); //set to positive value cuz its value for TIM->CCR
 80015e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bfb8      	it	lt
 80015ec:	425b      	neglt	r3, r3
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	82fb      	strh	r3, [r7, #22]

	if(MotorSpeed > 999) MotorSpeed = 999;
 80015f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015fa:	db03      	blt.n	8001604 <L298N_MotorHoldDistanceRoutine+0x120>
 80015fc:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001600:	82fb      	strh	r3, [r7, #22]
 8001602:	e007      	b.n	8001614 <L298N_MotorHoldDistanceRoutine+0x130>
	else if(MotorSpeed < 500) MotorSpeed = 500; //set 500 bcs thats the minimal speed value for used motors to actually rev with load
 8001604:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001608:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800160c:	da02      	bge.n	8001614 <L298N_MotorHoldDistanceRoutine+0x130>
 800160e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001612:	82fb      	strh	r3, [r7, #22]

	switch(CheckDirection(PID->previous_direction, direction))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f993 3000 	ldrsb.w	r3, [r3]
 800161a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff26 	bl	8001472 <CheckDirection>
 8001626:	4603      	mov	r3, r0
 8001628:	2b01      	cmp	r3, #1
 800162a:	d00d      	beq.n	8001648 <L298N_MotorHoldDistanceRoutine+0x164>
 800162c:	2b01      	cmp	r3, #1
 800162e:	dc21      	bgt.n	8001674 <L298N_MotorHoldDistanceRoutine+0x190>
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d013      	beq.n	800165e <L298N_MotorHoldDistanceRoutine+0x17a>
 8001636:	2b00      	cmp	r3, #0
 8001638:	d11c      	bne.n	8001674 <L298N_MotorHoldDistanceRoutine+0x190>
	{
	case 0:
		Motor_SetSpeed(MotorSpeed, MotorSpeed);
 800163a:	8afb      	ldrh	r3, [r7, #22]
 800163c:	8afa      	ldrh	r2, [r7, #22]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f943 	bl	80018cc <Motor_SetSpeed>
		break;
 8001646:	e018      	b.n	800167a <L298N_MotorHoldDistanceRoutine+0x196>
	case 1:
		Motor_SetSpeed(MotorSpeed, MotorSpeed);
 8001648:	8afb      	ldrh	r3, [r7, #22]
 800164a:	8afa      	ldrh	r2, [r7, #22]
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f000 f93c 	bl	80018cc <Motor_SetSpeed>
		Move_Forward(Leftmotor, Rightmotor);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f826 	bl	80016a8 <Move_Forward>
		break;
 800165c:	e00d      	b.n	800167a <L298N_MotorHoldDistanceRoutine+0x196>
	case -1:
		Motor_SetSpeed(MotorSpeed, MotorSpeed);
 800165e:	8afb      	ldrh	r3, [r7, #22]
 8001660:	8afa      	ldrh	r2, [r7, #22]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f931 	bl	80018cc <Motor_SetSpeed>
		Move_Backward(Leftmotor, Rightmotor);
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 f855 	bl	800171c <Move_Backward>
		break;
 8001672:	e002      	b.n	800167a <L298N_MotorHoldDistanceRoutine+0x196>
	default:
		UartLog("Bug in hold distance function \n\r");
 8001674:	480b      	ldr	r0, [pc, #44]	; (80016a4 <L298N_MotorHoldDistanceRoutine+0x1c0>)
 8001676:	f001 f9eb 	bl	8002a50 <UartLog>
	}

	PID->previous_direction = direction;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7d7a      	ldrb	r2, [r7, #21]
 800167e:	701a      	strb	r2, [r3, #0]
	*ptrReadDist = false;
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <L298N_MotorHoldDistanceRoutine+0x1b4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e000      	b.n	800168c <L298N_MotorHoldDistanceRoutine+0x1a8>
	if(*ptrReadDist == false) return;
 800168a:	bf00      	nop
}
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000000c 	.word	0x2000000c
 8001698:	20000004 	.word	0x20000004
 800169c:	20000200 	.word	0x20000200
 80016a0:	20000000 	.word	0x20000000
 80016a4:	080092c8 	.word	0x080092c8

080016a8 <Move_Forward>:

void Move_Forward(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	uint16_t left_speed, right_speed;

	//Read set speed and change it to 100% for startup
	Motor_Startup(&left_speed, &right_speed);
 80016b2:	f107 020c 	add.w	r2, r7, #12
 80016b6:	f107 030e 	add.w	r3, r7, #14
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f91b 	bl	80018f8 <Motor_Startup>

	HAL_GPIO_WritePin(Leftmotor->MotorForward_Port, Leftmotor->MotorForward_Pin, GPIO_PIN_SET);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6858      	ldr	r0, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	891b      	ldrh	r3, [r3, #8]
 80016ca:	2201      	movs	r2, #1
 80016cc:	4619      	mov	r1, r3
 80016ce:	f001 fdd5 	bl	800327c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Leftmotor->MotorBackward_Port, Leftmotor->MotorBackward_Pin, GPIO_PIN_RESET);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68d8      	ldr	r0, [r3, #12]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	8a1b      	ldrh	r3, [r3, #16]
 80016da:	2200      	movs	r2, #0
 80016dc:	4619      	mov	r1, r3
 80016de:	f001 fdcd 	bl	800327c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Rightmotor->MotorForward_Port, Rightmotor->MotorForward_Pin, GPIO_PIN_SET);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	6858      	ldr	r0, [r3, #4]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	891b      	ldrh	r3, [r3, #8]
 80016ea:	2201      	movs	r2, #1
 80016ec:	4619      	mov	r1, r3
 80016ee:	f001 fdc5 	bl	800327c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rightmotor->MotorBackward_Port, Rightmotor->MotorBackward_Pin, GPIO_PIN_RESET);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	68d8      	ldr	r0, [r3, #12]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	8a1b      	ldrh	r3, [r3, #16]
 80016fa:	2200      	movs	r2, #0
 80016fc:	4619      	mov	r1, r3
 80016fe:	f001 fdbd 	bl	800327c <HAL_GPIO_WritePin>

	//time needed to overcome static friction before changing to set speed
	HAL_Delay(STARTUP_TIME);
 8001702:	2005      	movs	r0, #5
 8001704:	f001 fa56 	bl	8002bb4 <HAL_Delay>

	Motor_SetSpeed(left_speed, right_speed);
 8001708:	89fb      	ldrh	r3, [r7, #14]
 800170a:	89ba      	ldrh	r2, [r7, #12]
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f8dc 	bl	80018cc <Motor_SetSpeed>
}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <Move_Backward>:

void Move_Backward(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
	uint16_t left_speed, right_speed;

	//Read set speed and change it to 100% for startup
	Motor_Startup(&left_speed, &right_speed);
 8001726:	f107 020c 	add.w	r2, r7, #12
 800172a:	f107 030e 	add.w	r3, r7, #14
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f8e1 	bl	80018f8 <Motor_Startup>

	HAL_GPIO_WritePin(Leftmotor->MotorForward_Port, Leftmotor->MotorForward_Pin, GPIO_PIN_RESET);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6858      	ldr	r0, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	891b      	ldrh	r3, [r3, #8]
 800173e:	2200      	movs	r2, #0
 8001740:	4619      	mov	r1, r3
 8001742:	f001 fd9b 	bl	800327c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Leftmotor->MotorBackward_Port, Leftmotor->MotorBackward_Pin, GPIO_PIN_SET);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68d8      	ldr	r0, [r3, #12]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	8a1b      	ldrh	r3, [r3, #16]
 800174e:	2201      	movs	r2, #1
 8001750:	4619      	mov	r1, r3
 8001752:	f001 fd93 	bl	800327c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Rightmotor->MotorForward_Port, Rightmotor->MotorForward_Pin, GPIO_PIN_RESET);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	6858      	ldr	r0, [r3, #4]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	891b      	ldrh	r3, [r3, #8]
 800175e:	2200      	movs	r2, #0
 8001760:	4619      	mov	r1, r3
 8001762:	f001 fd8b 	bl	800327c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rightmotor->MotorBackward_Port, Rightmotor->MotorBackward_Pin, GPIO_PIN_SET);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68d8      	ldr	r0, [r3, #12]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	8a1b      	ldrh	r3, [r3, #16]
 800176e:	2201      	movs	r2, #1
 8001770:	4619      	mov	r1, r3
 8001772:	f001 fd83 	bl	800327c <HAL_GPIO_WritePin>

	//time needed to overcome static friction before changing to set speed
	HAL_Delay(STARTUP_TIME);
 8001776:	2005      	movs	r0, #5
 8001778:	f001 fa1c 	bl	8002bb4 <HAL_Delay>

	Motor_SetSpeed(left_speed, right_speed);
 800177c:	89fb      	ldrh	r3, [r7, #14]
 800177e:	89ba      	ldrh	r2, [r7, #12]
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f8a2 	bl	80018cc <Motor_SetSpeed>
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <Move_Left>:

void Move_Left(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
	uint16_t left_speed, right_speed;

	//Read set speed and change it to 100% for startup
	Motor_Startup(&left_speed, &right_speed);
 800179a:	f107 020c 	add.w	r2, r7, #12
 800179e:	f107 030e 	add.w	r3, r7, #14
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f8a7 	bl	80018f8 <Motor_Startup>

	HAL_GPIO_WritePin(Leftmotor->MotorForward_Port, Leftmotor->MotorForward_Pin, GPIO_PIN_RESET);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6858      	ldr	r0, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	891b      	ldrh	r3, [r3, #8]
 80017b2:	2200      	movs	r2, #0
 80017b4:	4619      	mov	r1, r3
 80017b6:	f001 fd61 	bl	800327c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Leftmotor->MotorBackward_Port, Leftmotor->MotorBackward_Pin, GPIO_PIN_SET);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68d8      	ldr	r0, [r3, #12]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	8a1b      	ldrh	r3, [r3, #16]
 80017c2:	2201      	movs	r2, #1
 80017c4:	4619      	mov	r1, r3
 80017c6:	f001 fd59 	bl	800327c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Rightmotor->MotorForward_Port, Rightmotor->MotorForward_Pin, GPIO_PIN_SET);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6858      	ldr	r0, [r3, #4]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	891b      	ldrh	r3, [r3, #8]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4619      	mov	r1, r3
 80017d6:	f001 fd51 	bl	800327c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rightmotor->MotorBackward_Port, Rightmotor->MotorBackward_Pin, GPIO_PIN_RESET);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	68d8      	ldr	r0, [r3, #12]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	8a1b      	ldrh	r3, [r3, #16]
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	f001 fd49 	bl	800327c <HAL_GPIO_WritePin>

	//time needed to overcome static friction before changing to set speed
	HAL_Delay(STARTUP_TIME);
 80017ea:	2005      	movs	r0, #5
 80017ec:	f001 f9e2 	bl	8002bb4 <HAL_Delay>

	Motor_SetSpeed(left_speed, right_speed);
 80017f0:	89fb      	ldrh	r3, [r7, #14]
 80017f2:	89ba      	ldrh	r2, [r7, #12]
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f868 	bl	80018cc <Motor_SetSpeed>

}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <Move_Right>:

void Move_Right(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	uint16_t left_speed, right_speed;

	//Read set speed and change it to 100% for startup
	Motor_Startup(&left_speed, &right_speed);
 800180e:	f107 020c 	add.w	r2, r7, #12
 8001812:	f107 030e 	add.w	r3, r7, #14
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f000 f86d 	bl	80018f8 <Motor_Startup>

	HAL_GPIO_WritePin(Leftmotor->MotorForward_Port, Leftmotor->MotorForward_Pin, GPIO_PIN_SET);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6858      	ldr	r0, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	891b      	ldrh	r3, [r3, #8]
 8001826:	2201      	movs	r2, #1
 8001828:	4619      	mov	r1, r3
 800182a:	f001 fd27 	bl	800327c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Leftmotor->MotorBackward_Port, Leftmotor->MotorBackward_Pin, GPIO_PIN_RESET);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68d8      	ldr	r0, [r3, #12]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	8a1b      	ldrh	r3, [r3, #16]
 8001836:	2200      	movs	r2, #0
 8001838:	4619      	mov	r1, r3
 800183a:	f001 fd1f 	bl	800327c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Rightmotor->MotorForward_Port, Rightmotor->MotorForward_Pin, GPIO_PIN_RESET);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	6858      	ldr	r0, [r3, #4]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	891b      	ldrh	r3, [r3, #8]
 8001846:	2200      	movs	r2, #0
 8001848:	4619      	mov	r1, r3
 800184a:	f001 fd17 	bl	800327c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rightmotor->MotorBackward_Port, Rightmotor->MotorBackward_Pin, GPIO_PIN_SET);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68d8      	ldr	r0, [r3, #12]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	8a1b      	ldrh	r3, [r3, #16]
 8001856:	2201      	movs	r2, #1
 8001858:	4619      	mov	r1, r3
 800185a:	f001 fd0f 	bl	800327c <HAL_GPIO_WritePin>

	//time needed to overcome static friction before changing to set speed
	HAL_Delay(STARTUP_TIME);
 800185e:	2005      	movs	r0, #5
 8001860:	f001 f9a8 	bl	8002bb4 <HAL_Delay>

	Motor_SetSpeed(left_speed, right_speed);
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	89ba      	ldrh	r2, [r7, #12]
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f82e 	bl	80018cc <Motor_SetSpeed>
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <Move_Stop>:

void Move_Stop(Motor_t* Leftmotor, Motor_t* Rightmotor)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Leftmotor->MotorForward_Port, Leftmotor->MotorForward_Pin, GPIO_PIN_RESET);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6858      	ldr	r0, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	891b      	ldrh	r3, [r3, #8]
 800188a:	2200      	movs	r2, #0
 800188c:	4619      	mov	r1, r3
 800188e:	f001 fcf5 	bl	800327c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Leftmotor->MotorBackward_Port, Leftmotor->MotorBackward_Pin, GPIO_PIN_RESET);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68d8      	ldr	r0, [r3, #12]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	8a1b      	ldrh	r3, [r3, #16]
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	f001 fced 	bl	800327c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Rightmotor->MotorForward_Port, Rightmotor->MotorForward_Pin, GPIO_PIN_RESET);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6858      	ldr	r0, [r3, #4]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	891b      	ldrh	r3, [r3, #8]
 80018aa:	2200      	movs	r2, #0
 80018ac:	4619      	mov	r1, r3
 80018ae:	f001 fce5 	bl	800327c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rightmotor->MotorBackward_Port, Rightmotor->MotorBackward_Pin, GPIO_PIN_RESET);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68d8      	ldr	r0, [r3, #12]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	8a1b      	ldrh	r3, [r3, #16]
 80018ba:	2200      	movs	r2, #0
 80018bc:	4619      	mov	r1, r3
 80018be:	f001 fcdd 	bl	800327c <HAL_GPIO_WritePin>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <Motor_SetSpeed>:

void Motor_SetSpeed(uint16_t left_speed, uint16_t right_speed)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	460a      	mov	r2, r1
 80018d6:	80fb      	strh	r3, [r7, #6]
 80018d8:	4613      	mov	r3, r2
 80018da:	80bb      	strh	r3, [r7, #4]
	//write set speed
	TIM_LEFTMOTOR->TIM_LEFTMOTOR_CHANNEL = left_speed;
 80018dc:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <Motor_SetSpeed+0x28>)
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	6353      	str	r3, [r2, #52]	; 0x34
	TIM_RIGHTMOTOR->TIM_RIGHTMOTOR_CHANNEL = right_speed;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <Motor_SetSpeed+0x28>)
 80018e4:	88bb      	ldrh	r3, [r7, #4]
 80018e6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40000400 	.word	0x40000400

080018f8 <Motor_Startup>:

//Read set speed and change it to 100% for startup
void Motor_Startup(uint16_t* left_speed, uint16_t* right_speed)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
	//Read set speed
	*left_speed = TIM_LEFTMOTOR->TIM_LEFTMOTOR_CHANNEL;
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <Motor_Startup+0x3c>)
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	801a      	strh	r2, [r3, #0]
	*right_speed = TIM_RIGHTMOTOR->TIM_RIGHTMOTOR_CHANNEL;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <Motor_Startup+0x3c>)
 800190e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001910:	b29a      	uxth	r2, r3
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	801a      	strh	r2, [r3, #0]
	//Change speed to 100% for startup to overcome static friction (cheap motors)
	TIM_LEFTMOTOR->TIM_LEFTMOTOR_CHANNEL = FULL_SPEED;
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <Motor_Startup+0x3c>)
 8001918:	f240 32e7 	movw	r2, #999	; 0x3e7
 800191c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_RIGHTMOTOR->TIM_RIGHTMOTOR_CHANNEL = FULL_SPEED;
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <Motor_Startup+0x3c>)
 8001920:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001924:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40000400 	.word	0x40000400

08001938 <PID_Init>:

void PID_Init(PID_t* PID, float P, float I, float D)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	ed87 0a02 	vstr	s0, [r7, #8]
 8001944:	edc7 0a01 	vstr	s1, [r7, #4]
 8001948:	ed87 1a00 	vstr	s2, [r7]
	PID->previous_direction = 0;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]

	PID->previous_error = 0.0;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
	PID->error_integral = 0.0;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
	PID->error_derivative = 0.0;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	60da      	str	r2, [r3, #12]

	PID->P = P;  //#0.005
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	611a      	str	r2, [r3, #16]
	PID->I = I; //#0.0005  0.0001
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	615a      	str	r2, [r3, #20]
	PID->D = D; //# 0.0002
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	619a      	str	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <RB_Write>:


#include "RingBuffer.h"

RB_Status RB_Write(RingBuffer_t* Buff, uint8_t Value)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
	uint8_t HeadTmp = (Buff->Head + 1) % (RING_BUFFER_SIZE); //modulo to avoid accessing element outside of table
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	8c1b      	ldrh	r3, [r3, #32]
 8001998:	3301      	adds	r3, #1
 800199a:	425a      	negs	r2, r3
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	f002 021f 	and.w	r2, r2, #31
 80019a4:	bf58      	it	pl
 80019a6:	4253      	negpl	r3, r2
 80019a8:	73fb      	strb	r3, [r7, #15]

	if(HeadTmp == Buff->Tail)
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d101      	bne.n	80019ba <RB_Write+0x32>
	{
		return RB_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00a      	b.n	80019d0 <RB_Write+0x48>
	}

	Buff->Buffer[Buff->Head] = Value;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	8c1b      	ldrh	r3, [r3, #32]
 80019be:	4619      	mov	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	545a      	strb	r2, [r3, r1]
	Buff->Head = HeadTmp;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	841a      	strh	r2, [r3, #32]

	return RB_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <RB_Read>:

RB_Status RB_Read(RingBuffer_t* Buff, uint8_t* Value)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	if(Buff->Head == Buff->Tail)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	8c1a      	ldrh	r2, [r3, #32]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d101      	bne.n	80019f6 <RB_Read+0x1a>
	{
		return RB_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e014      	b.n	8001a20 <RB_Read+0x44>
	}

	*Value = Buff->Buffer[Buff->Tail];
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80019fa:	461a      	mov	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	5c9a      	ldrb	r2, [r3, r2]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	701a      	strb	r2, [r3, #0]
	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE; //modulo to avoid accessing element outside of table
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001a08:	3301      	adds	r3, #1
 8001a0a:	425a      	negs	r2, r3
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	f002 021f 	and.w	r2, r2, #31
 8001a14:	bf58      	it	pl
 8001a16:	4253      	negpl	r3, r2
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	845a      	strh	r2, [r3, #34]	; 0x22

	return RB_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <RB_Flush>:

void RB_Flush(RingBuffer_t* Buff)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	Buff->Head = 0;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	841a      	strh	r2, [r3, #32]
	Buff->Tail = 0;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <Parser_TakeLine>:

#include <complex_parser.h>


void Parser_TakeLine(RingBuffer_t* Buff, uint8_t* Destination)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	  uint8_t i = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	73fb      	strb	r3, [r7, #15]
	  uint8_t Tmp;

	  do
	  {
		  RB_Read(Buff, &Tmp);
 8001a5a:	f107 030e 	add.w	r3, r7, #14
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ffbb 	bl	80019dc <RB_Read>

		  if(Tmp == END_LINE)
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	2b0a      	cmp	r3, #10
 8001a6a:	d105      	bne.n	8001a78 <Parser_TakeLine+0x2c>
		  {
			  Destination[i] = 0;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	e004      	b.n	8001a82 <Parser_TakeLine+0x36>
		  }
		  else
		  {
			  Destination[i] = Tmp;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	7bba      	ldrb	r2, [r7, #14]
 8001a80:	701a      	strb	r2, [r3, #0]
		  }

		  i++;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	3301      	adds	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]

	  }while(Tmp != END_LINE);
 8001a88:	7bbb      	ldrb	r3, [r7, #14]
 8001a8a:	2b0a      	cmp	r3, #10
 8001a8c:	d1e5      	bne.n	8001a5a <Parser_TakeLine+0xe>
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <Parser_ParseMOVE>:
//	  return Command;
//}


static void Parser_ParseMOVE(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
	uint8_t Command;

	char *ParsePointer = strtok(NULL, ",");
 8001a9e:	491f      	ldr	r1, [pc, #124]	; (8001b1c <Parser_ParseMOVE+0x84>)
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f005 fc75 	bl	8007390 <strtok>
 8001aa6:	6038      	str	r0, [r7, #0]

	if(strlen(ParsePointer) > 0) // not null
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d028      	beq.n	8001b02 <Parser_ParseMOVE+0x6a>
	{
		if(ParsePointer[0] == 'F')
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b46      	cmp	r3, #70	; 0x46
 8001ab6:	d102      	bne.n	8001abe <Parser_ParseMOVE+0x26>
		{
			Command = MOVE_FORWARD;
 8001ab8:	2346      	movs	r3, #70	; 0x46
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	e023      	b.n	8001b06 <Parser_ParseMOVE+0x6e>
		}
		else if(ParsePointer[0] == 'B')
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b42      	cmp	r3, #66	; 0x42
 8001ac4:	d102      	bne.n	8001acc <Parser_ParseMOVE+0x34>
		{
			Command = MOVE_BACKWARD;
 8001ac6:	2342      	movs	r3, #66	; 0x42
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	e01c      	b.n	8001b06 <Parser_ParseMOVE+0x6e>
		}
		else if(ParsePointer[0] == 'L')
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b4c      	cmp	r3, #76	; 0x4c
 8001ad2:	d102      	bne.n	8001ada <Parser_ParseMOVE+0x42>
		{
			Command = MOVE_LEFT;
 8001ad4:	234c      	movs	r3, #76	; 0x4c
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	e015      	b.n	8001b06 <Parser_ParseMOVE+0x6e>
		}
		else if(ParsePointer[0] == 'R')
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b52      	cmp	r3, #82	; 0x52
 8001ae0:	d102      	bne.n	8001ae8 <Parser_ParseMOVE+0x50>
		{
			Command = MOVE_RIGHT;
 8001ae2:	2352      	movs	r3, #82	; 0x52
 8001ae4:	71fb      	strb	r3, [r7, #7]
 8001ae6:	e00e      	b.n	8001b06 <Parser_ParseMOVE+0x6e>
		}
		else if(ParsePointer[0] == 'S')
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b53      	cmp	r3, #83	; 0x53
 8001aee:	d102      	bne.n	8001af6 <Parser_ParseMOVE+0x5e>
		{
			Command = STOP;
 8001af0:	2353      	movs	r3, #83	; 0x53
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	e007      	b.n	8001b06 <Parser_ParseMOVE+0x6e>
		}
		else
		{
			UartLog("Wrong movement command. Available: F, B, L, R or S\r\n");
 8001af6:	480a      	ldr	r0, [pc, #40]	; (8001b20 <Parser_ParseMOVE+0x88>)
 8001af8:	f000 ffaa 	bl	8002a50 <UartLog>
			Command = WRONG_DATA;
 8001afc:	2300      	movs	r3, #0
 8001afe:	71fb      	strb	r3, [r7, #7]
 8001b00:	e001      	b.n	8001b06 <Parser_ParseMOVE+0x6e>
		}
	}
	else
	{
		Command = WRONG_DATA;
 8001b02:	2300      	movs	r3, #0
 8001b04:	71fb      	strb	r3, [r7, #7]
	}

	*ptrMotor_Action_Flag = true;
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <Parser_ParseMOVE+0x8c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
	HC05_Command[0] = Command;
 8001b0e:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <Parser_ParseMOVE+0x90>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	7013      	strb	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	080092ec 	.word	0x080092ec
 8001b20:	080092f0 	.word	0x080092f0
 8001b24:	2000000c 	.word	0x2000000c
 8001b28:	20000238 	.word	0x20000238

08001b2c <Parser_ParseSPEED>:

static void Parser_ParseSPEED(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
	uint8_t Command, len;

	char *ParsePointer = strtok(NULL, ",");
 8001b32:	492a      	ldr	r1, [pc, #168]	; (8001bdc <Parser_ParseSPEED+0xb0>)
 8001b34:	2000      	movs	r0, #0
 8001b36:	f005 fc2b 	bl	8007390 <strtok>
 8001b3a:	60b8      	str	r0, [r7, #8]

	len = strlen(ParsePointer);
 8001b3c:	68b8      	ldr	r0, [r7, #8]
 8001b3e:	f7fe fb59 	bl	80001f4 <strlen>
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]

	if(len > 0) // not null
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d037      	beq.n	8001bbc <Parser_ParseSPEED+0x90>
	{
		if(len > 3) //speed not between 0-999
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d905      	bls.n	8001b5e <Parser_ParseSPEED+0x32>
		{
			UartLog("Wrong speed value. Type value between 0-999\r\n");
 8001b52:	4823      	ldr	r0, [pc, #140]	; (8001be0 <Parser_ParseSPEED+0xb4>)
 8001b54:	f000 ff7c 	bl	8002a50 <UartLog>
			Command = WRONG_DATA;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e033      	b.n	8001bc6 <Parser_ParseSPEED+0x9a>
		}
		else
		{
			if(len == 1)
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d10a      	bne.n	8001b7a <Parser_ParseSPEED+0x4e>
			{
				HC05_Command[1] = '0';
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <Parser_ParseSPEED+0xb8>)
 8001b66:	2230      	movs	r2, #48	; 0x30
 8001b68:	705a      	strb	r2, [r3, #1]
				HC05_Command[2] = '0';
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <Parser_ParseSPEED+0xb8>)
 8001b6c:	2230      	movs	r2, #48	; 0x30
 8001b6e:	709a      	strb	r2, [r3, #2]
				HC05_Command[3] = ParsePointer[0];
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <Parser_ParseSPEED+0xb8>)
 8001b76:	70da      	strb	r2, [r3, #3]
 8001b78:	e01d      	b.n	8001bb6 <Parser_ParseSPEED+0x8a>
			}
			else if(len == 2)
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d10c      	bne.n	8001b9a <Parser_ParseSPEED+0x6e>
			{
				HC05_Command[1] = '0';
 8001b80:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <Parser_ParseSPEED+0xb8>)
 8001b82:	2230      	movs	r2, #48	; 0x30
 8001b84:	705a      	strb	r2, [r3, #1]
				HC05_Command[2] = ParsePointer[0];
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <Parser_ParseSPEED+0xb8>)
 8001b8c:	709a      	strb	r2, [r3, #2]
				HC05_Command[3] = ParsePointer[1];
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3301      	adds	r3, #1
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <Parser_ParseSPEED+0xb8>)
 8001b96:	70da      	strb	r2, [r3, #3]
 8001b98:	e00d      	b.n	8001bb6 <Parser_ParseSPEED+0x8a>
			}
			else
			{
				HC05_Command[1] = ParsePointer[0];
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <Parser_ParseSPEED+0xb8>)
 8001ba0:	705a      	strb	r2, [r3, #1]
				HC05_Command[2] = ParsePointer[1];
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <Parser_ParseSPEED+0xb8>)
 8001baa:	709a      	strb	r2, [r3, #2]
				HC05_Command[3] = ParsePointer[2];
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	3302      	adds	r3, #2
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <Parser_ParseSPEED+0xb8>)
 8001bb4:	70da      	strb	r2, [r3, #3]
			}
			Command = CHANGE_SPEED;
 8001bb6:	2356      	movs	r3, #86	; 0x56
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e004      	b.n	8001bc6 <Parser_ParseSPEED+0x9a>
		}
	}
	else
	{
		UartLog("Wrong speed value. Type value between 0-999\r\n");
 8001bbc:	4808      	ldr	r0, [pc, #32]	; (8001be0 <Parser_ParseSPEED+0xb4>)
 8001bbe:	f000 ff47 	bl	8002a50 <UartLog>
		Command = WRONG_DATA;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
	}

	*ptrMotor_Action_Flag = true;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <Parser_ParseSPEED+0xbc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
	HC05_Command[0] = Command;
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <Parser_ParseSPEED+0xb8>)
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	7013      	strb	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	080092ec 	.word	0x080092ec
 8001be0:	08009328 	.word	0x08009328
 8001be4:	20000238 	.word	0x20000238
 8001be8:	2000000c 	.word	0x2000000c

08001bec <Parser_ParseHOLD>:

static void Parser_ParseHOLD(void)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
	uint8_t Command, len, i;
	char *ParsePointer = strtok(NULL, ",");
 8001bf2:	4927      	ldr	r1, [pc, #156]	; (8001c90 <Parser_ParseHOLD+0xa4>)
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f005 fbcb 	bl	8007390 <strtok>
 8001bfa:	60b8      	str	r0, [r7, #8]

	len = strlen(ParsePointer);
 8001bfc:	68b8      	ldr	r0, [r7, #8]
 8001bfe:	f7fe faf9 	bl	80001f4 <strlen>
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]

	if(len > 0)
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d032      	beq.n	8001c72 <Parser_ParseHOLD+0x86>
	{
		for(i = 0; ParsePointer[i] != 0; i++) //strok puts 0 when the string ends
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73bb      	strb	r3, [r7, #14]
 8001c10:	e01b      	b.n	8001c4a <Parser_ParseHOLD+0x5e>
		{
			if((ParsePointer[i] < '0' || ParsePointer[i] > '9') && ParsePointer[i] != '.')
 8001c12:	7bbb      	ldrb	r3, [r7, #14]
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	4413      	add	r3, r2
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b2f      	cmp	r3, #47	; 0x2f
 8001c1c:	d905      	bls.n	8001c2a <Parser_ParseHOLD+0x3e>
 8001c1e:	7bbb      	ldrb	r3, [r7, #14]
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b39      	cmp	r3, #57	; 0x39
 8001c28:	d90c      	bls.n	8001c44 <Parser_ParseHOLD+0x58>
 8001c2a:	7bbb      	ldrb	r3, [r7, #14]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	4413      	add	r3, r2
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b2e      	cmp	r3, #46	; 0x2e
 8001c34:	d006      	beq.n	8001c44 <Parser_ParseHOLD+0x58>
			{
				UartLog("Wrong distance value. Type numerical value e.g. 1.0, 2.34\r\n");
 8001c36:	4817      	ldr	r0, [pc, #92]	; (8001c94 <Parser_ParseHOLD+0xa8>)
 8001c38:	f000 ff0a 	bl	8002a50 <UartLog>
				HC05_Command[0] = WRONG_DATA;
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <Parser_ParseHOLD+0xac>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
				return;
 8001c42:	e022      	b.n	8001c8a <Parser_ParseHOLD+0x9e>
		for(i = 0; ParsePointer[i] != 0; i++) //strok puts 0 when the string ends
 8001c44:	7bbb      	ldrb	r3, [r7, #14]
 8001c46:	3301      	adds	r3, #1
 8001c48:	73bb      	strb	r3, [r7, #14]
 8001c4a:	7bbb      	ldrb	r3, [r7, #14]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	4413      	add	r3, r2
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1dd      	bne.n	8001c12 <Parser_ParseHOLD+0x26>
			}
		}
		Command = HOLD_DISTANCE;
 8001c56:	2348      	movs	r3, #72	; 0x48
 8001c58:	73fb      	strb	r3, [r7, #15]
		*ptrHoldDistance_value = atof(ParsePointer);
 8001c5a:	68b8      	ldr	r0, [r7, #8]
 8001c5c:	f004 fc5c 	bl	8006518 <atof>
 8001c60:	ec51 0b10 	vmov	r0, r1, d0
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <Parser_ParseHOLD+0xb0>)
 8001c66:	681c      	ldr	r4, [r3, #0]
 8001c68:	f7fe ffc0 	bl	8000bec <__aeabi_d2f>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	6023      	str	r3, [r4, #0]
 8001c70:	e004      	b.n	8001c7c <Parser_ParseHOLD+0x90>
	}
	else
	{
		UartLog("Wrong distance value. Type numerical value e.g. 1.0, 2.34\r\n");
 8001c72:	4808      	ldr	r0, [pc, #32]	; (8001c94 <Parser_ParseHOLD+0xa8>)
 8001c74:	f000 feec 	bl	8002a50 <UartLog>
		Command = WRONG_DATA;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
	}

	*ptrMotor_Action_Flag = true;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <Parser_ParseHOLD+0xb4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
	HC05_Command[0] = Command;
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <Parser_ParseHOLD+0xac>)
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	7013      	strb	r3, [r2, #0]
}
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd90      	pop	{r4, r7, pc}
 8001c90:	080092ec 	.word	0x080092ec
 8001c94:	08009358 	.word	0x08009358
 8001c98:	20000238 	.word	0x20000238
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	2000000c 	.word	0x2000000c

08001ca4 <Parser_ParseENABLE>:

static void Parser_ParseENABLE(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
	uint8_t len;

	char *ParsePointer = strtok(NULL, ",");
 8001caa:	491d      	ldr	r1, [pc, #116]	; (8001d20 <Parser_ParseENABLE+0x7c>)
 8001cac:	2000      	movs	r0, #0
 8001cae:	f005 fb6f 	bl	8007390 <strtok>
 8001cb2:	6078      	str	r0, [r7, #4]

	len = strlen(ParsePointer);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7fe fa9d 	bl	80001f4 <strlen>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	70fb      	strb	r3, [r7, #3]

	if(len > 0)
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d027      	beq.n	8001d14 <Parser_ParseENABLE+0x70>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '1')
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b2f      	cmp	r3, #47	; 0x2f
 8001cca:	d903      	bls.n	8001cd4 <Parser_ParseENABLE+0x30>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b31      	cmp	r3, #49	; 0x31
 8001cd2:	d903      	bls.n	8001cdc <Parser_ParseENABLE+0x38>
		{
			UartLog("Wrong value. Type 1 to enable robot or 0 to disable.\r\n");
 8001cd4:	4813      	ldr	r0, [pc, #76]	; (8001d24 <Parser_ParseENABLE+0x80>)
 8001cd6:	f000 febb 	bl	8002a50 <UartLog>
			return;
 8001cda:	e01e      	b.n	8001d1a <Parser_ParseENABLE+0x76>
		}

		if(ParsePointer[0] == '1')
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b31      	cmp	r3, #49	; 0x31
 8001ce2:	d109      	bne.n	8001cf8 <Parser_ParseENABLE+0x54>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2120      	movs	r1, #32
 8001ce8:	480f      	ldr	r0, [pc, #60]	; (8001d28 <Parser_ParseENABLE+0x84>)
 8001cea:	f001 fac7 	bl	800327c <HAL_GPIO_WritePin>
			*ptrRobotEnable = true;
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <Parser_ParseENABLE+0x88>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
 8001cf6:	e010      	b.n	8001d1a <Parser_ParseENABLE+0x76>
		}
		else if(ParsePointer[0] == '0')
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b30      	cmp	r3, #48	; 0x30
 8001cfe:	d10c      	bne.n	8001d1a <Parser_ParseENABLE+0x76>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2120      	movs	r1, #32
 8001d04:	4808      	ldr	r0, [pc, #32]	; (8001d28 <Parser_ParseENABLE+0x84>)
 8001d06:	f001 fab9 	bl	800327c <HAL_GPIO_WritePin>
			*ptrRobotEnable = false;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <Parser_ParseENABLE+0x88>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e002      	b.n	8001d1a <Parser_ParseENABLE+0x76>
		}
	}
	else
	{
		UartLog("Wrong value. Type 1 to enable robot or 0 to disable.\r\n");
 8001d14:	4803      	ldr	r0, [pc, #12]	; (8001d24 <Parser_ParseENABLE+0x80>)
 8001d16:	f000 fe9b 	bl	8002a50 <UartLog>
	}
}
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	080092ec 	.word	0x080092ec
 8001d24:	08009394 	.word	0x08009394
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	20000008 	.word	0x20000008

08001d30 <Parser_Parse>:

void Parser_Parse(uint8_t* DataToParse)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok((char*)DataToParse, "=");
 8001d38:	4917      	ldr	r1, [pc, #92]	; (8001d98 <Parser_Parse+0x68>)
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f005 fb28 	bl	8007390 <strtok>
 8001d40:	60f8      	str	r0, [r7, #12]


	  if(strcmp("MOVE", ParsePointer) == 0)
 8001d42:	68f9      	ldr	r1, [r7, #12]
 8001d44:	4815      	ldr	r0, [pc, #84]	; (8001d9c <Parser_Parse+0x6c>)
 8001d46:	f7fe fa4b 	bl	80001e0 <strcmp>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <Parser_Parse+0x26>
	  {
		  Parser_ParseMOVE();
 8001d50:	f7ff fea2 	bl	8001a98 <Parser_ParseMOVE>
	  }
	  else if(strcmp("ENABLE", (char*)DataToParse) == 0)
	  {
		  Parser_ParseENABLE();
	  }
}
 8001d54:	e01c      	b.n	8001d90 <Parser_Parse+0x60>
	  else if(strcmp("SPEED", ParsePointer) == 0)
 8001d56:	68f9      	ldr	r1, [r7, #12]
 8001d58:	4811      	ldr	r0, [pc, #68]	; (8001da0 <Parser_Parse+0x70>)
 8001d5a:	f7fe fa41 	bl	80001e0 <strcmp>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <Parser_Parse+0x3a>
		  Parser_ParseSPEED();
 8001d64:	f7ff fee2 	bl	8001b2c <Parser_ParseSPEED>
}
 8001d68:	e012      	b.n	8001d90 <Parser_Parse+0x60>
	  else if(strcmp("HOLD", (char*)DataToParse) == 0)
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	480d      	ldr	r0, [pc, #52]	; (8001da4 <Parser_Parse+0x74>)
 8001d6e:	f7fe fa37 	bl	80001e0 <strcmp>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <Parser_Parse+0x4e>
		  Parser_ParseHOLD();
 8001d78:	f7ff ff38 	bl	8001bec <Parser_ParseHOLD>
}
 8001d7c:	e008      	b.n	8001d90 <Parser_Parse+0x60>
	  else if(strcmp("ENABLE", (char*)DataToParse) == 0)
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4809      	ldr	r0, [pc, #36]	; (8001da8 <Parser_Parse+0x78>)
 8001d82:	f7fe fa2d 	bl	80001e0 <strcmp>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <Parser_Parse+0x60>
		  Parser_ParseENABLE();
 8001d8c:	f7ff ff8a 	bl	8001ca4 <Parser_ParseENABLE>
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	080093cc 	.word	0x080093cc
 8001d9c:	080093d0 	.word	0x080093d0
 8001da0:	080093d8 	.word	0x080093d8
 8001da4:	080093e0 	.word	0x080093e0
 8001da8:	080093e8 	.word	0x080093e8

08001dac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <MX_GPIO_Init+0xf8>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a36      	ldr	r2, [pc, #216]	; (8001ea4 <MX_GPIO_Init+0xf8>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <MX_GPIO_Init+0xf8>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <MX_GPIO_Init+0xf8>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <MX_GPIO_Init+0xf8>)
 8001de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <MX_GPIO_Init+0xf8>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <MX_GPIO_Init+0xf8>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a28      	ldr	r2, [pc, #160]	; (8001ea4 <MX_GPIO_Init+0xf8>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <MX_GPIO_Init+0xf8>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <MX_GPIO_Init+0xf8>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <MX_GPIO_Init+0xf8>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <MX_GPIO_Init+0xf8>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2120      	movs	r1, #32
 8001e36:	481c      	ldr	r0, [pc, #112]	; (8001ea8 <MX_GPIO_Init+0xfc>)
 8001e38:	f001 fa20 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RightMotor_FWD_Pin|RightMotor_BWD_Pin|LeftMotor_FWD_Pin|LeftMotor_BWD_Pin, GPIO_PIN_RESET);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f246 0130 	movw	r1, #24624	; 0x6030
 8001e42:	481a      	ldr	r0, [pc, #104]	; (8001eac <MX_GPIO_Init+0x100>)
 8001e44:	f001 fa1a 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4814      	ldr	r0, [pc, #80]	; (8001eb0 <MX_GPIO_Init+0x104>)
 8001e5e:	f001 f871 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e62:	2320      	movs	r3, #32
 8001e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <MX_GPIO_Init+0xfc>)
 8001e7a:	f001 f863 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RightMotor_FWD_Pin|RightMotor_BWD_Pin|LeftMotor_FWD_Pin|LeftMotor_BWD_Pin;
 8001e7e:	f246 0330 	movw	r3, #24624	; 0x6030
 8001e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <MX_GPIO_Init+0x100>)
 8001e98:	f001 f854 	bl	8002f44 <HAL_GPIO_Init>

}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	; 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	40020800 	.word	0x40020800

08001eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eba:	f000 fe09 	bl	8002ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ebe:	f000 f88b 	bl	8001fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec2:	f7ff ff73 	bl	8001dac <MX_GPIO_Init>
  MX_TIM2_Init();
 8001ec6:	f000 fb91 	bl	80025ec <MX_TIM2_Init>
  MX_TIM1_Init();
 8001eca:	f000 fabb 	bl	8002444 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001ece:	f000 fbd9 	bl	8002684 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001ed2:	f000 fd2b 	bl	800292c <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001ed6:	f000 f8e9 	bl	80020ac <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HCSR04p_Init(&HCSR04p_front, &HCSR04p_TRIGGER_TIMER, HCSR04p_TRIG_CHANNEL, &HCSR04p_ECHO_TIMER, HCSR04p_START_CHANNEL, HCSR04p_STOP_CHANNEL);
 8001eda:	2304      	movs	r3, #4
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <main+0xe0>)
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	492b      	ldr	r1, [pc, #172]	; (8001f94 <main+0xe0>)
 8001ee8:	482b      	ldr	r0, [pc, #172]	; (8001f98 <main+0xe4>)
 8001eea:	f7ff f92c 	bl	8001146 <HCSR04p_Init>

  Button_Init(&BlueKey, B1_GPIO_Port, B1_Pin, 20);
 8001eee:	2314      	movs	r3, #20
 8001ef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef4:	4929      	ldr	r1, [pc, #164]	; (8001f9c <main+0xe8>)
 8001ef6:	482a      	ldr	r0, [pc, #168]	; (8001fa0 <main+0xec>)
 8001ef8:	f7ff f87c 	bl	8000ff4 <Button_Init>

  L298N_MotorInit(&LeftMotor, LeftMotor_FWD_GPIO_Port, LeftMotor_FWD_Pin, LeftMotor_BWD_GPIO_Port, LeftMotor_BWD_Pin);
 8001efc:	2320      	movs	r3, #32
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <main+0xf0>)
 8001f02:	2210      	movs	r2, #16
 8001f04:	4927      	ldr	r1, [pc, #156]	; (8001fa4 <main+0xf0>)
 8001f06:	4828      	ldr	r0, [pc, #160]	; (8001fa8 <main+0xf4>)
 8001f08:	f7ff f9a0 	bl	800124c <L298N_MotorInit>
  L298N_MotorInit(&RightMotor, RightMotor_FWD_GPIO_Port, RightMotor_FWD_Pin, RightMotor_BWD_GPIO_Port, RightMotor_BWD_Pin);
 8001f0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <main+0xf0>)
 8001f14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f18:	4922      	ldr	r1, [pc, #136]	; (8001fa4 <main+0xf0>)
 8001f1a:	4824      	ldr	r0, [pc, #144]	; (8001fac <main+0xf8>)
 8001f1c:	f7ff f996 	bl	800124c <L298N_MotorInit>
  PID_Init(&Distance_PID, 100.0, 1.0, 10.0);
 8001f20:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8001f24:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001f28:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001fb0 <main+0xfc>
 8001f2c:	4821      	ldr	r0, [pc, #132]	; (8001fb4 <main+0x100>)
 8001f2e:	f7ff fd03 	bl	8001938 <PID_Init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Left motor speed
 8001f32:	2100      	movs	r1, #0
 8001f34:	4820      	ldr	r0, [pc, #128]	; (8001fb8 <main+0x104>)
 8001f36:	f001 ff71 	bl	8003e1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //Right motor speed
 8001f3a:	2104      	movs	r1, #4
 8001f3c:	481e      	ldr	r0, [pc, #120]	; (8001fb8 <main+0x104>)
 8001f3e:	f001 ff6d 	bl	8003e1c <HAL_TIM_PWM_Start>

  Status_RX = HAL_UART_Receive_IT(&huart1, &RX_Temp, 1);
 8001f42:	2201      	movs	r2, #1
 8001f44:	491d      	ldr	r1, [pc, #116]	; (8001fbc <main+0x108>)
 8001f46:	481e      	ldr	r0, [pc, #120]	; (8001fc0 <main+0x10c>)
 8001f48:	f003 fb4d 	bl	80055e6 <HAL_UART_Receive_IT>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <main+0x110>)
 8001f52:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Button_Task(&BlueKey); //Check button state
 8001f54:	4812      	ldr	r0, [pc, #72]	; (8001fa0 <main+0xec>)
 8001f56:	f7ff f8d7 	bl	8001108 <Button_Task>

	  if(RX_Lines > 0)
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <main+0x114>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <main+0xc8>
	  {
		  Parser_TakeLine(&RX_Buffer, Recevied_Data);
 8001f62:	491a      	ldr	r1, [pc, #104]	; (8001fcc <main+0x118>)
 8001f64:	481a      	ldr	r0, [pc, #104]	; (8001fd0 <main+0x11c>)
 8001f66:	f7ff fd71 	bl	8001a4c <Parser_TakeLine>
		  RX_Lines--;
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <main+0x114>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <main+0x114>)
 8001f74:	701a      	strb	r2, [r3, #0]
		  Parser_Parse(Recevied_Data);
 8001f76:	4815      	ldr	r0, [pc, #84]	; (8001fcc <main+0x118>)
 8001f78:	f7ff feda 	bl	8001d30 <Parser_Parse>
	  }
	  if(RobotEnable)
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <main+0x120>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <main+0xd6>
	  {
		  Robot_Operation();
 8001f84:	f000 f902 	bl	800218c <Robot_Operation>
 8001f88:	e7e4      	b.n	8001f54 <main+0xa0>
	  }
	  else
	  {
		  Move_Stop(&LeftMotor, &RightMotor);
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <main+0xf8>)
 8001f8c:	4806      	ldr	r0, [pc, #24]	; (8001fa8 <main+0xf4>)
 8001f8e:	f7ff fc73 	bl	8001878 <Move_Stop>
	  Button_Task(&BlueKey); //Check button state
 8001f92:	e7df      	b.n	8001f54 <main+0xa0>
 8001f94:	200002ec 	.word	0x200002ec
 8001f98:	20000204 	.word	0x20000204
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	20000224 	.word	0x20000224
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	2000025c 	.word	0x2000025c
 8001fac:	20000270 	.word	0x20000270
 8001fb0:	42c80000 	.word	0x42c80000
 8001fb4:	200002cc 	.word	0x200002cc
 8001fb8:	2000037c 	.word	0x2000037c
 8001fbc:	200002a8 	.word	0x200002a8
 8001fc0:	200003c4 	.word	0x200003c4
 8001fc4:	20000258 	.word	0x20000258
 8001fc8:	200002a9 	.word	0x200002a9
 8001fcc:	200002ac 	.word	0x200002ac
 8001fd0:	20000284 	.word	0x20000284
 8001fd4:	20000221 	.word	0x20000221

08001fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b094      	sub	sp, #80	; 0x50
 8001fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fde:	f107 0320 	add.w	r3, r7, #32
 8001fe2:	2230      	movs	r2, #48	; 0x30
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f005 f9b7 	bl	800735a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <SystemClock_Config+0xcc>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <SystemClock_Config+0xcc>)
 8002006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200a:	6413      	str	r3, [r2, #64]	; 0x40
 800200c:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <SystemClock_Config+0xcc>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <SystemClock_Config+0xd0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a21      	ldr	r2, [pc, #132]	; (80020a8 <SystemClock_Config+0xd0>)
 8002022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <SystemClock_Config+0xd0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002034:	2302      	movs	r3, #2
 8002036:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002038:	2301      	movs	r3, #1
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800203c:	2310      	movs	r3, #16
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002040:	2302      	movs	r3, #2
 8002042:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002044:	2300      	movs	r3, #0
 8002046:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002048:	2310      	movs	r3, #16
 800204a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800204c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002050:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002052:	2304      	movs	r3, #4
 8002054:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002056:	2304      	movs	r3, #4
 8002058:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800205a:	f107 0320 	add.w	r3, r7, #32
 800205e:	4618      	mov	r0, r3
 8002060:	f001 f940 	bl	80032e4 <HAL_RCC_OscConfig>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800206a:	f000 f8a7 	bl	80021bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800206e:	230f      	movs	r3, #15
 8002070:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002072:	2302      	movs	r3, #2
 8002074:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800207a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800207e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	2102      	movs	r1, #2
 800208a:	4618      	mov	r0, r3
 800208c:	f001 fba2 	bl	80037d4 <HAL_RCC_ClockConfig>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002096:	f000 f891 	bl	80021bc <Error_Handler>
  }
}
 800209a:	bf00      	nop
 800209c:	3750      	adds	r7, #80	; 0x50
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40007000 	.word	0x40007000

080020ac <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	201b      	movs	r0, #27
 80020b6:	f000 fe7c 	bl	8002db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80020ba:	201b      	movs	r0, #27
 80020bc:	f000 fe95 	bl	8002dea <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	2025      	movs	r0, #37	; 0x25
 80020c6:	f000 fe74 	bl	8002db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020ca:	2025      	movs	r0, #37	; 0x25
 80020cc:	f000 fe8d 	bl	8002dea <HAL_NVIC_EnableIRQ>
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	if (htim == HCSR04p_front.htim_echo)
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_TIM_IC_CaptureCallback+0x28>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d106      	bne.n	80020f4 <HAL_TIM_IC_CaptureCallback+0x20>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7f1b      	ldrb	r3, [r3, #28]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d102      	bne.n	80020f4 <HAL_TIM_IC_CaptureCallback+0x20>
		{
			HCSR04p_InteruptHandler(&HCSR04p_front);
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <HAL_TIM_IC_CaptureCallback+0x28>)
 80020f0:	f7ff f88e 	bl	8001210 <HCSR04p_InteruptHandler>
		}
	}
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000204 	.word	0x20000204

08002100 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_UART_RxCpltCallback+0x6c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d127      	bne.n	8002162 <HAL_UART_RxCpltCallback+0x62>
	{
		if(Status_RX != HAL_OK)
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <HAL_UART_RxCpltCallback+0x70>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_UART_RxCpltCallback+0x22>
		{
			UartLog("Error while receiving data\n\r");
 800211a:	4816      	ldr	r0, [pc, #88]	; (8002174 <HAL_UART_RxCpltCallback+0x74>)
 800211c:	f000 fc98 	bl	8002a50 <UartLog>
 8002120:	e016      	b.n	8002150 <HAL_UART_RxCpltCallback+0x50>
		}
		else
		{
			if(RB_OK == RB_Write(&RX_Buffer, RX_Temp))
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_UART_RxCpltCallback+0x78>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	4619      	mov	r1, r3
 8002128:	4814      	ldr	r0, [pc, #80]	; (800217c <HAL_UART_RxCpltCallback+0x7c>)
 800212a:	f7ff fc2d 	bl	8001988 <RB_Write>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10d      	bne.n	8002150 <HAL_UART_RxCpltCallback+0x50>
			{
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002134:	2120      	movs	r1, #32
 8002136:	4812      	ldr	r0, [pc, #72]	; (8002180 <HAL_UART_RxCpltCallback+0x80>)
 8002138:	f001 f8b9 	bl	80032ae <HAL_GPIO_TogglePin>

				if(RX_Temp == END_LINE)
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_UART_RxCpltCallback+0x78>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b0a      	cmp	r3, #10
 8002142:	d105      	bne.n	8002150 <HAL_UART_RxCpltCallback+0x50>
				{
					RX_Lines++;
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_UART_RxCpltCallback+0x84>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_UART_RxCpltCallback+0x84>)
 800214e:	701a      	strb	r2, [r3, #0]

			}

		}

		Status_RX = HAL_UART_Receive_IT(&huart1, &RX_Temp, 1);
 8002150:	2201      	movs	r2, #1
 8002152:	4909      	ldr	r1, [pc, #36]	; (8002178 <HAL_UART_RxCpltCallback+0x78>)
 8002154:	480c      	ldr	r0, [pc, #48]	; (8002188 <HAL_UART_RxCpltCallback+0x88>)
 8002156:	f003 fa46 	bl	80055e6 <HAL_UART_Receive_IT>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <HAL_UART_RxCpltCallback+0x70>)
 8002160:	701a      	strb	r2, [r3, #0]
	}
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40011000 	.word	0x40011000
 8002170:	20000258 	.word	0x20000258
 8002174:	080093f0 	.word	0x080093f0
 8002178:	200002a8 	.word	0x200002a8
 800217c:	20000284 	.word	0x20000284
 8002180:	40020000 	.word	0x40020000
 8002184:	200002a9 	.word	0x200002a9
 8002188:	200003c4 	.word	0x200003c4

0800218c <Robot_Operation>:

void Robot_Operation()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	HCSR04p_ReadFloat(&HCSR04p_front, &Distance_f);
 8002190:	4905      	ldr	r1, [pc, #20]	; (80021a8 <Robot_Operation+0x1c>)
 8002192:	4806      	ldr	r0, [pc, #24]	; (80021ac <Robot_Operation+0x20>)
 8002194:	f7ff f814 	bl	80011c0 <HCSR04p_ReadFloat>
	L298N_MotorTask(&LeftMotor, &RightMotor, &Distance_PID);
 8002198:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <Robot_Operation+0x24>)
 800219a:	4906      	ldr	r1, [pc, #24]	; (80021b4 <Robot_Operation+0x28>)
 800219c:	4806      	ldr	r0, [pc, #24]	; (80021b8 <Robot_Operation+0x2c>)
 800219e:	f7ff f872 	bl	8001286 <L298N_MotorTask>
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000200 	.word	0x20000200
 80021ac:	20000204 	.word	0x20000204
 80021b0:	200002cc 	.word	0x200002cc
 80021b4:	20000270 	.word	0x20000270
 80021b8:	2000025c 	.word	0x2000025c

080021bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c0:	b672      	cpsid	i
}
 80021c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <Error_Handler+0x8>
	...

080021c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_MspInit+0x4c>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <HAL_MspInit+0x4c>)
 80021d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_MspInit+0x4c>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_MspInit+0x4c>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <HAL_MspInit+0x4c>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_MspInit+0x4c>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002206:	2007      	movs	r0, #7
 8002208:	f000 fdc8 	bl	8002d9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800221c:	e7fe      	b.n	800221c <NMI_Handler+0x4>

0800221e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <HardFault_Handler+0x4>

08002224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <MemManage_Handler+0x4>

0800222a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <BusFault_Handler+0x4>

08002230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <UsageFault_Handler+0x4>

08002236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002264:	f000 fc86 	bl	8002b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM1_CC_IRQHandler+0x10>)
 8002272:	f002 f8c5 	bl	8004400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200002ec 	.word	0x200002ec

08002280 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <USART1_IRQHandler+0x10>)
 8002286:	f003 f9df 	bl	8005648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200003c4 	.word	0x200003c4

08002294 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return 1;
 8002298:	2301      	movs	r3, #1
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_kill>:

int _kill(int pid, int sig)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022ae:	f005 f911 	bl	80074d4 <__errno>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2216      	movs	r2, #22
 80022b6:	601a      	str	r2, [r3, #0]
  return -1;
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_exit>:

void _exit (int status)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022cc:	f04f 31ff 	mov.w	r1, #4294967295
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ffe7 	bl	80022a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022d6:	e7fe      	b.n	80022d6 <_exit+0x12>

080022d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	e00a      	b.n	8002300 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ea:	f3af 8000 	nop.w
 80022ee:	4601      	mov	r1, r0
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	60ba      	str	r2, [r7, #8]
 80022f6:	b2ca      	uxtb	r2, r1
 80022f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	3301      	adds	r3, #1
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	dbf0      	blt.n	80022ea <_read+0x12>
  }

  return len;
 8002308:	687b      	ldr	r3, [r7, #4]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	e009      	b.n	8002338 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	60ba      	str	r2, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	3301      	adds	r3, #1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	429a      	cmp	r2, r3
 800233e:	dbf1      	blt.n	8002324 <_write+0x12>
  }
  return len;
 8002340:	687b      	ldr	r3, [r7, #4]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <_close>:

int _close(int file)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002372:	605a      	str	r2, [r3, #4]
  return 0;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <_isatty>:

int _isatty(int file)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <_sbrk+0x5c>)
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <_sbrk+0x60>)
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <_sbrk+0x64>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <_sbrk+0x64>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <_sbrk+0x68>)
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <_sbrk+0x64>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d207      	bcs.n	80023f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e4:	f005 f876 	bl	80074d4 <__errno>
 80023e8:	4603      	mov	r3, r0
 80023ea:	220c      	movs	r2, #12
 80023ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	e009      	b.n	8002408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <_sbrk+0x64>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <_sbrk+0x64>)
 8002404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20020000 	.word	0x20020000
 8002414:	00000400 	.word	0x00000400
 8002418:	200002e8 	.word	0x200002e8
 800241c:	20000558 	.word	0x20000558

08002420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <SystemInit+0x20>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <SystemInit+0x20>)
 800242c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b09a      	sub	sp, #104	; 0x68
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002462:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
 8002480:	615a      	str	r2, [r3, #20]
 8002482:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	2220      	movs	r2, #32
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f004 ff65 	bl	800735a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002490:	4b54      	ldr	r3, [pc, #336]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 8002492:	4a55      	ldr	r2, [pc, #340]	; (80025e8 <MX_TIM1_Init+0x1a4>)
 8002494:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8002496:	4b53      	ldr	r3, [pc, #332]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 8002498:	2254      	movs	r2, #84	; 0x54
 800249a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249c:	4b51      	ldr	r3, [pc, #324]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80024a2:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 80024a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024aa:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024b0:	4b4c      	ldr	r3, [pc, #304]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b6:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024bc:	4849      	ldr	r0, [pc, #292]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 80024be:	f001 fba9 	bl	8003c14 <HAL_TIM_Base_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80024c8:	f7ff fe78 	bl	80021bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024d6:	4619      	mov	r1, r3
 80024d8:	4842      	ldr	r0, [pc, #264]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 80024da:	f002 f9f7 	bl	80048cc <HAL_TIM_ConfigClockSource>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80024e4:	f7ff fe6a 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80024e8:	483e      	ldr	r0, [pc, #248]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 80024ea:	f001 fd47 	bl	8003f7c <HAL_TIM_IC_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80024f4:	f7ff fe62 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024f8:	483a      	ldr	r0, [pc, #232]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 80024fa:	f001 fc35 	bl	8003d68 <HAL_TIM_PWM_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002504:	f7ff fe5a 	bl	80021bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002508:	2300      	movs	r3, #0
 800250a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002510:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002514:	4619      	mov	r1, r3
 8002516:	4833      	ldr	r0, [pc, #204]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 8002518:	f002 feb2 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8002522:	f7ff fe4b 	bl	80021bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002526:	2300      	movs	r3, #0
 8002528:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800252a:	2301      	movs	r3, #1
 800252c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800252e:	2300      	movs	r3, #0
 8002530:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002536:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800253a:	2200      	movs	r2, #0
 800253c:	4619      	mov	r1, r3
 800253e:	4829      	ldr	r0, [pc, #164]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 8002540:	f002 f866 	bl	8004610 <HAL_TIM_IC_ConfigChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800254a:	f7ff fe37 	bl	80021bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800254e:	2302      	movs	r3, #2
 8002550:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002552:	2302      	movs	r3, #2
 8002554:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002556:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800255a:	2204      	movs	r2, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4821      	ldr	r0, [pc, #132]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 8002560:	f002 f856 	bl	8004610 <HAL_TIM_IC_ConfigChannel>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800256a:	f7ff fe27 	bl	80021bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256e:	2360      	movs	r3, #96	; 0x60
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10;
 8002572:	230a      	movs	r3, #10
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002576:	2300      	movs	r3, #0
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800257a:	2300      	movs	r3, #0
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800258a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258e:	2208      	movs	r2, #8
 8002590:	4619      	mov	r1, r3
 8002592:	4814      	ldr	r0, [pc, #80]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 8002594:	f002 f8d8 	bl	8004748 <HAL_TIM_PWM_ConfigChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 800259e:	f7ff fe0d 	bl	80021bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	4619      	mov	r1, r3
 80025c4:	4807      	ldr	r0, [pc, #28]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 80025c6:	f002 fec9 	bl	800535c <HAL_TIMEx_ConfigBreakDeadTime>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 80025d0:	f7ff fdf4 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025d4:	4803      	ldr	r0, [pc, #12]	; (80025e4 <MX_TIM1_Init+0x1a0>)
 80025d6:	f000 f949 	bl	800286c <HAL_TIM_MspPostInit>

}
 80025da:	bf00      	nop
 80025dc:	3768      	adds	r7, #104	; 0x68
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200002ec 	.word	0x200002ec
 80025e8:	40010000 	.word	0x40010000

080025ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002600:	463b      	mov	r3, r7
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <MX_TIM2_Init+0x94>)
 800260a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800260e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <MX_TIM2_Init+0x94>)
 8002612:	2200      	movs	r2, #0
 8002614:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <MX_TIM2_Init+0x94>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <MX_TIM2_Init+0x94>)
 800261e:	f04f 32ff 	mov.w	r2, #4294967295
 8002622:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <MX_TIM2_Init+0x94>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <MX_TIM2_Init+0x94>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002630:	4813      	ldr	r0, [pc, #76]	; (8002680 <MX_TIM2_Init+0x94>)
 8002632:	f001 faef 	bl	8003c14 <HAL_TIM_Base_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800263c:	f7ff fdbe 	bl	80021bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002646:	f107 0308 	add.w	r3, r7, #8
 800264a:	4619      	mov	r1, r3
 800264c:	480c      	ldr	r0, [pc, #48]	; (8002680 <MX_TIM2_Init+0x94>)
 800264e:	f002 f93d 	bl	80048cc <HAL_TIM_ConfigClockSource>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002658:	f7ff fdb0 	bl	80021bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800265c:	2300      	movs	r3, #0
 800265e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002664:	463b      	mov	r3, r7
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	; (8002680 <MX_TIM2_Init+0x94>)
 800266a:	f002 fe09 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002674:	f7ff fda2 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000334 	.word	0x20000334

08002684 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08e      	sub	sp, #56	; 0x38
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002698:	f107 0320 	add.w	r3, r7, #32
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
 80026b0:	615a      	str	r2, [r3, #20]
 80026b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026b4:	4b32      	ldr	r3, [pc, #200]	; (8002780 <MX_TIM3_Init+0xfc>)
 80026b6:	4a33      	ldr	r2, [pc, #204]	; (8002784 <MX_TIM3_Init+0x100>)
 80026b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 80026ba:	4b31      	ldr	r3, [pc, #196]	; (8002780 <MX_TIM3_Init+0xfc>)
 80026bc:	2229      	movs	r2, #41	; 0x29
 80026be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c0:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <MX_TIM3_Init+0xfc>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80026c6:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <MX_TIM3_Init+0xfc>)
 80026c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ce:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <MX_TIM3_Init+0xfc>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d4:	4b2a      	ldr	r3, [pc, #168]	; (8002780 <MX_TIM3_Init+0xfc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026da:	4829      	ldr	r0, [pc, #164]	; (8002780 <MX_TIM3_Init+0xfc>)
 80026dc:	f001 fa9a 	bl	8003c14 <HAL_TIM_Base_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80026e6:	f7ff fd69 	bl	80021bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026f4:	4619      	mov	r1, r3
 80026f6:	4822      	ldr	r0, [pc, #136]	; (8002780 <MX_TIM3_Init+0xfc>)
 80026f8:	f002 f8e8 	bl	80048cc <HAL_TIM_ConfigClockSource>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002702:	f7ff fd5b 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002706:	481e      	ldr	r0, [pc, #120]	; (8002780 <MX_TIM3_Init+0xfc>)
 8002708:	f001 fb2e 	bl	8003d68 <HAL_TIM_PWM_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002712:	f7ff fd53 	bl	80021bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800271e:	f107 0320 	add.w	r3, r7, #32
 8002722:	4619      	mov	r1, r3
 8002724:	4816      	ldr	r0, [pc, #88]	; (8002780 <MX_TIM3_Init+0xfc>)
 8002726:	f002 fdab 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002730:	f7ff fd44 	bl	80021bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002734:	2360      	movs	r3, #96	; 0x60
 8002736:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002738:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800273c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	2200      	movs	r2, #0
 800274a:	4619      	mov	r1, r3
 800274c:	480c      	ldr	r0, [pc, #48]	; (8002780 <MX_TIM3_Init+0xfc>)
 800274e:	f001 fffb 	bl	8004748 <HAL_TIM_PWM_ConfigChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002758:	f7ff fd30 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	2204      	movs	r2, #4
 8002760:	4619      	mov	r1, r3
 8002762:	4807      	ldr	r0, [pc, #28]	; (8002780 <MX_TIM3_Init+0xfc>)
 8002764:	f001 fff0 	bl	8004748 <HAL_TIM_PWM_ConfigChannel>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800276e:	f7ff fd25 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002772:	4803      	ldr	r0, [pc, #12]	; (8002780 <MX_TIM3_Init+0xfc>)
 8002774:	f000 f87a 	bl	800286c <HAL_TIM_MspPostInit>

}
 8002778:	bf00      	nop
 800277a:	3738      	adds	r7, #56	; 0x38
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	2000037c 	.word	0x2000037c
 8002784:	40000400 	.word	0x40000400

08002788 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08c      	sub	sp, #48	; 0x30
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 031c 	add.w	r3, r7, #28
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a2d      	ldr	r2, [pc, #180]	; (800285c <HAL_TIM_Base_MspInit+0xd4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d12d      	bne.n	8002806 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <HAL_TIM_Base_MspInit+0xd8>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	4a2b      	ldr	r2, [pc, #172]	; (8002860 <HAL_TIM_Base_MspInit+0xd8>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ba:	4b29      	ldr	r3, [pc, #164]	; (8002860 <HAL_TIM_Base_MspInit+0xd8>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	4b25      	ldr	r3, [pc, #148]	; (8002860 <HAL_TIM_Base_MspInit+0xd8>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a24      	ldr	r2, [pc, #144]	; (8002860 <HAL_TIM_Base_MspInit+0xd8>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <HAL_TIM_Base_MspInit+0xd8>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HC_SR04p_ECHO_Pin;
 80027e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027f4:	2301      	movs	r3, #1
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HC_SR04p_ECHO_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 031c 	add.w	r3, r7, #28
 80027fc:	4619      	mov	r1, r3
 80027fe:	4819      	ldr	r0, [pc, #100]	; (8002864 <HAL_TIM_Base_MspInit+0xdc>)
 8002800:	f000 fba0 	bl	8002f44 <HAL_GPIO_Init>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002804:	e026      	b.n	8002854 <HAL_TIM_Base_MspInit+0xcc>
  else if(tim_baseHandle->Instance==TIM2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280e:	d10e      	bne.n	800282e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_TIM_Base_MspInit+0xd8>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	4a11      	ldr	r2, [pc, #68]	; (8002860 <HAL_TIM_Base_MspInit+0xd8>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6413      	str	r3, [r2, #64]	; 0x40
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_TIM_Base_MspInit+0xd8>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	693b      	ldr	r3, [r7, #16]
}
 800282c:	e012      	b.n	8002854 <HAL_TIM_Base_MspInit+0xcc>
  else if(tim_baseHandle->Instance==TIM3)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <HAL_TIM_Base_MspInit+0xe0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d10d      	bne.n	8002854 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_TIM_Base_MspInit+0xd8>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	4a07      	ldr	r2, [pc, #28]	; (8002860 <HAL_TIM_Base_MspInit+0xd8>)
 8002842:	f043 0302 	orr.w	r3, r3, #2
 8002846:	6413      	str	r3, [r2, #64]	; 0x40
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_TIM_Base_MspInit+0xd8>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
}
 8002854:	bf00      	nop
 8002856:	3730      	adds	r7, #48	; 0x30
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40010000 	.word	0x40010000
 8002860:	40023800 	.word	0x40023800
 8002864:	40020000 	.word	0x40020000
 8002868:	40000400 	.word	0x40000400

0800286c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a24      	ldr	r2, [pc, #144]	; (800291c <HAL_TIM_MspPostInit+0xb0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d11f      	bne.n	80028ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <HAL_TIM_MspPostInit+0xb4>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a22      	ldr	r2, [pc, #136]	; (8002920 <HAL_TIM_MspPostInit+0xb4>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b20      	ldr	r3, [pc, #128]	; (8002920 <HAL_TIM_MspPostInit+0xb4>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HC_SR04p_TRIG_Pin;
 80028aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028bc:	2301      	movs	r3, #1
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HC_SR04p_TRIG_GPIO_Port, &GPIO_InitStruct);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	4817      	ldr	r0, [pc, #92]	; (8002924 <HAL_TIM_MspPostInit+0xb8>)
 80028c8:	f000 fb3c 	bl	8002f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028cc:	e022      	b.n	8002914 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a15      	ldr	r2, [pc, #84]	; (8002928 <HAL_TIM_MspPostInit+0xbc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d11d      	bne.n	8002914 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_TIM_MspPostInit+0xb4>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <HAL_TIM_MspPostInit+0xb4>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6313      	str	r3, [r2, #48]	; 0x30
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_TIM_MspPostInit+0xb4>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightMotor_PWM_Pin|LeftMotor_PWM_Pin;
 80028f4:	23c0      	movs	r3, #192	; 0xc0
 80028f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002904:	2302      	movs	r3, #2
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4619      	mov	r1, r3
 800290e:	4805      	ldr	r0, [pc, #20]	; (8002924 <HAL_TIM_MspPostInit+0xb8>)
 8002910:	f000 fb18 	bl	8002f44 <HAL_GPIO_Init>
}
 8002914:	bf00      	nop
 8002916:	3728      	adds	r7, #40	; 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40010000 	.word	0x40010000
 8002920:	40023800 	.word	0x40023800
 8002924:	40020000 	.word	0x40020000
 8002928:	40000400 	.word	0x40000400

0800292c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <MX_USART1_UART_Init+0x4c>)
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <MX_USART1_UART_Init+0x50>)
 8002934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <MX_USART1_UART_Init+0x4c>)
 8002938:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800293c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <MX_USART1_UART_Init+0x4c>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <MX_USART1_UART_Init+0x4c>)
 8002946:	2200      	movs	r2, #0
 8002948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800294a:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <MX_USART1_UART_Init+0x4c>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <MX_USART1_UART_Init+0x4c>)
 8002952:	220c      	movs	r2, #12
 8002954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <MX_USART1_UART_Init+0x4c>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <MX_USART1_UART_Init+0x4c>)
 800295e:	2200      	movs	r2, #0
 8002960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002962:	4805      	ldr	r0, [pc, #20]	; (8002978 <MX_USART1_UART_Init+0x4c>)
 8002964:	f002 fd60 	bl	8005428 <HAL_UART_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800296e:	f7ff fc25 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200003c4 	.word	0x200003c4
 800297c:	40011000 	.word	0x40011000

08002980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a28      	ldr	r2, [pc, #160]	; (8002a40 <HAL_UART_MspInit+0xc0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d14a      	bne.n	8002a38 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <HAL_UART_MspInit+0xc4>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a26      	ldr	r2, [pc, #152]	; (8002a44 <HAL_UART_MspInit+0xc4>)
 80029ac:	f043 0310 	orr.w	r3, r3, #16
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_UART_MspInit+0xc4>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_UART_MspInit+0xc4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <HAL_UART_MspInit+0xc4>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_UART_MspInit+0xc4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_UART_MspInit+0xc4>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a18      	ldr	r2, [pc, #96]	; (8002a44 <HAL_UART_MspInit+0xc4>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_UART_MspInit+0xc4>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = HC05_TX_Pin;
 80029f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a04:	2303      	movs	r3, #3
 8002a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a08:	2307      	movs	r3, #7
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HC05_TX_GPIO_Port, &GPIO_InitStruct);
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	4619      	mov	r1, r3
 8002a12:	480d      	ldr	r0, [pc, #52]	; (8002a48 <HAL_UART_MspInit+0xc8>)
 8002a14:	f000 fa96 	bl	8002f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HC05_RX_Pin;
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a28:	2307      	movs	r3, #7
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HC05_RX_GPIO_Port, &GPIO_InitStruct);
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	4619      	mov	r1, r3
 8002a32:	4806      	ldr	r0, [pc, #24]	; (8002a4c <HAL_UART_MspInit+0xcc>)
 8002a34:	f000 fa86 	bl	8002f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a38:	bf00      	nop
 8002a3a:	3728      	adds	r7, #40	; 0x28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40011000 	.word	0x40011000
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40020000 	.word	0x40020000
 8002a4c:	40020400 	.word	0x40020400

08002a50 <UartLog>:
 *      Author: akun1
 */
#include "utils.h"

void UartLog(char* Message)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)Message, strlen(Message), 1000);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7fd fbcb 	bl	80001f4 <strlen>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4803      	ldr	r0, [pc, #12]	; (8002a78 <UartLog+0x28>)
 8002a6a:	f002 fd2a 	bl	80054c2 <HAL_UART_Transmit>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200003c4 	.word	0x200003c4

08002a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a80:	480d      	ldr	r0, [pc, #52]	; (8002ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a82:	490e      	ldr	r1, [pc, #56]	; (8002abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a84:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a88:	e002      	b.n	8002a90 <LoopCopyDataInit>

08002a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8e:	3304      	adds	r3, #4

08002a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a94:	d3f9      	bcc.n	8002a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a96:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a98:	4c0b      	ldr	r4, [pc, #44]	; (8002ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a9c:	e001      	b.n	8002aa2 <LoopFillZerobss>

08002a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa0:	3204      	adds	r2, #4

08002aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa4:	d3fb      	bcc.n	8002a9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aa6:	f7ff fcbb 	bl	8002420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aaa:	f004 fd19 	bl	80074e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aae:	f7ff fa01 	bl	8001eb4 <main>
  bx  lr    
 8002ab2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ab4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002abc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002ac0:	08009848 	.word	0x08009848
  ldr r2, =_sbss
 8002ac4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002ac8:	20000558 	.word	0x20000558

08002acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002acc:	e7fe      	b.n	8002acc <ADC_IRQHandler>
	...

08002ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <HAL_Init+0x40>)
 8002ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_Init+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <HAL_Init+0x40>)
 8002ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_Init+0x40>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <HAL_Init+0x40>)
 8002af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af8:	2003      	movs	r0, #3
 8002afa:	f000 f94f 	bl	8002d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f000 f808 	bl	8002b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b04:	f7ff fb60 	bl	80021c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023c00 	.word	0x40023c00

08002b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_InitTick+0x54>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_InitTick+0x58>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f967 	bl	8002e06 <HAL_SYSTICK_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e00e      	b.n	8002b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b0f      	cmp	r3, #15
 8002b46:	d80a      	bhi.n	8002b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	f000 f92f 	bl	8002db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b54:	4a06      	ldr	r2, [pc, #24]	; (8002b70 <HAL_InitTick+0x5c>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e000      	b.n	8002b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000010 	.word	0x20000010
 8002b6c:	20000018 	.word	0x20000018
 8002b70:	20000014 	.word	0x20000014

08002b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_IncTick+0x20>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_IncTick+0x24>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <HAL_IncTick+0x24>)
 8002b86:	6013      	str	r3, [r2, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000018 	.word	0x20000018
 8002b98:	20000408 	.word	0x20000408

08002b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_GetTick+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000408 	.word	0x20000408

08002bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bbc:	f7ff ffee 	bl	8002b9c <HAL_GetTick>
 8002bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d005      	beq.n	8002bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <HAL_Delay+0x44>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bda:	bf00      	nop
 8002bdc:	f7ff ffde 	bl	8002b9c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d8f7      	bhi.n	8002bdc <HAL_Delay+0x28>
  {
  }
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000018 	.word	0x20000018

08002bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2e:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	60d3      	str	r3, [r2, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <__NVIC_GetPriorityGrouping+0x18>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	f003 0307 	and.w	r3, r3, #7
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	db0b      	blt.n	8002c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	4907      	ldr	r1, [pc, #28]	; (8002c98 <__NVIC_EnableIRQ+0x38>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	2001      	movs	r0, #1
 8002c82:	fa00 f202 	lsl.w	r2, r0, r2
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000e100 	.word	0xe000e100

08002c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	db0a      	blt.n	8002cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	490c      	ldr	r1, [pc, #48]	; (8002ce8 <__NVIC_SetPriority+0x4c>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	0112      	lsls	r2, r2, #4
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc4:	e00a      	b.n	8002cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4908      	ldr	r1, [pc, #32]	; (8002cec <__NVIC_SetPriority+0x50>)
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	3b04      	subs	r3, #4
 8002cd4:	0112      	lsls	r2, r2, #4
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	440b      	add	r3, r1
 8002cda:	761a      	strb	r2, [r3, #24]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000e100 	.word	0xe000e100
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	; 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f1c3 0307 	rsb	r3, r3, #7
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	bf28      	it	cs
 8002d0e:	2304      	movcs	r3, #4
 8002d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d902      	bls.n	8002d20 <NVIC_EncodePriority+0x30>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3b03      	subs	r3, #3
 8002d1e:	e000      	b.n	8002d22 <NVIC_EncodePriority+0x32>
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	f04f 32ff 	mov.w	r2, #4294967295
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	401a      	ands	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	43d9      	mvns	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	4313      	orrs	r3, r2
         );
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d68:	d301      	bcc.n	8002d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00f      	b.n	8002d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <SysTick_Config+0x40>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d76:	210f      	movs	r1, #15
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f7ff ff8e 	bl	8002c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <SysTick_Config+0x40>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <SysTick_Config+0x40>)
 8002d88:	2207      	movs	r2, #7
 8002d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	e000e010 	.word	0xe000e010

08002d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ff29 	bl	8002bfc <__NVIC_SetPriorityGrouping>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc4:	f7ff ff3e 	bl	8002c44 <__NVIC_GetPriorityGrouping>
 8002dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	6978      	ldr	r0, [r7, #20]
 8002dd0:	f7ff ff8e 	bl	8002cf0 <NVIC_EncodePriority>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff5d 	bl	8002c9c <__NVIC_SetPriority>
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff31 	bl	8002c60 <__NVIC_EnableIRQ>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff ffa2 	bl	8002d58 <SysTick_Config>
 8002e14:	4603      	mov	r3, r0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff feb6 	bl	8002b9c <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d008      	beq.n	8002e50 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e052      	b.n	8002ef6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0216 	bic.w	r2, r2, #22
 8002e5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e6e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d103      	bne.n	8002e80 <HAL_DMA_Abort+0x62>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0208 	bic.w	r2, r2, #8
 8002e8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea0:	e013      	b.n	8002eca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ea2:	f7ff fe7b 	bl	8002b9c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b05      	cmp	r3, #5
 8002eae:	d90c      	bls.n	8002eca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e015      	b.n	8002ef6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e4      	bne.n	8002ea2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	223f      	movs	r2, #63	; 0x3f
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d004      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2280      	movs	r2, #128	; 0x80
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e00c      	b.n	8002f36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2205      	movs	r2, #5
 8002f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0201 	bic.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	e159      	b.n	8003214 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f60:	2201      	movs	r2, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	f040 8148 	bne.w	800320e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d005      	beq.n	8002f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d130      	bne.n	8002ff8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fcc:	2201      	movs	r2, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 0201 	and.w	r2, r3, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	2b03      	cmp	r3, #3
 8003002:	d017      	beq.n	8003034 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d123      	bne.n	8003088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	08da      	lsrs	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3208      	adds	r2, #8
 8003048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	220f      	movs	r2, #15
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	08da      	lsrs	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3208      	adds	r2, #8
 8003082:	69b9      	ldr	r1, [r7, #24]
 8003084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0203 	and.w	r2, r3, #3
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80a2 	beq.w	800320e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b57      	ldr	r3, [pc, #348]	; (800322c <HAL_GPIO_Init+0x2e8>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	4a56      	ldr	r2, [pc, #344]	; (800322c <HAL_GPIO_Init+0x2e8>)
 80030d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d8:	6453      	str	r3, [r2, #68]	; 0x44
 80030da:	4b54      	ldr	r3, [pc, #336]	; (800322c <HAL_GPIO_Init+0x2e8>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030e6:	4a52      	ldr	r2, [pc, #328]	; (8003230 <HAL_GPIO_Init+0x2ec>)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	3302      	adds	r3, #2
 80030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	220f      	movs	r2, #15
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a49      	ldr	r2, [pc, #292]	; (8003234 <HAL_GPIO_Init+0x2f0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d019      	beq.n	8003146 <HAL_GPIO_Init+0x202>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a48      	ldr	r2, [pc, #288]	; (8003238 <HAL_GPIO_Init+0x2f4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <HAL_GPIO_Init+0x1fe>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a47      	ldr	r2, [pc, #284]	; (800323c <HAL_GPIO_Init+0x2f8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00d      	beq.n	800313e <HAL_GPIO_Init+0x1fa>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a46      	ldr	r2, [pc, #280]	; (8003240 <HAL_GPIO_Init+0x2fc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d007      	beq.n	800313a <HAL_GPIO_Init+0x1f6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a45      	ldr	r2, [pc, #276]	; (8003244 <HAL_GPIO_Init+0x300>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_GPIO_Init+0x1f2>
 8003132:	2304      	movs	r3, #4
 8003134:	e008      	b.n	8003148 <HAL_GPIO_Init+0x204>
 8003136:	2307      	movs	r3, #7
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x204>
 800313a:	2303      	movs	r3, #3
 800313c:	e004      	b.n	8003148 <HAL_GPIO_Init+0x204>
 800313e:	2302      	movs	r3, #2
 8003140:	e002      	b.n	8003148 <HAL_GPIO_Init+0x204>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_GPIO_Init+0x204>
 8003146:	2300      	movs	r3, #0
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	f002 0203 	and.w	r2, r2, #3
 800314e:	0092      	lsls	r2, r2, #2
 8003150:	4093      	lsls	r3, r2
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003158:	4935      	ldr	r1, [pc, #212]	; (8003230 <HAL_GPIO_Init+0x2ec>)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3302      	adds	r3, #2
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003166:	4b38      	ldr	r3, [pc, #224]	; (8003248 <HAL_GPIO_Init+0x304>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800318a:	4a2f      	ldr	r2, [pc, #188]	; (8003248 <HAL_GPIO_Init+0x304>)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003190:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_GPIO_Init+0x304>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b4:	4a24      	ldr	r2, [pc, #144]	; (8003248 <HAL_GPIO_Init+0x304>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ba:	4b23      	ldr	r3, [pc, #140]	; (8003248 <HAL_GPIO_Init+0x304>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031de:	4a1a      	ldr	r2, [pc, #104]	; (8003248 <HAL_GPIO_Init+0x304>)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e4:	4b18      	ldr	r3, [pc, #96]	; (8003248 <HAL_GPIO_Init+0x304>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003208:	4a0f      	ldr	r2, [pc, #60]	; (8003248 <HAL_GPIO_Init+0x304>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3301      	adds	r3, #1
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	f67f aea2 	bls.w	8002f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	3724      	adds	r7, #36	; 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	40013800 	.word	0x40013800
 8003234:	40020000 	.word	0x40020000
 8003238:	40020400 	.word	0x40020400
 800323c:	40020800 	.word	0x40020800
 8003240:	40020c00 	.word	0x40020c00
 8003244:	40021000 	.word	0x40021000
 8003248:	40013c00 	.word	0x40013c00

0800324c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	887b      	ldrh	r3, [r7, #2]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e001      	b.n	800326e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
 8003288:	4613      	mov	r3, r2
 800328a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800328c:	787b      	ldrb	r3, [r7, #1]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003298:	e003      	b.n	80032a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	619a      	str	r2, [r3, #24]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b085      	sub	sp, #20
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032c0:	887a      	ldrh	r2, [r7, #2]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4013      	ands	r3, r2
 80032c6:	041a      	lsls	r2, r3, #16
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	43d9      	mvns	r1, r3
 80032cc:	887b      	ldrh	r3, [r7, #2]
 80032ce:	400b      	ands	r3, r1
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	619a      	str	r2, [r3, #24]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e267      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d075      	beq.n	80033ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003302:	4b88      	ldr	r3, [pc, #544]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b04      	cmp	r3, #4
 800330c:	d00c      	beq.n	8003328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330e:	4b85      	ldr	r3, [pc, #532]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003316:	2b08      	cmp	r3, #8
 8003318:	d112      	bne.n	8003340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331a:	4b82      	ldr	r3, [pc, #520]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003326:	d10b      	bne.n	8003340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	4b7e      	ldr	r3, [pc, #504]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d05b      	beq.n	80033ec <HAL_RCC_OscConfig+0x108>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d157      	bne.n	80033ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e242      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003348:	d106      	bne.n	8003358 <HAL_RCC_OscConfig+0x74>
 800334a:	4b76      	ldr	r3, [pc, #472]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a75      	ldr	r2, [pc, #468]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e01d      	b.n	8003394 <HAL_RCC_OscConfig+0xb0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x98>
 8003362:	4b70      	ldr	r3, [pc, #448]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6f      	ldr	r2, [pc, #444]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b6d      	ldr	r3, [pc, #436]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6c      	ldr	r2, [pc, #432]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0xb0>
 800337c:	4b69      	ldr	r3, [pc, #420]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a68      	ldr	r2, [pc, #416]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b66      	ldr	r3, [pc, #408]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a65      	ldr	r2, [pc, #404]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7ff fbfe 	bl	8002b9c <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7ff fbfa 	bl	8002b9c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e207      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b5b      	ldr	r3, [pc, #364]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0xc0>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7ff fbea 	bl	8002b9c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7ff fbe6 	bl	8002b9c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e1f3      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	4b51      	ldr	r3, [pc, #324]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0xe8>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d063      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033fa:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003406:	4b47      	ldr	r3, [pc, #284]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800340e:	2b08      	cmp	r3, #8
 8003410:	d11c      	bne.n	800344c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003412:	4b44      	ldr	r3, [pc, #272]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d116      	bne.n	800344c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	4b41      	ldr	r3, [pc, #260]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x152>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e1c7      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4937      	ldr	r1, [pc, #220]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	e03a      	b.n	80034c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003454:	4b34      	ldr	r3, [pc, #208]	; (8003528 <HAL_RCC_OscConfig+0x244>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7ff fb9f 	bl	8002b9c <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003462:	f7ff fb9b 	bl	8002b9c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e1a8      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	4b2b      	ldr	r3, [pc, #172]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4b28      	ldr	r3, [pc, #160]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4925      	ldr	r1, [pc, #148]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003496:	4b24      	ldr	r3, [pc, #144]	; (8003528 <HAL_RCC_OscConfig+0x244>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7ff fb7e 	bl	8002b9c <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a4:	f7ff fb7a 	bl	8002b9c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e187      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d036      	beq.n	800353c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <HAL_RCC_OscConfig+0x248>)
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7ff fb5e 	bl	8002b9c <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e4:	f7ff fb5a 	bl	8002b9c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e167      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 80034f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x200>
 8003502:	e01b      	b.n	800353c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_RCC_OscConfig+0x248>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350a:	f7ff fb47 	bl	8002b9c <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	e00e      	b.n	8003530 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003512:	f7ff fb43 	bl	8002b9c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d907      	bls.n	8003530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e150      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
 8003524:	40023800 	.word	0x40023800
 8003528:	42470000 	.word	0x42470000
 800352c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003530:	4b88      	ldr	r3, [pc, #544]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ea      	bne.n	8003512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8097 	beq.w	8003678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354e:	4b81      	ldr	r3, [pc, #516]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10f      	bne.n	800357a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	4b7d      	ldr	r3, [pc, #500]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a7c      	ldr	r2, [pc, #496]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	4b7a      	ldr	r3, [pc, #488]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357a:	4b77      	ldr	r3, [pc, #476]	; (8003758 <HAL_RCC_OscConfig+0x474>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d118      	bne.n	80035b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003586:	4b74      	ldr	r3, [pc, #464]	; (8003758 <HAL_RCC_OscConfig+0x474>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a73      	ldr	r2, [pc, #460]	; (8003758 <HAL_RCC_OscConfig+0x474>)
 800358c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003592:	f7ff fb03 	bl	8002b9c <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359a:	f7ff faff 	bl	8002b9c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e10c      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	4b6a      	ldr	r3, [pc, #424]	; (8003758 <HAL_RCC_OscConfig+0x474>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x2ea>
 80035c0:	4b64      	ldr	r3, [pc, #400]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	4a63      	ldr	r2, [pc, #396]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6713      	str	r3, [r2, #112]	; 0x70
 80035cc:	e01c      	b.n	8003608 <HAL_RCC_OscConfig+0x324>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x30c>
 80035d6:	4b5f      	ldr	r3, [pc, #380]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	4a5e      	ldr	r2, [pc, #376]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	6713      	str	r3, [r2, #112]	; 0x70
 80035e2:	4b5c      	ldr	r3, [pc, #368]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	4a5b      	ldr	r2, [pc, #364]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70
 80035ee:	e00b      	b.n	8003608 <HAL_RCC_OscConfig+0x324>
 80035f0:	4b58      	ldr	r3, [pc, #352]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	4a57      	ldr	r2, [pc, #348]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	6713      	str	r3, [r2, #112]	; 0x70
 80035fc:	4b55      	ldr	r3, [pc, #340]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	4a54      	ldr	r2, [pc, #336]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003602:	f023 0304 	bic.w	r3, r3, #4
 8003606:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d015      	beq.n	800363c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7ff fac4 	bl	8002b9c <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7ff fac0 	bl	8002b9c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0cb      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	4b49      	ldr	r3, [pc, #292]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ee      	beq.n	8003618 <HAL_RCC_OscConfig+0x334>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363c:	f7ff faae 	bl	8002b9c <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7ff faaa 	bl	8002b9c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e0b5      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365a:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ee      	bne.n	8003644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366c:	4b39      	ldr	r3, [pc, #228]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	4a38      	ldr	r2, [pc, #224]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003676:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a1 	beq.w	80037c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003682:	4b34      	ldr	r3, [pc, #208]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b08      	cmp	r3, #8
 800368c:	d05c      	beq.n	8003748 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d141      	bne.n	800371a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003696:	4b31      	ldr	r3, [pc, #196]	; (800375c <HAL_RCC_OscConfig+0x478>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7ff fa7e 	bl	8002b9c <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a4:	f7ff fa7a 	bl	8002b9c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e087      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b6:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	019b      	lsls	r3, r3, #6
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	3b01      	subs	r3, #1
 80036dc:	041b      	lsls	r3, r3, #16
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	491b      	ldr	r1, [pc, #108]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_RCC_OscConfig+0x478>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7ff fa53 	bl	8002b9c <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fa:	f7ff fa4f 	bl	8002b9c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e05c      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x416>
 8003718:	e054      	b.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <HAL_RCC_OscConfig+0x478>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7ff fa3c 	bl	8002b9c <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003728:	f7ff fa38 	bl	8002b9c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e045      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x444>
 8003746:	e03d      	b.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d107      	bne.n	8003760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e038      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
 8003754:	40023800 	.word	0x40023800
 8003758:	40007000 	.word	0x40007000
 800375c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003760:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <HAL_RCC_OscConfig+0x4ec>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d028      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d121      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d11a      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003790:	4013      	ands	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003798:	4293      	cmp	r3, r2
 800379a:	d111      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	3b01      	subs	r3, #1
 80037aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800

080037d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0cc      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b68      	ldr	r3, [pc, #416]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d90c      	bls.n	8003810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b65      	ldr	r3, [pc, #404]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b63      	ldr	r3, [pc, #396]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b8      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003828:	4b59      	ldr	r3, [pc, #356]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a58      	ldr	r2, [pc, #352]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003840:	4b53      	ldr	r3, [pc, #332]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a52      	ldr	r2, [pc, #328]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800384a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b50      	ldr	r3, [pc, #320]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	494d      	ldr	r1, [pc, #308]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d044      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b47      	ldr	r3, [pc, #284]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d119      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d003      	beq.n	8003892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388e:	2b03      	cmp	r3, #3
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	4b3f      	ldr	r3, [pc, #252]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e06f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b3b      	ldr	r3, [pc, #236]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e067      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b37      	ldr	r3, [pc, #220]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4934      	ldr	r1, [pc, #208]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7ff f96a 	bl	8002b9c <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7ff f966 	bl	8002b9c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e04f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b25      	ldr	r3, [pc, #148]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d20c      	bcs.n	800391c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b22      	ldr	r3, [pc, #136]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e032      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4916      	ldr	r1, [pc, #88]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	490e      	ldr	r1, [pc, #56]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800395a:	f000 f821 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800395e:	4602      	mov	r2, r0
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	490a      	ldr	r1, [pc, #40]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	5ccb      	ldrb	r3, [r1, r3]
 800396e:	fa22 f303 	lsr.w	r3, r2, r3
 8003972:	4a09      	ldr	r2, [pc, #36]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff f8ca 	bl	8002b14 <HAL_InitTick>

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023c00 	.word	0x40023c00
 8003990:	40023800 	.word	0x40023800
 8003994:	08009410 	.word	0x08009410
 8003998:	20000010 	.word	0x20000010
 800399c:	20000014 	.word	0x20000014

080039a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a4:	b094      	sub	sp, #80	; 0x50
 80039a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	647b      	str	r3, [r7, #68]	; 0x44
 80039ac:	2300      	movs	r3, #0
 80039ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b0:	2300      	movs	r3, #0
 80039b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b8:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d00d      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x40>
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	f200 80e1 	bhi.w	8003b8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x34>
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d003      	beq.n	80039da <HAL_RCC_GetSysClockFreq+0x3a>
 80039d2:	e0db      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b73      	ldr	r3, [pc, #460]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039d8:	e0db      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039da:	4b73      	ldr	r3, [pc, #460]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x208>)
 80039dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039de:	e0d8      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e0:	4b6f      	ldr	r3, [pc, #444]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ea:	4b6d      	ldr	r3, [pc, #436]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d063      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f6:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	2200      	movs	r2, #0
 80039fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a08:	633b      	str	r3, [r7, #48]	; 0x30
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a12:	4622      	mov	r2, r4
 8003a14:	462b      	mov	r3, r5
 8003a16:	f04f 0000 	mov.w	r0, #0
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	0159      	lsls	r1, r3, #5
 8003a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a24:	0150      	lsls	r0, r2, #5
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	1a51      	subs	r1, r2, r1
 8003a2e:	6139      	str	r1, [r7, #16]
 8003a30:	4629      	mov	r1, r5
 8003a32:	eb63 0301 	sbc.w	r3, r3, r1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a44:	4659      	mov	r1, fp
 8003a46:	018b      	lsls	r3, r1, #6
 8003a48:	4651      	mov	r1, sl
 8003a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a4e:	4651      	mov	r1, sl
 8003a50:	018a      	lsls	r2, r1, #6
 8003a52:	4651      	mov	r1, sl
 8003a54:	ebb2 0801 	subs.w	r8, r2, r1
 8003a58:	4659      	mov	r1, fp
 8003a5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a72:	4690      	mov	r8, r2
 8003a74:	4699      	mov	r9, r3
 8003a76:	4623      	mov	r3, r4
 8003a78:	eb18 0303 	adds.w	r3, r8, r3
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	462b      	mov	r3, r5
 8003a80:	eb49 0303 	adc.w	r3, r9, r3
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a92:	4629      	mov	r1, r5
 8003a94:	024b      	lsls	r3, r1, #9
 8003a96:	4621      	mov	r1, r4
 8003a98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	024a      	lsls	r2, r1, #9
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ab0:	f7fd f8ec 	bl	8000c8c <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4613      	mov	r3, r2
 8003aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003abc:	e058      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abe:	4b38      	ldr	r3, [pc, #224]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	4611      	mov	r1, r2
 8003aca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ace:	623b      	str	r3, [r7, #32]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ad8:	4642      	mov	r2, r8
 8003ada:	464b      	mov	r3, r9
 8003adc:	f04f 0000 	mov.w	r0, #0
 8003ae0:	f04f 0100 	mov.w	r1, #0
 8003ae4:	0159      	lsls	r1, r3, #5
 8003ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aea:	0150      	lsls	r0, r2, #5
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4641      	mov	r1, r8
 8003af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003af6:	4649      	mov	r1, r9
 8003af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b10:	ebb2 040a 	subs.w	r4, r2, sl
 8003b14:	eb63 050b 	sbc.w	r5, r3, fp
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	00eb      	lsls	r3, r5, #3
 8003b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b26:	00e2      	lsls	r2, r4, #3
 8003b28:	4614      	mov	r4, r2
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	4643      	mov	r3, r8
 8003b2e:	18e3      	adds	r3, r4, r3
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	464b      	mov	r3, r9
 8003b34:	eb45 0303 	adc.w	r3, r5, r3
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b46:	4629      	mov	r1, r5
 8003b48:	028b      	lsls	r3, r1, #10
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b50:	4621      	mov	r1, r4
 8003b52:	028a      	lsls	r2, r1, #10
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	61fa      	str	r2, [r7, #28]
 8003b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b64:	f7fd f892 	bl	8000c8c <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b8a:	e002      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3750      	adds	r7, #80	; 0x50
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	00f42400 	.word	0x00f42400
 8003ba8:	007a1200 	.word	0x007a1200

08003bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000010 	.word	0x20000010

08003bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bc8:	f7ff fff0 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	0a9b      	lsrs	r3, r3, #10
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4903      	ldr	r1, [pc, #12]	; (8003be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40023800 	.word	0x40023800
 8003be8:	08009420 	.word	0x08009420

08003bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bf0:	f7ff ffdc 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0b5b      	lsrs	r3, r3, #13
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4903      	ldr	r1, [pc, #12]	; (8003c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	08009420 	.word	0x08009420

08003c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e041      	b.n	8003caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fe fda4 	bl	8002788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f000 ff2a 	bl	8004aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d001      	beq.n	8003ccc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e03c      	b.n	8003d46 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_TIM_Base_Start+0xa0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d018      	beq.n	8003d10 <HAL_TIM_Base_Start+0x5c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce6:	d013      	beq.n	8003d10 <HAL_TIM_Base_Start+0x5c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1a      	ldr	r2, [pc, #104]	; (8003d58 <HAL_TIM_Base_Start+0xa4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00e      	beq.n	8003d10 <HAL_TIM_Base_Start+0x5c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_TIM_Base_Start+0xa8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d009      	beq.n	8003d10 <HAL_TIM_Base_Start+0x5c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a17      	ldr	r2, [pc, #92]	; (8003d60 <HAL_TIM_Base_Start+0xac>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d004      	beq.n	8003d10 <HAL_TIM_Base_Start+0x5c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a16      	ldr	r2, [pc, #88]	; (8003d64 <HAL_TIM_Base_Start+0xb0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d111      	bne.n	8003d34 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d010      	beq.n	8003d44 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0201 	orr.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d32:	e007      	b.n	8003d44 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40010000 	.word	0x40010000
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40000800 	.word	0x40000800
 8003d60:	40000c00 	.word	0x40000c00
 8003d64:	40014000 	.word	0x40014000

08003d68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e041      	b.n	8003dfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f839 	bl	8003e06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f000 fe80 	bl	8004aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <HAL_TIM_PWM_Start+0x24>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	bf14      	ite	ne
 8003e38:	2301      	movne	r3, #1
 8003e3a:	2300      	moveq	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	e022      	b.n	8003e86 <HAL_TIM_PWM_Start+0x6a>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d109      	bne.n	8003e5a <HAL_TIM_PWM_Start+0x3e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	bf14      	ite	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	e015      	b.n	8003e86 <HAL_TIM_PWM_Start+0x6a>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d109      	bne.n	8003e74 <HAL_TIM_PWM_Start+0x58>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	bf14      	ite	ne
 8003e6c:	2301      	movne	r3, #1
 8003e6e:	2300      	moveq	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	e008      	b.n	8003e86 <HAL_TIM_PWM_Start+0x6a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e068      	b.n	8003f60 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <HAL_TIM_PWM_Start+0x82>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e9c:	e013      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xaa>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Start+0x92>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eac:	e00b      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xaa>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_PWM_Start+0xa2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ebc:	e003      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xaa>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	6839      	ldr	r1, [r7, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f001 f9b0 	bl	8005234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <HAL_TIM_PWM_Start+0x14c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d107      	bne.n	8003eee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <HAL_TIM_PWM_Start+0x14c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x10e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f00:	d013      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x10e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a19      	ldr	r2, [pc, #100]	; (8003f6c <HAL_TIM_PWM_Start+0x150>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x10e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a17      	ldr	r2, [pc, #92]	; (8003f70 <HAL_TIM_PWM_Start+0x154>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x10e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a16      	ldr	r2, [pc, #88]	; (8003f74 <HAL_TIM_PWM_Start+0x158>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x10e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <HAL_TIM_PWM_Start+0x15c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d111      	bne.n	8003f4e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b06      	cmp	r3, #6
 8003f3a:	d010      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4c:	e007      	b.n	8003f5e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0201 	orr.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800
 8003f74:	40000c00 	.word	0x40000c00
 8003f78:	40014000 	.word	0x40014000

08003f7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e041      	b.n	8004012 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f839 	bl	800401a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f000 fd76 	bl	8004aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <HAL_TIM_IC_Start+0x1a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004046:	b2db      	uxtb	r3, r3
 8004048:	e013      	b.n	8004072 <HAL_TIM_IC_Start+0x42>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d104      	bne.n	800405a <HAL_TIM_IC_Start+0x2a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004056:	b2db      	uxtb	r3, r3
 8004058:	e00b      	b.n	8004072 <HAL_TIM_IC_Start+0x42>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b08      	cmp	r3, #8
 800405e:	d104      	bne.n	800406a <HAL_TIM_IC_Start+0x3a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004066:	b2db      	uxtb	r3, r3
 8004068:	e003      	b.n	8004072 <HAL_TIM_IC_Start+0x42>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004070:	b2db      	uxtb	r3, r3
 8004072:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d104      	bne.n	8004084 <HAL_TIM_IC_Start+0x54>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e013      	b.n	80040ac <HAL_TIM_IC_Start+0x7c>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b04      	cmp	r3, #4
 8004088:	d104      	bne.n	8004094 <HAL_TIM_IC_Start+0x64>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e00b      	b.n	80040ac <HAL_TIM_IC_Start+0x7c>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b08      	cmp	r3, #8
 8004098:	d104      	bne.n	80040a4 <HAL_TIM_IC_Start+0x74>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e003      	b.n	80040ac <HAL_TIM_IC_Start+0x7c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d102      	bne.n	80040ba <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80040b4:	7bbb      	ldrb	r3, [r7, #14]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d001      	beq.n	80040be <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e077      	b.n	80041ae <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_IC_Start+0x9e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040cc:	e013      	b.n	80040f6 <HAL_TIM_IC_Start+0xc6>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d104      	bne.n	80040de <HAL_TIM_IC_Start+0xae>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040dc:	e00b      	b.n	80040f6 <HAL_TIM_IC_Start+0xc6>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_IC_Start+0xbe>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ec:	e003      	b.n	80040f6 <HAL_TIM_IC_Start+0xc6>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <HAL_TIM_IC_Start+0xd6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004104:	e013      	b.n	800412e <HAL_TIM_IC_Start+0xfe>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b04      	cmp	r3, #4
 800410a:	d104      	bne.n	8004116 <HAL_TIM_IC_Start+0xe6>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004114:	e00b      	b.n	800412e <HAL_TIM_IC_Start+0xfe>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d104      	bne.n	8004126 <HAL_TIM_IC_Start+0xf6>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004124:	e003      	b.n	800412e <HAL_TIM_IC_Start+0xfe>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2202      	movs	r2, #2
 800412a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2201      	movs	r2, #1
 8004134:	6839      	ldr	r1, [r7, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f001 f87c 	bl	8005234 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <HAL_TIM_IC_Start+0x188>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d018      	beq.n	8004178 <HAL_TIM_IC_Start+0x148>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414e:	d013      	beq.n	8004178 <HAL_TIM_IC_Start+0x148>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a19      	ldr	r2, [pc, #100]	; (80041bc <HAL_TIM_IC_Start+0x18c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_TIM_IC_Start+0x148>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <HAL_TIM_IC_Start+0x190>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_TIM_IC_Start+0x148>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <HAL_TIM_IC_Start+0x194>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_TIM_IC_Start+0x148>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a15      	ldr	r2, [pc, #84]	; (80041c8 <HAL_TIM_IC_Start+0x198>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d111      	bne.n	800419c <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b06      	cmp	r3, #6
 8004188:	d010      	beq.n	80041ac <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419a:	e007      	b.n	80041ac <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40000800 	.word	0x40000800
 80041c4:	40000c00 	.word	0x40000c00
 80041c8:	40014000 	.word	0x40014000

080041cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d104      	bne.n	80041ea <HAL_TIM_IC_Start_IT+0x1e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	e013      	b.n	8004212 <HAL_TIM_IC_Start_IT+0x46>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d104      	bne.n	80041fa <HAL_TIM_IC_Start_IT+0x2e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	e00b      	b.n	8004212 <HAL_TIM_IC_Start_IT+0x46>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d104      	bne.n	800420a <HAL_TIM_IC_Start_IT+0x3e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004206:	b2db      	uxtb	r3, r3
 8004208:	e003      	b.n	8004212 <HAL_TIM_IC_Start_IT+0x46>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004210:	b2db      	uxtb	r3, r3
 8004212:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d104      	bne.n	8004224 <HAL_TIM_IC_Start_IT+0x58>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004220:	b2db      	uxtb	r3, r3
 8004222:	e013      	b.n	800424c <HAL_TIM_IC_Start_IT+0x80>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b04      	cmp	r3, #4
 8004228:	d104      	bne.n	8004234 <HAL_TIM_IC_Start_IT+0x68>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004230:	b2db      	uxtb	r3, r3
 8004232:	e00b      	b.n	800424c <HAL_TIM_IC_Start_IT+0x80>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b08      	cmp	r3, #8
 8004238:	d104      	bne.n	8004244 <HAL_TIM_IC_Start_IT+0x78>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e003      	b.n	800424c <HAL_TIM_IC_Start_IT+0x80>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800424a:	b2db      	uxtb	r3, r3
 800424c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800424e:	7bbb      	ldrb	r3, [r7, #14]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d102      	bne.n	800425a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004254:	7b7b      	ldrb	r3, [r7, #13]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d001      	beq.n	800425e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e0c2      	b.n	80043e4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <HAL_TIM_IC_Start_IT+0xa2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800426c:	e013      	b.n	8004296 <HAL_TIM_IC_Start_IT+0xca>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d104      	bne.n	800427e <HAL_TIM_IC_Start_IT+0xb2>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800427c:	e00b      	b.n	8004296 <HAL_TIM_IC_Start_IT+0xca>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d104      	bne.n	800428e <HAL_TIM_IC_Start_IT+0xc2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800428c:	e003      	b.n	8004296 <HAL_TIM_IC_Start_IT+0xca>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d104      	bne.n	80042a6 <HAL_TIM_IC_Start_IT+0xda>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042a4:	e013      	b.n	80042ce <HAL_TIM_IC_Start_IT+0x102>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d104      	bne.n	80042b6 <HAL_TIM_IC_Start_IT+0xea>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042b4:	e00b      	b.n	80042ce <HAL_TIM_IC_Start_IT+0x102>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d104      	bne.n	80042c6 <HAL_TIM_IC_Start_IT+0xfa>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c4:	e003      	b.n	80042ce <HAL_TIM_IC_Start_IT+0x102>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2202      	movs	r2, #2
 80042ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b0c      	cmp	r3, #12
 80042d2:	d841      	bhi.n	8004358 <HAL_TIM_IC_Start_IT+0x18c>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <HAL_TIM_IC_Start_IT+0x110>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	08004311 	.word	0x08004311
 80042e0:	08004359 	.word	0x08004359
 80042e4:	08004359 	.word	0x08004359
 80042e8:	08004359 	.word	0x08004359
 80042ec:	08004323 	.word	0x08004323
 80042f0:	08004359 	.word	0x08004359
 80042f4:	08004359 	.word	0x08004359
 80042f8:	08004359 	.word	0x08004359
 80042fc:	08004335 	.word	0x08004335
 8004300:	08004359 	.word	0x08004359
 8004304:	08004359 	.word	0x08004359
 8004308:	08004359 	.word	0x08004359
 800430c:	08004347 	.word	0x08004347
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0202 	orr.w	r2, r2, #2
 800431e:	60da      	str	r2, [r3, #12]
      break;
 8004320:	e01d      	b.n	800435e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0204 	orr.w	r2, r2, #4
 8004330:	60da      	str	r2, [r3, #12]
      break;
 8004332:	e014      	b.n	800435e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0208 	orr.w	r2, r2, #8
 8004342:	60da      	str	r2, [r3, #12]
      break;
 8004344:	e00b      	b.n	800435e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0210 	orr.w	r2, r2, #16
 8004354:	60da      	str	r2, [r3, #12]
      break;
 8004356:	e002      	b.n	800435e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      break;
 800435c:	bf00      	nop
  }

  if (status == HAL_OK)
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d13e      	bne.n	80043e2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2201      	movs	r2, #1
 800436a:	6839      	ldr	r1, [r7, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f000 ff61 	bl	8005234 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1d      	ldr	r2, [pc, #116]	; (80043ec <HAL_TIM_IC_Start_IT+0x220>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d018      	beq.n	80043ae <HAL_TIM_IC_Start_IT+0x1e2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004384:	d013      	beq.n	80043ae <HAL_TIM_IC_Start_IT+0x1e2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <HAL_TIM_IC_Start_IT+0x224>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00e      	beq.n	80043ae <HAL_TIM_IC_Start_IT+0x1e2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <HAL_TIM_IC_Start_IT+0x228>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d009      	beq.n	80043ae <HAL_TIM_IC_Start_IT+0x1e2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a16      	ldr	r2, [pc, #88]	; (80043f8 <HAL_TIM_IC_Start_IT+0x22c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d004      	beq.n	80043ae <HAL_TIM_IC_Start_IT+0x1e2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a14      	ldr	r2, [pc, #80]	; (80043fc <HAL_TIM_IC_Start_IT+0x230>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d111      	bne.n	80043d2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b06      	cmp	r3, #6
 80043be:	d010      	beq.n	80043e2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d0:	e007      	b.n	80043e2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0201 	orr.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40010000 	.word	0x40010000
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40000800 	.word	0x40000800
 80043f8:	40000c00 	.word	0x40000c00
 80043fc:	40014000 	.word	0x40014000

08004400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b02      	cmp	r3, #2
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b02      	cmp	r3, #2
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0202 	mvn.w	r2, #2
 800442c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fd fe46 	bl	80020d4 <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fb0f 	bl	8004a6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fb16 	bl	8004a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b04      	cmp	r3, #4
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b04      	cmp	r3, #4
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0204 	mvn.w	r2, #4
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fd fe1c 	bl	80020d4 <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fae5 	bl	8004a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 faec 	bl	8004a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d122      	bne.n	8004504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d11b      	bne.n	8004504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0208 	mvn.w	r2, #8
 80044d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2204      	movs	r2, #4
 80044da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fd fdf2 	bl	80020d4 <HAL_TIM_IC_CaptureCallback>
 80044f0:	e005      	b.n	80044fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fabb 	bl	8004a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fac2 	bl	8004a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b10      	cmp	r3, #16
 8004510:	d122      	bne.n	8004558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b10      	cmp	r3, #16
 800451e:	d11b      	bne.n	8004558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0210 	mvn.w	r2, #16
 8004528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2208      	movs	r2, #8
 800452e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fd fdc8 	bl	80020d4 <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa91 	bl	8004a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fa98 	bl	8004a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10e      	bne.n	8004584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	d107      	bne.n	8004584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0201 	mvn.w	r2, #1
 800457c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa6b 	bl	8004a5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458e:	2b80      	cmp	r3, #128	; 0x80
 8004590:	d10e      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b80      	cmp	r3, #128	; 0x80
 800459e:	d107      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 ff32 	bl	8005414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa5d 	bl	8004a96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0220 	mvn.w	r2, #32
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fefc 	bl	8005400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_TIM_IC_ConfigChannel+0x1e>
 800462a:	2302      	movs	r3, #2
 800462c:	e088      	b.n	8004740 <HAL_TIM_IC_ConfigChannel+0x130>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d11b      	bne.n	8004674 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f000 fc3a 	bl	8004ec4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 020c 	bic.w	r2, r2, #12
 800465e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6999      	ldr	r1, [r3, #24]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	619a      	str	r2, [r3, #24]
 8004672:	e060      	b.n	8004736 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b04      	cmp	r3, #4
 8004678:	d11c      	bne.n	80046b4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6819      	ldr	r1, [r3, #0]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f000 fcb2 	bl	8004ff2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699a      	ldr	r2, [r3, #24]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800469c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6999      	ldr	r1, [r3, #24]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	021a      	lsls	r2, r3, #8
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	619a      	str	r2, [r3, #24]
 80046b2:	e040      	b.n	8004736 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d11b      	bne.n	80046f2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	6819      	ldr	r1, [r3, #0]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f000 fcff 	bl	80050cc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 020c 	bic.w	r2, r2, #12
 80046dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69d9      	ldr	r1, [r3, #28]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	61da      	str	r2, [r3, #28]
 80046f0:	e021      	b.n	8004736 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b0c      	cmp	r3, #12
 80046f6:	d11c      	bne.n	8004732 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f000 fd1c 	bl	8005144 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800471a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69d9      	ldr	r1, [r3, #28]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	021a      	lsls	r2, r3, #8
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	61da      	str	r2, [r3, #28]
 8004730:	e001      	b.n	8004736 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800473e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004762:	2302      	movs	r3, #2
 8004764:	e0ae      	b.n	80048c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b0c      	cmp	r3, #12
 8004772:	f200 809f 	bhi.w	80048b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	080047b1 	.word	0x080047b1
 8004780:	080048b5 	.word	0x080048b5
 8004784:	080048b5 	.word	0x080048b5
 8004788:	080048b5 	.word	0x080048b5
 800478c:	080047f1 	.word	0x080047f1
 8004790:	080048b5 	.word	0x080048b5
 8004794:	080048b5 	.word	0x080048b5
 8004798:	080048b5 	.word	0x080048b5
 800479c:	08004833 	.word	0x08004833
 80047a0:	080048b5 	.word	0x080048b5
 80047a4:	080048b5 	.word	0x080048b5
 80047a8:	080048b5 	.word	0x080048b5
 80047ac:	08004873 	.word	0x08004873
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f9f8 	bl	8004bac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0208 	orr.w	r2, r2, #8
 80047ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0204 	bic.w	r2, r2, #4
 80047da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6999      	ldr	r1, [r3, #24]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	619a      	str	r2, [r3, #24]
      break;
 80047ee:	e064      	b.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fa3e 	bl	8004c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800480a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6999      	ldr	r1, [r3, #24]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	021a      	lsls	r2, r3, #8
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	619a      	str	r2, [r3, #24]
      break;
 8004830:	e043      	b.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fa89 	bl	8004d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69da      	ldr	r2, [r3, #28]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0208 	orr.w	r2, r2, #8
 800484c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0204 	bic.w	r2, r2, #4
 800485c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69d9      	ldr	r1, [r3, #28]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	61da      	str	r2, [r3, #28]
      break;
 8004870:	e023      	b.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fad3 	bl	8004e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69d9      	ldr	r1, [r3, #28]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	021a      	lsls	r2, r3, #8
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	61da      	str	r2, [r3, #28]
      break;
 80048b2:	e002      	b.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	75fb      	strb	r3, [r7, #23]
      break;
 80048b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_TIM_ConfigClockSource+0x1c>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e0b4      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x186>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800490e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004920:	d03e      	beq.n	80049a0 <HAL_TIM_ConfigClockSource+0xd4>
 8004922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004926:	f200 8087 	bhi.w	8004a38 <HAL_TIM_ConfigClockSource+0x16c>
 800492a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492e:	f000 8086 	beq.w	8004a3e <HAL_TIM_ConfigClockSource+0x172>
 8004932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004936:	d87f      	bhi.n	8004a38 <HAL_TIM_ConfigClockSource+0x16c>
 8004938:	2b70      	cmp	r3, #112	; 0x70
 800493a:	d01a      	beq.n	8004972 <HAL_TIM_ConfigClockSource+0xa6>
 800493c:	2b70      	cmp	r3, #112	; 0x70
 800493e:	d87b      	bhi.n	8004a38 <HAL_TIM_ConfigClockSource+0x16c>
 8004940:	2b60      	cmp	r3, #96	; 0x60
 8004942:	d050      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x11a>
 8004944:	2b60      	cmp	r3, #96	; 0x60
 8004946:	d877      	bhi.n	8004a38 <HAL_TIM_ConfigClockSource+0x16c>
 8004948:	2b50      	cmp	r3, #80	; 0x50
 800494a:	d03c      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0xfa>
 800494c:	2b50      	cmp	r3, #80	; 0x50
 800494e:	d873      	bhi.n	8004a38 <HAL_TIM_ConfigClockSource+0x16c>
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	d058      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x13a>
 8004954:	2b40      	cmp	r3, #64	; 0x40
 8004956:	d86f      	bhi.n	8004a38 <HAL_TIM_ConfigClockSource+0x16c>
 8004958:	2b30      	cmp	r3, #48	; 0x30
 800495a:	d064      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0x15a>
 800495c:	2b30      	cmp	r3, #48	; 0x30
 800495e:	d86b      	bhi.n	8004a38 <HAL_TIM_ConfigClockSource+0x16c>
 8004960:	2b20      	cmp	r3, #32
 8004962:	d060      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0x15a>
 8004964:	2b20      	cmp	r3, #32
 8004966:	d867      	bhi.n	8004a38 <HAL_TIM_ConfigClockSource+0x16c>
 8004968:	2b00      	cmp	r3, #0
 800496a:	d05c      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0x15a>
 800496c:	2b10      	cmp	r3, #16
 800496e:	d05a      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0x15a>
 8004970:	e062      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6899      	ldr	r1, [r3, #8]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f000 fc37 	bl	80051f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004994:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	609a      	str	r2, [r3, #8]
      break;
 800499e:	e04f      	b.n	8004a40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	6899      	ldr	r1, [r3, #8]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f000 fc20 	bl	80051f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049c2:	609a      	str	r2, [r3, #8]
      break;
 80049c4:	e03c      	b.n	8004a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6859      	ldr	r1, [r3, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	461a      	mov	r2, r3
 80049d4:	f000 fade 	bl	8004f94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2150      	movs	r1, #80	; 0x50
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fbed 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 80049e4:	e02c      	b.n	8004a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6859      	ldr	r1, [r3, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	461a      	mov	r2, r3
 80049f4:	f000 fb3a 	bl	800506c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2160      	movs	r1, #96	; 0x60
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fbdd 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004a04:	e01c      	b.n	8004a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6859      	ldr	r1, [r3, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	461a      	mov	r2, r3
 8004a14:	f000 fabe 	bl	8004f94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2140      	movs	r1, #64	; 0x40
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fbcd 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004a24:	e00c      	b.n	8004a40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4610      	mov	r0, r2
 8004a32:	f000 fbc4 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004a36:	e003      	b.n	8004a40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a3c:	e000      	b.n	8004a40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
	...

08004aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a34      	ldr	r2, [pc, #208]	; (8004b90 <TIM_Base_SetConfig+0xe4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00f      	beq.n	8004ae4 <TIM_Base_SetConfig+0x38>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aca:	d00b      	beq.n	8004ae4 <TIM_Base_SetConfig+0x38>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a31      	ldr	r2, [pc, #196]	; (8004b94 <TIM_Base_SetConfig+0xe8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d007      	beq.n	8004ae4 <TIM_Base_SetConfig+0x38>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a30      	ldr	r2, [pc, #192]	; (8004b98 <TIM_Base_SetConfig+0xec>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_Base_SetConfig+0x38>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a2f      	ldr	r2, [pc, #188]	; (8004b9c <TIM_Base_SetConfig+0xf0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d108      	bne.n	8004af6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a25      	ldr	r2, [pc, #148]	; (8004b90 <TIM_Base_SetConfig+0xe4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01b      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d017      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a22      	ldr	r2, [pc, #136]	; (8004b94 <TIM_Base_SetConfig+0xe8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a21      	ldr	r2, [pc, #132]	; (8004b98 <TIM_Base_SetConfig+0xec>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00f      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a20      	ldr	r2, [pc, #128]	; (8004b9c <TIM_Base_SetConfig+0xf0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a1f      	ldr	r2, [pc, #124]	; (8004ba0 <TIM_Base_SetConfig+0xf4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a1e      	ldr	r2, [pc, #120]	; (8004ba4 <TIM_Base_SetConfig+0xf8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a1d      	ldr	r2, [pc, #116]	; (8004ba8 <TIM_Base_SetConfig+0xfc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d108      	bne.n	8004b48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <TIM_Base_SetConfig+0xe4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d103      	bne.n	8004b7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	615a      	str	r2, [r3, #20]
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40010000 	.word	0x40010000
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800
 8004b9c:	40000c00 	.word	0x40000c00
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40014400 	.word	0x40014400
 8004ba8:	40014800 	.word	0x40014800

08004bac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f023 0201 	bic.w	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0303 	bic.w	r3, r3, #3
 8004be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f023 0302 	bic.w	r3, r3, #2
 8004bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a1c      	ldr	r2, [pc, #112]	; (8004c74 <TIM_OC1_SetConfig+0xc8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d10c      	bne.n	8004c22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f023 0308 	bic.w	r3, r3, #8
 8004c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f023 0304 	bic.w	r3, r3, #4
 8004c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <TIM_OC1_SetConfig+0xc8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d111      	bne.n	8004c4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	621a      	str	r2, [r3, #32]
}
 8004c68:	bf00      	nop
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	40010000 	.word	0x40010000

08004c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f023 0210 	bic.w	r2, r3, #16
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f023 0320 	bic.w	r3, r3, #32
 8004cc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a1e      	ldr	r2, [pc, #120]	; (8004d4c <TIM_OC2_SetConfig+0xd4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d10d      	bne.n	8004cf4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a15      	ldr	r2, [pc, #84]	; (8004d4c <TIM_OC2_SetConfig+0xd4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d113      	bne.n	8004d24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000

08004d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <TIM_OC3_SetConfig+0xd0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d10d      	bne.n	8004dca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a14      	ldr	r2, [pc, #80]	; (8004e20 <TIM_OC3_SetConfig+0xd0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d113      	bne.n	8004dfa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	621a      	str	r2, [r3, #32]
}
 8004e14:	bf00      	nop
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40010000 	.word	0x40010000

08004e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a10      	ldr	r2, [pc, #64]	; (8004ec0 <TIM_OC4_SetConfig+0x9c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d109      	bne.n	8004e98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	019b      	lsls	r3, r3, #6
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	621a      	str	r2, [r3, #32]
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000

08004ec4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f023 0201 	bic.w	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a24      	ldr	r2, [pc, #144]	; (8004f80 <TIM_TI1_SetConfig+0xbc>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <TIM_TI1_SetConfig+0x56>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef8:	d00f      	beq.n	8004f1a <TIM_TI1_SetConfig+0x56>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a21      	ldr	r2, [pc, #132]	; (8004f84 <TIM_TI1_SetConfig+0xc0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00b      	beq.n	8004f1a <TIM_TI1_SetConfig+0x56>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4a20      	ldr	r2, [pc, #128]	; (8004f88 <TIM_TI1_SetConfig+0xc4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <TIM_TI1_SetConfig+0x56>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <TIM_TI1_SetConfig+0xc8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_TI1_SetConfig+0x56>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <TIM_TI1_SetConfig+0xcc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d101      	bne.n	8004f1e <TIM_TI1_SetConfig+0x5a>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <TIM_TI1_SetConfig+0x5c>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f023 0303 	bic.w	r3, r3, #3
 8004f2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	e003      	b.n	8004f3e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f023 030a 	bic.w	r3, r3, #10
 8004f58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f003 030a 	and.w	r3, r3, #10
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	40000c00 	.word	0x40000c00
 8004f90:	40014000 	.word	0x40014000

08004f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f023 0201 	bic.w	r2, r3, #1
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f023 030a 	bic.w	r3, r3, #10
 8004fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b087      	sub	sp, #28
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
 8004ffe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	f023 0210 	bic.w	r2, r3, #16
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	031b      	lsls	r3, r3, #12
 8005036:	b29b      	uxth	r3, r3
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005044:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	621a      	str	r2, [r3, #32]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f023 0210 	bic.w	r2, r3, #16
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005096:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	031b      	lsls	r3, r3, #12
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	621a      	str	r2, [r3, #32]
}
 80050c0:	bf00      	nop
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f023 0303 	bic.w	r3, r3, #3
 80050f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005108:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	b2db      	uxtb	r3, r3
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800511c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	621a      	str	r2, [r3, #32]
}
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005170:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005182:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	031b      	lsls	r3, r3, #12
 8005188:	b29b      	uxth	r3, r3
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005196:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	031b      	lsls	r3, r3, #12
 800519c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	621a      	str	r2, [r3, #32]
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	f043 0307 	orr.w	r3, r3, #7
 80051e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800520e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	021a      	lsls	r2, r3, #8
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	431a      	orrs	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4313      	orrs	r3, r2
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	609a      	str	r2, [r3, #8]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	2201      	movs	r2, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1a      	ldr	r2, [r3, #32]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	43db      	mvns	r3, r3
 8005256:	401a      	ands	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	fa01 f303 	lsl.w	r3, r1, r3
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
	...

08005280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005294:	2302      	movs	r3, #2
 8005296:	e050      	b.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1c      	ldr	r2, [pc, #112]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d018      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e4:	d013      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a18      	ldr	r2, [pc, #96]	; (800534c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00e      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a16      	ldr	r2, [pc, #88]	; (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a15      	ldr	r2, [pc, #84]	; (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a13      	ldr	r2, [pc, #76]	; (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d10c      	bne.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	4313      	orrs	r3, r2
 800531e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40010000 	.word	0x40010000
 800534c:	40000400 	.word	0x40000400
 8005350:	40000800 	.word	0x40000800
 8005354:	40000c00 	.word	0x40000c00
 8005358:	40014000 	.word	0x40014000

0800535c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005374:	2302      	movs	r3, #2
 8005376:	e03d      	b.n	80053f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e03f      	b.n	80054ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fd fa96 	bl	8002980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2224      	movs	r2, #36	; 0x24
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800546a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fddf 	bl	8006030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b08a      	sub	sp, #40	; 0x28
 80054c6:	af02      	add	r7, sp, #8
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d17c      	bne.n	80055dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_UART_Transmit+0x2c>
 80054e8:	88fb      	ldrh	r3, [r7, #6]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e075      	b.n	80055de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_UART_Transmit+0x3e>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e06e      	b.n	80055de <HAL_UART_Transmit+0x11c>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2221      	movs	r2, #33	; 0x21
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005516:	f7fd fb41 	bl	8002b9c <HAL_GetTick>
 800551a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	88fa      	ldrh	r2, [r7, #6]
 8005520:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	88fa      	ldrh	r2, [r7, #6]
 8005526:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005530:	d108      	bne.n	8005544 <HAL_UART_Transmit+0x82>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d104      	bne.n	8005544 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800553a:	2300      	movs	r3, #0
 800553c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	61bb      	str	r3, [r7, #24]
 8005542:	e003      	b.n	800554c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005554:	e02a      	b.n	80055ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	2180      	movs	r1, #128	; 0x80
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 fb1f 	bl	8005ba4 <UART_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e036      	b.n	80055de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10b      	bne.n	800558e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005584:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	3302      	adds	r3, #2
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	e007      	b.n	800559e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	781a      	ldrb	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	3301      	adds	r3, #1
 800559c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1cf      	bne.n	8005556 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2200      	movs	r2, #0
 80055be:	2140      	movs	r1, #64	; 0x40
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 faef 	bl	8005ba4 <UART_WaitOnFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e006      	b.n	80055de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	e000      	b.n	80055de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
  }
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	4613      	mov	r3, r2
 80055f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d11d      	bne.n	800563c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_UART_Receive_IT+0x26>
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e016      	b.n	800563e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_UART_Receive_IT+0x38>
 800561a:	2302      	movs	r3, #2
 800561c:	e00f      	b.n	800563e <HAL_UART_Receive_IT+0x58>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800562c:	88fb      	ldrh	r3, [r7, #6]
 800562e:	461a      	mov	r2, r3
 8005630:	68b9      	ldr	r1, [r7, #8]
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fb24 	bl	8005c80 <UART_Start_Receive_IT>
 8005638:	4603      	mov	r3, r0
 800563a:	e000      	b.n	800563e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800563c:	2302      	movs	r3, #2
  }
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b0ba      	sub	sp, #232	; 0xe8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800566e:	2300      	movs	r3, #0
 8005670:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005674:	2300      	movs	r3, #0
 8005676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800567a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10f      	bne.n	80056ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800568e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <HAL_UART_IRQHandler+0x66>
 800569a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fc07 	bl	8005eba <UART_Receive_IT>
      return;
 80056ac:	e256      	b.n	8005b5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80de 	beq.w	8005874 <HAL_UART_IRQHandler+0x22c>
 80056b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d106      	bne.n	80056d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80d1 	beq.w	8005874 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <HAL_UART_IRQHandler+0xae>
 80056de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f043 0201 	orr.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <HAL_UART_IRQHandler+0xd2>
 8005702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f043 0202 	orr.w	r2, r3, #2
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800571a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00b      	beq.n	800573e <HAL_UART_IRQHandler+0xf6>
 8005726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f043 0204 	orr.w	r2, r3, #4
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800573e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d011      	beq.n	800576e <HAL_UART_IRQHandler+0x126>
 800574a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b00      	cmp	r3, #0
 8005754:	d105      	bne.n	8005762 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f043 0208 	orr.w	r2, r3, #8
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 81ed 	beq.w	8005b52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <HAL_UART_IRQHandler+0x14e>
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fb92 	bl	8005eba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	2b40      	cmp	r3, #64	; 0x40
 80057a2:	bf0c      	ite	eq
 80057a4:	2301      	moveq	r3, #1
 80057a6:	2300      	movne	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d103      	bne.n	80057c2 <HAL_UART_IRQHandler+0x17a>
 80057ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d04f      	beq.n	8005862 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fa9a 	bl	8005cfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d2:	2b40      	cmp	r3, #64	; 0x40
 80057d4:	d141      	bne.n	800585a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3314      	adds	r3, #20
 80057dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3314      	adds	r3, #20
 80057fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005802:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800580e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800581a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1d9      	bne.n	80057d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	2b00      	cmp	r3, #0
 8005828:	d013      	beq.n	8005852 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	4a7d      	ldr	r2, [pc, #500]	; (8005a24 <HAL_UART_IRQHandler+0x3dc>)
 8005830:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	4618      	mov	r0, r3
 8005838:	f7fd fb61 	bl	8002efe <HAL_DMA_Abort_IT>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800584c:	4610      	mov	r0, r2
 800584e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005850:	e00e      	b.n	8005870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f990 	bl	8005b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005858:	e00a      	b.n	8005870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f98c 	bl	8005b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	e006      	b.n	8005870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f988 	bl	8005b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800586e:	e170      	b.n	8005b52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	bf00      	nop
    return;
 8005872:	e16e      	b.n	8005b52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	2b01      	cmp	r3, #1
 800587a:	f040 814a 	bne.w	8005b12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800587e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 8143 	beq.w	8005b12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800588c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 813c 	beq.w	8005b12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800589a:	2300      	movs	r3, #0
 800589c:	60bb      	str	r3, [r7, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ba:	2b40      	cmp	r3, #64	; 0x40
 80058bc:	f040 80b4 	bne.w	8005a28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 8140 	beq.w	8005b56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058de:	429a      	cmp	r2, r3
 80058e0:	f080 8139 	bcs.w	8005b56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f6:	f000 8088 	beq.w	8005a0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	330c      	adds	r3, #12
 8005900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005910:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005926:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800592a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005932:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800593e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1d9      	bne.n	80058fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3314      	adds	r3, #20
 800594c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005958:	f023 0301 	bic.w	r3, r3, #1
 800595c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3314      	adds	r3, #20
 8005966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800596a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800596e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005972:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800597c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e1      	bne.n	8005946 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3314      	adds	r3, #20
 8005988:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3314      	adds	r3, #20
 80059a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e3      	bne.n	8005982 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	330c      	adds	r3, #12
 80059ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059da:	f023 0310 	bic.w	r3, r3, #16
 80059de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	330c      	adds	r3, #12
 80059e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80059ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e3      	bne.n	80059c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fd fa0a 	bl	8002e1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f8b6 	bl	8005b8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a20:	e099      	b.n	8005b56 <HAL_UART_IRQHandler+0x50e>
 8005a22:	bf00      	nop
 8005a24:	08005dc3 	.word	0x08005dc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 808b 	beq.w	8005b5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8086 	beq.w	8005b5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a72:	647a      	str	r2, [r7, #68]	; 0x44
 8005a74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e3      	bne.n	8005a4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3314      	adds	r3, #20
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	623b      	str	r3, [r7, #32]
   return(result);
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3314      	adds	r3, #20
 8005aa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005aaa:	633a      	str	r2, [r7, #48]	; 0x30
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e3      	bne.n	8005a86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0310 	bic.w	r3, r3, #16
 8005ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005af0:	61fa      	str	r2, [r7, #28]
 8005af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	69b9      	ldr	r1, [r7, #24]
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	617b      	str	r3, [r7, #20]
   return(result);
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e3      	bne.n	8005acc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f83e 	bl	8005b8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b10:	e023      	b.n	8005b5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d009      	beq.n	8005b32 <HAL_UART_IRQHandler+0x4ea>
 8005b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f95d 	bl	8005dea <UART_Transmit_IT>
    return;
 8005b30:	e014      	b.n	8005b5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00e      	beq.n	8005b5c <HAL_UART_IRQHandler+0x514>
 8005b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d008      	beq.n	8005b5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f99d 	bl	8005e8a <UART_EndTransmit_IT>
    return;
 8005b50:	e004      	b.n	8005b5c <HAL_UART_IRQHandler+0x514>
    return;
 8005b52:	bf00      	nop
 8005b54:	e002      	b.n	8005b5c <HAL_UART_IRQHandler+0x514>
      return;
 8005b56:	bf00      	nop
 8005b58:	e000      	b.n	8005b5c <HAL_UART_IRQHandler+0x514>
      return;
 8005b5a:	bf00      	nop
  }
}
 8005b5c:	37e8      	adds	r7, #232	; 0xe8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop

08005b64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b090      	sub	sp, #64	; 0x40
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb4:	e050      	b.n	8005c58 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d04c      	beq.n	8005c58 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bc4:	f7fc ffea 	bl	8002b9c <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d241      	bcs.n	8005c58 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bf4:	637a      	str	r2, [r7, #52]	; 0x34
 8005bf6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e5      	bne.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	613b      	str	r3, [r7, #16]
   return(result);
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f023 0301 	bic.w	r3, r3, #1
 8005c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3314      	adds	r3, #20
 8005c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c28:	623a      	str	r2, [r7, #32]
 8005c2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	69f9      	ldr	r1, [r7, #28]
 8005c2e:	6a3a      	ldr	r2, [r7, #32]
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e5      	bne.n	8005c08 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e00f      	b.n	8005c78 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4013      	ands	r3, r2
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	bf0c      	ite	eq
 8005c68:	2301      	moveq	r3, #1
 8005c6a:	2300      	movne	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d09f      	beq.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3740      	adds	r7, #64	; 0x40
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	88fa      	ldrh	r2, [r7, #6]
 8005c98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	88fa      	ldrh	r2, [r7, #6]
 8005c9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2222      	movs	r2, #34	; 0x22
 8005caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d007      	beq.n	8005cce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ccc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695a      	ldr	r2, [r3, #20]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0220 	orr.w	r2, r2, #32
 8005cec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b095      	sub	sp, #84	; 0x54
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	330c      	adds	r3, #12
 8005d22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d24:	643a      	str	r2, [r7, #64]	; 0x40
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e5      	bne.n	8005d04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3314      	adds	r3, #20
 8005d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f023 0301 	bic.w	r3, r3, #1
 8005d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3314      	adds	r3, #20
 8005d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d60:	e841 2300 	strex	r3, r2, [r1]
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e5      	bne.n	8005d38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d119      	bne.n	8005da8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	330c      	adds	r3, #12
 8005d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f023 0310 	bic.w	r3, r3, #16
 8005d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	330c      	adds	r3, #12
 8005d92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d94:	61ba      	str	r2, [r7, #24]
 8005d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6979      	ldr	r1, [r7, #20]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	613b      	str	r3, [r7, #16]
   return(result);
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e5      	bne.n	8005d74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005db6:	bf00      	nop
 8005db8:	3754      	adds	r7, #84	; 0x54
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7ff fecb 	bl	8005b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de2:	bf00      	nop
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b085      	sub	sp, #20
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b21      	cmp	r3, #33	; 0x21
 8005dfc:	d13e      	bne.n	8005e7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e06:	d114      	bne.n	8005e32 <UART_Transmit_IT+0x48>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d110      	bne.n	8005e32 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	1c9a      	adds	r2, r3, #2
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	621a      	str	r2, [r3, #32]
 8005e30:	e008      	b.n	8005e44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	1c59      	adds	r1, r3, #1
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6211      	str	r1, [r2, #32]
 8005e3c:	781a      	ldrb	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	4619      	mov	r1, r3
 8005e52:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10f      	bne.n	8005e78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e000      	b.n	8005e7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e7c:	2302      	movs	r3, #2
  }
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff fe5a 	bl	8005b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b08c      	sub	sp, #48	; 0x30
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b22      	cmp	r3, #34	; 0x22
 8005ecc:	f040 80ab 	bne.w	8006026 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed8:	d117      	bne.n	8005f0a <UART_Receive_IT+0x50>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d113      	bne.n	8005f0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	1c9a      	adds	r2, r3, #2
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	629a      	str	r2, [r3, #40]	; 0x28
 8005f08:	e026      	b.n	8005f58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f1c:	d007      	beq.n	8005f2e <UART_Receive_IT+0x74>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10a      	bne.n	8005f3c <UART_Receive_IT+0x82>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	e008      	b.n	8005f4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	4619      	mov	r1, r3
 8005f66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d15a      	bne.n	8006022 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0220 	bic.w	r2, r2, #32
 8005f7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695a      	ldr	r2, [r3, #20]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0201 	bic.w	r2, r2, #1
 8005f9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d135      	bne.n	8006018 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	330c      	adds	r3, #12
 8005fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f023 0310 	bic.w	r3, r3, #16
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd2:	623a      	str	r2, [r7, #32]
 8005fd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	69f9      	ldr	r1, [r7, #28]
 8005fd8:	6a3a      	ldr	r2, [r7, #32]
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e5      	bne.n	8005fb2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d10a      	bne.n	800600a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff fdbb 	bl	8005b8c <HAL_UARTEx_RxEventCallback>
 8006016:	e002      	b.n	800601e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7fc f871 	bl	8002100 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	e002      	b.n	8006028 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	e000      	b.n	8006028 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006026:	2302      	movs	r3, #2
  }
}
 8006028:	4618      	mov	r0, r3
 800602a:	3730      	adds	r7, #48	; 0x30
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006034:	b0c0      	sub	sp, #256	; 0x100
 8006036:	af00      	add	r7, sp, #0
 8006038:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	68d9      	ldr	r1, [r3, #12]
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	ea40 0301 	orr.w	r3, r0, r1
 8006058:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	431a      	orrs	r2, r3
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	431a      	orrs	r2, r3
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	4313      	orrs	r3, r2
 8006078:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006088:	f021 010c 	bic.w	r1, r1, #12
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006096:	430b      	orrs	r3, r1
 8006098:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060aa:	6999      	ldr	r1, [r3, #24]
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	ea40 0301 	orr.w	r3, r0, r1
 80060b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4b8f      	ldr	r3, [pc, #572]	; (80062fc <UART_SetConfig+0x2cc>)
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d005      	beq.n	80060d0 <UART_SetConfig+0xa0>
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	4b8d      	ldr	r3, [pc, #564]	; (8006300 <UART_SetConfig+0x2d0>)
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d104      	bne.n	80060da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060d0:	f7fd fd8c 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 80060d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060d8:	e003      	b.n	80060e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060da:	f7fd fd73 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 80060de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ec:	f040 810c 	bne.w	8006308 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f4:	2200      	movs	r2, #0
 80060f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006102:	4622      	mov	r2, r4
 8006104:	462b      	mov	r3, r5
 8006106:	1891      	adds	r1, r2, r2
 8006108:	65b9      	str	r1, [r7, #88]	; 0x58
 800610a:	415b      	adcs	r3, r3
 800610c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800610e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006112:	4621      	mov	r1, r4
 8006114:	eb12 0801 	adds.w	r8, r2, r1
 8006118:	4629      	mov	r1, r5
 800611a:	eb43 0901 	adc.w	r9, r3, r1
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800612a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800612e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006132:	4690      	mov	r8, r2
 8006134:	4699      	mov	r9, r3
 8006136:	4623      	mov	r3, r4
 8006138:	eb18 0303 	adds.w	r3, r8, r3
 800613c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006140:	462b      	mov	r3, r5
 8006142:	eb49 0303 	adc.w	r3, r9, r3
 8006146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800614a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006156:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800615a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800615e:	460b      	mov	r3, r1
 8006160:	18db      	adds	r3, r3, r3
 8006162:	653b      	str	r3, [r7, #80]	; 0x50
 8006164:	4613      	mov	r3, r2
 8006166:	eb42 0303 	adc.w	r3, r2, r3
 800616a:	657b      	str	r3, [r7, #84]	; 0x54
 800616c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006170:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006174:	f7fa fd8a 	bl	8000c8c <__aeabi_uldivmod>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4b61      	ldr	r3, [pc, #388]	; (8006304 <UART_SetConfig+0x2d4>)
 800617e:	fba3 2302 	umull	r2, r3, r3, r2
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	011c      	lsls	r4, r3, #4
 8006186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800618a:	2200      	movs	r2, #0
 800618c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006190:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006194:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	1891      	adds	r1, r2, r2
 800619e:	64b9      	str	r1, [r7, #72]	; 0x48
 80061a0:	415b      	adcs	r3, r3
 80061a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061a8:	4641      	mov	r1, r8
 80061aa:	eb12 0a01 	adds.w	sl, r2, r1
 80061ae:	4649      	mov	r1, r9
 80061b0:	eb43 0b01 	adc.w	fp, r3, r1
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061c8:	4692      	mov	sl, r2
 80061ca:	469b      	mov	fp, r3
 80061cc:	4643      	mov	r3, r8
 80061ce:	eb1a 0303 	adds.w	r3, sl, r3
 80061d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061d6:	464b      	mov	r3, r9
 80061d8:	eb4b 0303 	adc.w	r3, fp, r3
 80061dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061f4:	460b      	mov	r3, r1
 80061f6:	18db      	adds	r3, r3, r3
 80061f8:	643b      	str	r3, [r7, #64]	; 0x40
 80061fa:	4613      	mov	r3, r2
 80061fc:	eb42 0303 	adc.w	r3, r2, r3
 8006200:	647b      	str	r3, [r7, #68]	; 0x44
 8006202:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006206:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800620a:	f7fa fd3f 	bl	8000c8c <__aeabi_uldivmod>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4611      	mov	r1, r2
 8006214:	4b3b      	ldr	r3, [pc, #236]	; (8006304 <UART_SetConfig+0x2d4>)
 8006216:	fba3 2301 	umull	r2, r3, r3, r1
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	2264      	movs	r2, #100	; 0x64
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	1acb      	subs	r3, r1, r3
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800622a:	4b36      	ldr	r3, [pc, #216]	; (8006304 <UART_SetConfig+0x2d4>)
 800622c:	fba3 2302 	umull	r2, r3, r3, r2
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006238:	441c      	add	r4, r3
 800623a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800623e:	2200      	movs	r2, #0
 8006240:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006244:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006248:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800624c:	4642      	mov	r2, r8
 800624e:	464b      	mov	r3, r9
 8006250:	1891      	adds	r1, r2, r2
 8006252:	63b9      	str	r1, [r7, #56]	; 0x38
 8006254:	415b      	adcs	r3, r3
 8006256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006258:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800625c:	4641      	mov	r1, r8
 800625e:	1851      	adds	r1, r2, r1
 8006260:	6339      	str	r1, [r7, #48]	; 0x30
 8006262:	4649      	mov	r1, r9
 8006264:	414b      	adcs	r3, r1
 8006266:	637b      	str	r3, [r7, #52]	; 0x34
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006274:	4659      	mov	r1, fp
 8006276:	00cb      	lsls	r3, r1, #3
 8006278:	4651      	mov	r1, sl
 800627a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800627e:	4651      	mov	r1, sl
 8006280:	00ca      	lsls	r2, r1, #3
 8006282:	4610      	mov	r0, r2
 8006284:	4619      	mov	r1, r3
 8006286:	4603      	mov	r3, r0
 8006288:	4642      	mov	r2, r8
 800628a:	189b      	adds	r3, r3, r2
 800628c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006290:	464b      	mov	r3, r9
 8006292:	460a      	mov	r2, r1
 8006294:	eb42 0303 	adc.w	r3, r2, r3
 8006298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062b0:	460b      	mov	r3, r1
 80062b2:	18db      	adds	r3, r3, r3
 80062b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b6:	4613      	mov	r3, r2
 80062b8:	eb42 0303 	adc.w	r3, r2, r3
 80062bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062c6:	f7fa fce1 	bl	8000c8c <__aeabi_uldivmod>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4b0d      	ldr	r3, [pc, #52]	; (8006304 <UART_SetConfig+0x2d4>)
 80062d0:	fba3 1302 	umull	r1, r3, r3, r2
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	2164      	movs	r1, #100	; 0x64
 80062d8:	fb01 f303 	mul.w	r3, r1, r3
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	3332      	adds	r3, #50	; 0x32
 80062e2:	4a08      	ldr	r2, [pc, #32]	; (8006304 <UART_SetConfig+0x2d4>)
 80062e4:	fba2 2303 	umull	r2, r3, r2, r3
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	f003 0207 	and.w	r2, r3, #7
 80062ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4422      	add	r2, r4
 80062f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062f8:	e106      	b.n	8006508 <UART_SetConfig+0x4d8>
 80062fa:	bf00      	nop
 80062fc:	40011000 	.word	0x40011000
 8006300:	40011400 	.word	0x40011400
 8006304:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800630c:	2200      	movs	r2, #0
 800630e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006312:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006316:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800631a:	4642      	mov	r2, r8
 800631c:	464b      	mov	r3, r9
 800631e:	1891      	adds	r1, r2, r2
 8006320:	6239      	str	r1, [r7, #32]
 8006322:	415b      	adcs	r3, r3
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
 8006326:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800632a:	4641      	mov	r1, r8
 800632c:	1854      	adds	r4, r2, r1
 800632e:	4649      	mov	r1, r9
 8006330:	eb43 0501 	adc.w	r5, r3, r1
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	00eb      	lsls	r3, r5, #3
 800633e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006342:	00e2      	lsls	r2, r4, #3
 8006344:	4614      	mov	r4, r2
 8006346:	461d      	mov	r5, r3
 8006348:	4643      	mov	r3, r8
 800634a:	18e3      	adds	r3, r4, r3
 800634c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006350:	464b      	mov	r3, r9
 8006352:	eb45 0303 	adc.w	r3, r5, r3
 8006356:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800635a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006366:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800636a:	f04f 0200 	mov.w	r2, #0
 800636e:	f04f 0300 	mov.w	r3, #0
 8006372:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006376:	4629      	mov	r1, r5
 8006378:	008b      	lsls	r3, r1, #2
 800637a:	4621      	mov	r1, r4
 800637c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006380:	4621      	mov	r1, r4
 8006382:	008a      	lsls	r2, r1, #2
 8006384:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006388:	f7fa fc80 	bl	8000c8c <__aeabi_uldivmod>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4b60      	ldr	r3, [pc, #384]	; (8006514 <UART_SetConfig+0x4e4>)
 8006392:	fba3 2302 	umull	r2, r3, r3, r2
 8006396:	095b      	lsrs	r3, r3, #5
 8006398:	011c      	lsls	r4, r3, #4
 800639a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	1891      	adds	r1, r2, r2
 80063b2:	61b9      	str	r1, [r7, #24]
 80063b4:	415b      	adcs	r3, r3
 80063b6:	61fb      	str	r3, [r7, #28]
 80063b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063bc:	4641      	mov	r1, r8
 80063be:	1851      	adds	r1, r2, r1
 80063c0:	6139      	str	r1, [r7, #16]
 80063c2:	4649      	mov	r1, r9
 80063c4:	414b      	adcs	r3, r1
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063d4:	4659      	mov	r1, fp
 80063d6:	00cb      	lsls	r3, r1, #3
 80063d8:	4651      	mov	r1, sl
 80063da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063de:	4651      	mov	r1, sl
 80063e0:	00ca      	lsls	r2, r1, #3
 80063e2:	4610      	mov	r0, r2
 80063e4:	4619      	mov	r1, r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	4642      	mov	r2, r8
 80063ea:	189b      	adds	r3, r3, r2
 80063ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063f0:	464b      	mov	r3, r9
 80063f2:	460a      	mov	r2, r1
 80063f4:	eb42 0303 	adc.w	r3, r2, r3
 80063f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	67bb      	str	r3, [r7, #120]	; 0x78
 8006406:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006414:	4649      	mov	r1, r9
 8006416:	008b      	lsls	r3, r1, #2
 8006418:	4641      	mov	r1, r8
 800641a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800641e:	4641      	mov	r1, r8
 8006420:	008a      	lsls	r2, r1, #2
 8006422:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006426:	f7fa fc31 	bl	8000c8c <__aeabi_uldivmod>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4611      	mov	r1, r2
 8006430:	4b38      	ldr	r3, [pc, #224]	; (8006514 <UART_SetConfig+0x4e4>)
 8006432:	fba3 2301 	umull	r2, r3, r3, r1
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	2264      	movs	r2, #100	; 0x64
 800643a:	fb02 f303 	mul.w	r3, r2, r3
 800643e:	1acb      	subs	r3, r1, r3
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	3332      	adds	r3, #50	; 0x32
 8006444:	4a33      	ldr	r2, [pc, #204]	; (8006514 <UART_SetConfig+0x4e4>)
 8006446:	fba2 2303 	umull	r2, r3, r2, r3
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006450:	441c      	add	r4, r3
 8006452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006456:	2200      	movs	r2, #0
 8006458:	673b      	str	r3, [r7, #112]	; 0x70
 800645a:	677a      	str	r2, [r7, #116]	; 0x74
 800645c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006460:	4642      	mov	r2, r8
 8006462:	464b      	mov	r3, r9
 8006464:	1891      	adds	r1, r2, r2
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	415b      	adcs	r3, r3
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006470:	4641      	mov	r1, r8
 8006472:	1851      	adds	r1, r2, r1
 8006474:	6039      	str	r1, [r7, #0]
 8006476:	4649      	mov	r1, r9
 8006478:	414b      	adcs	r3, r1
 800647a:	607b      	str	r3, [r7, #4]
 800647c:	f04f 0200 	mov.w	r2, #0
 8006480:	f04f 0300 	mov.w	r3, #0
 8006484:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006488:	4659      	mov	r1, fp
 800648a:	00cb      	lsls	r3, r1, #3
 800648c:	4651      	mov	r1, sl
 800648e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006492:	4651      	mov	r1, sl
 8006494:	00ca      	lsls	r2, r1, #3
 8006496:	4610      	mov	r0, r2
 8006498:	4619      	mov	r1, r3
 800649a:	4603      	mov	r3, r0
 800649c:	4642      	mov	r2, r8
 800649e:	189b      	adds	r3, r3, r2
 80064a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80064a2:	464b      	mov	r3, r9
 80064a4:	460a      	mov	r2, r1
 80064a6:	eb42 0303 	adc.w	r3, r2, r3
 80064aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	663b      	str	r3, [r7, #96]	; 0x60
 80064b6:	667a      	str	r2, [r7, #100]	; 0x64
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	f04f 0300 	mov.w	r3, #0
 80064c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064c4:	4649      	mov	r1, r9
 80064c6:	008b      	lsls	r3, r1, #2
 80064c8:	4641      	mov	r1, r8
 80064ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ce:	4641      	mov	r1, r8
 80064d0:	008a      	lsls	r2, r1, #2
 80064d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064d6:	f7fa fbd9 	bl	8000c8c <__aeabi_uldivmod>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <UART_SetConfig+0x4e4>)
 80064e0:	fba3 1302 	umull	r1, r3, r3, r2
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	2164      	movs	r1, #100	; 0x64
 80064e8:	fb01 f303 	mul.w	r3, r1, r3
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	3332      	adds	r3, #50	; 0x32
 80064f2:	4a08      	ldr	r2, [pc, #32]	; (8006514 <UART_SetConfig+0x4e4>)
 80064f4:	fba2 2303 	umull	r2, r3, r2, r3
 80064f8:	095b      	lsrs	r3, r3, #5
 80064fa:	f003 020f 	and.w	r2, r3, #15
 80064fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4422      	add	r2, r4
 8006506:	609a      	str	r2, [r3, #8]
}
 8006508:	bf00      	nop
 800650a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800650e:	46bd      	mov	sp, r7
 8006510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006514:	51eb851f 	.word	0x51eb851f

08006518 <atof>:
 8006518:	2100      	movs	r1, #0
 800651a:	f000 be0d 	b.w	8007138 <strtod>

0800651e <sulp>:
 800651e:	b570      	push	{r4, r5, r6, lr}
 8006520:	4604      	mov	r4, r0
 8006522:	460d      	mov	r5, r1
 8006524:	ec45 4b10 	vmov	d0, r4, r5
 8006528:	4616      	mov	r6, r2
 800652a:	f002 f80d 	bl	8008548 <__ulp>
 800652e:	ec51 0b10 	vmov	r0, r1, d0
 8006532:	b17e      	cbz	r6, 8006554 <sulp+0x36>
 8006534:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006538:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800653c:	2b00      	cmp	r3, #0
 800653e:	dd09      	ble.n	8006554 <sulp+0x36>
 8006540:	051b      	lsls	r3, r3, #20
 8006542:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006546:	2400      	movs	r4, #0
 8006548:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800654c:	4622      	mov	r2, r4
 800654e:	462b      	mov	r3, r5
 8006550:	f7fa f86a 	bl	8000628 <__aeabi_dmul>
 8006554:	bd70      	pop	{r4, r5, r6, pc}
	...

08006558 <_strtod_l>:
 8006558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655c:	ed2d 8b02 	vpush	{d8}
 8006560:	b09b      	sub	sp, #108	; 0x6c
 8006562:	4604      	mov	r4, r0
 8006564:	9213      	str	r2, [sp, #76]	; 0x4c
 8006566:	2200      	movs	r2, #0
 8006568:	9216      	str	r2, [sp, #88]	; 0x58
 800656a:	460d      	mov	r5, r1
 800656c:	f04f 0800 	mov.w	r8, #0
 8006570:	f04f 0900 	mov.w	r9, #0
 8006574:	460a      	mov	r2, r1
 8006576:	9215      	str	r2, [sp, #84]	; 0x54
 8006578:	7811      	ldrb	r1, [r2, #0]
 800657a:	292b      	cmp	r1, #43	; 0x2b
 800657c:	d04c      	beq.n	8006618 <_strtod_l+0xc0>
 800657e:	d83a      	bhi.n	80065f6 <_strtod_l+0x9e>
 8006580:	290d      	cmp	r1, #13
 8006582:	d834      	bhi.n	80065ee <_strtod_l+0x96>
 8006584:	2908      	cmp	r1, #8
 8006586:	d834      	bhi.n	80065f2 <_strtod_l+0x9a>
 8006588:	2900      	cmp	r1, #0
 800658a:	d03d      	beq.n	8006608 <_strtod_l+0xb0>
 800658c:	2200      	movs	r2, #0
 800658e:	920a      	str	r2, [sp, #40]	; 0x28
 8006590:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006592:	7832      	ldrb	r2, [r6, #0]
 8006594:	2a30      	cmp	r2, #48	; 0x30
 8006596:	f040 80b4 	bne.w	8006702 <_strtod_l+0x1aa>
 800659a:	7872      	ldrb	r2, [r6, #1]
 800659c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80065a0:	2a58      	cmp	r2, #88	; 0x58
 80065a2:	d170      	bne.n	8006686 <_strtod_l+0x12e>
 80065a4:	9302      	str	r3, [sp, #8]
 80065a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a8:	9301      	str	r3, [sp, #4]
 80065aa:	ab16      	add	r3, sp, #88	; 0x58
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	4a8e      	ldr	r2, [pc, #568]	; (80067e8 <_strtod_l+0x290>)
 80065b0:	ab17      	add	r3, sp, #92	; 0x5c
 80065b2:	a915      	add	r1, sp, #84	; 0x54
 80065b4:	4620      	mov	r0, r4
 80065b6:	f001 f8a5 	bl	8007704 <__gethex>
 80065ba:	f010 070f 	ands.w	r7, r0, #15
 80065be:	4605      	mov	r5, r0
 80065c0:	d005      	beq.n	80065ce <_strtod_l+0x76>
 80065c2:	2f06      	cmp	r7, #6
 80065c4:	d12a      	bne.n	800661c <_strtod_l+0xc4>
 80065c6:	3601      	adds	r6, #1
 80065c8:	2300      	movs	r3, #0
 80065ca:	9615      	str	r6, [sp, #84]	; 0x54
 80065cc:	930a      	str	r3, [sp, #40]	; 0x28
 80065ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f040 857f 	bne.w	80070d4 <_strtod_l+0xb7c>
 80065d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d8:	b1db      	cbz	r3, 8006612 <_strtod_l+0xba>
 80065da:	4642      	mov	r2, r8
 80065dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80065e0:	ec43 2b10 	vmov	d0, r2, r3
 80065e4:	b01b      	add	sp, #108	; 0x6c
 80065e6:	ecbd 8b02 	vpop	{d8}
 80065ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ee:	2920      	cmp	r1, #32
 80065f0:	d1cc      	bne.n	800658c <_strtod_l+0x34>
 80065f2:	3201      	adds	r2, #1
 80065f4:	e7bf      	b.n	8006576 <_strtod_l+0x1e>
 80065f6:	292d      	cmp	r1, #45	; 0x2d
 80065f8:	d1c8      	bne.n	800658c <_strtod_l+0x34>
 80065fa:	2101      	movs	r1, #1
 80065fc:	910a      	str	r1, [sp, #40]	; 0x28
 80065fe:	1c51      	adds	r1, r2, #1
 8006600:	9115      	str	r1, [sp, #84]	; 0x54
 8006602:	7852      	ldrb	r2, [r2, #1]
 8006604:	2a00      	cmp	r2, #0
 8006606:	d1c3      	bne.n	8006590 <_strtod_l+0x38>
 8006608:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800660a:	9515      	str	r5, [sp, #84]	; 0x54
 800660c:	2b00      	cmp	r3, #0
 800660e:	f040 855f 	bne.w	80070d0 <_strtod_l+0xb78>
 8006612:	4642      	mov	r2, r8
 8006614:	464b      	mov	r3, r9
 8006616:	e7e3      	b.n	80065e0 <_strtod_l+0x88>
 8006618:	2100      	movs	r1, #0
 800661a:	e7ef      	b.n	80065fc <_strtod_l+0xa4>
 800661c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800661e:	b13a      	cbz	r2, 8006630 <_strtod_l+0xd8>
 8006620:	2135      	movs	r1, #53	; 0x35
 8006622:	a818      	add	r0, sp, #96	; 0x60
 8006624:	f002 f88d 	bl	8008742 <__copybits>
 8006628:	9916      	ldr	r1, [sp, #88]	; 0x58
 800662a:	4620      	mov	r0, r4
 800662c:	f001 fc60 	bl	8007ef0 <_Bfree>
 8006630:	3f01      	subs	r7, #1
 8006632:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006634:	2f04      	cmp	r7, #4
 8006636:	d806      	bhi.n	8006646 <_strtod_l+0xee>
 8006638:	e8df f007 	tbb	[pc, r7]
 800663c:	201d0314 	.word	0x201d0314
 8006640:	14          	.byte	0x14
 8006641:	00          	.byte	0x00
 8006642:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006646:	05e9      	lsls	r1, r5, #23
 8006648:	bf48      	it	mi
 800664a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800664e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006652:	0d1b      	lsrs	r3, r3, #20
 8006654:	051b      	lsls	r3, r3, #20
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1b9      	bne.n	80065ce <_strtod_l+0x76>
 800665a:	f000 ff3b 	bl	80074d4 <__errno>
 800665e:	2322      	movs	r3, #34	; 0x22
 8006660:	6003      	str	r3, [r0, #0]
 8006662:	e7b4      	b.n	80065ce <_strtod_l+0x76>
 8006664:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006668:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800666c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006670:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006674:	e7e7      	b.n	8006646 <_strtod_l+0xee>
 8006676:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80067f0 <_strtod_l+0x298>
 800667a:	e7e4      	b.n	8006646 <_strtod_l+0xee>
 800667c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006680:	f04f 38ff 	mov.w	r8, #4294967295
 8006684:	e7df      	b.n	8006646 <_strtod_l+0xee>
 8006686:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	9215      	str	r2, [sp, #84]	; 0x54
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b30      	cmp	r3, #48	; 0x30
 8006690:	d0f9      	beq.n	8006686 <_strtod_l+0x12e>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d09b      	beq.n	80065ce <_strtod_l+0x76>
 8006696:	2301      	movs	r3, #1
 8006698:	f04f 0a00 	mov.w	sl, #0
 800669c:	9304      	str	r3, [sp, #16]
 800669e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80066a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80066a6:	46d3      	mov	fp, sl
 80066a8:	220a      	movs	r2, #10
 80066aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80066ac:	7806      	ldrb	r6, [r0, #0]
 80066ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80066b2:	b2d9      	uxtb	r1, r3
 80066b4:	2909      	cmp	r1, #9
 80066b6:	d926      	bls.n	8006706 <_strtod_l+0x1ae>
 80066b8:	494c      	ldr	r1, [pc, #304]	; (80067ec <_strtod_l+0x294>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	f000 fe55 	bl	800736a <strncmp>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d030      	beq.n	8006726 <_strtod_l+0x1ce>
 80066c4:	2000      	movs	r0, #0
 80066c6:	4632      	mov	r2, r6
 80066c8:	9005      	str	r0, [sp, #20]
 80066ca:	465e      	mov	r6, fp
 80066cc:	4603      	mov	r3, r0
 80066ce:	2a65      	cmp	r2, #101	; 0x65
 80066d0:	d001      	beq.n	80066d6 <_strtod_l+0x17e>
 80066d2:	2a45      	cmp	r2, #69	; 0x45
 80066d4:	d113      	bne.n	80066fe <_strtod_l+0x1a6>
 80066d6:	b91e      	cbnz	r6, 80066e0 <_strtod_l+0x188>
 80066d8:	9a04      	ldr	r2, [sp, #16]
 80066da:	4302      	orrs	r2, r0
 80066dc:	d094      	beq.n	8006608 <_strtod_l+0xb0>
 80066de:	2600      	movs	r6, #0
 80066e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80066e2:	1c6a      	adds	r2, r5, #1
 80066e4:	9215      	str	r2, [sp, #84]	; 0x54
 80066e6:	786a      	ldrb	r2, [r5, #1]
 80066e8:	2a2b      	cmp	r2, #43	; 0x2b
 80066ea:	d074      	beq.n	80067d6 <_strtod_l+0x27e>
 80066ec:	2a2d      	cmp	r2, #45	; 0x2d
 80066ee:	d078      	beq.n	80067e2 <_strtod_l+0x28a>
 80066f0:	f04f 0c00 	mov.w	ip, #0
 80066f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80066f8:	2909      	cmp	r1, #9
 80066fa:	d97f      	bls.n	80067fc <_strtod_l+0x2a4>
 80066fc:	9515      	str	r5, [sp, #84]	; 0x54
 80066fe:	2700      	movs	r7, #0
 8006700:	e09e      	b.n	8006840 <_strtod_l+0x2e8>
 8006702:	2300      	movs	r3, #0
 8006704:	e7c8      	b.n	8006698 <_strtod_l+0x140>
 8006706:	f1bb 0f08 	cmp.w	fp, #8
 800670a:	bfd8      	it	le
 800670c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800670e:	f100 0001 	add.w	r0, r0, #1
 8006712:	bfda      	itte	le
 8006714:	fb02 3301 	mlale	r3, r2, r1, r3
 8006718:	9309      	strle	r3, [sp, #36]	; 0x24
 800671a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800671e:	f10b 0b01 	add.w	fp, fp, #1
 8006722:	9015      	str	r0, [sp, #84]	; 0x54
 8006724:	e7c1      	b.n	80066aa <_strtod_l+0x152>
 8006726:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	9215      	str	r2, [sp, #84]	; 0x54
 800672c:	785a      	ldrb	r2, [r3, #1]
 800672e:	f1bb 0f00 	cmp.w	fp, #0
 8006732:	d037      	beq.n	80067a4 <_strtod_l+0x24c>
 8006734:	9005      	str	r0, [sp, #20]
 8006736:	465e      	mov	r6, fp
 8006738:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800673c:	2b09      	cmp	r3, #9
 800673e:	d912      	bls.n	8006766 <_strtod_l+0x20e>
 8006740:	2301      	movs	r3, #1
 8006742:	e7c4      	b.n	80066ce <_strtod_l+0x176>
 8006744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	9215      	str	r2, [sp, #84]	; 0x54
 800674a:	785a      	ldrb	r2, [r3, #1]
 800674c:	3001      	adds	r0, #1
 800674e:	2a30      	cmp	r2, #48	; 0x30
 8006750:	d0f8      	beq.n	8006744 <_strtod_l+0x1ec>
 8006752:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006756:	2b08      	cmp	r3, #8
 8006758:	f200 84c1 	bhi.w	80070de <_strtod_l+0xb86>
 800675c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800675e:	9005      	str	r0, [sp, #20]
 8006760:	2000      	movs	r0, #0
 8006762:	930b      	str	r3, [sp, #44]	; 0x2c
 8006764:	4606      	mov	r6, r0
 8006766:	3a30      	subs	r2, #48	; 0x30
 8006768:	f100 0301 	add.w	r3, r0, #1
 800676c:	d014      	beq.n	8006798 <_strtod_l+0x240>
 800676e:	9905      	ldr	r1, [sp, #20]
 8006770:	4419      	add	r1, r3
 8006772:	9105      	str	r1, [sp, #20]
 8006774:	4633      	mov	r3, r6
 8006776:	eb00 0c06 	add.w	ip, r0, r6
 800677a:	210a      	movs	r1, #10
 800677c:	4563      	cmp	r3, ip
 800677e:	d113      	bne.n	80067a8 <_strtod_l+0x250>
 8006780:	1833      	adds	r3, r6, r0
 8006782:	2b08      	cmp	r3, #8
 8006784:	f106 0601 	add.w	r6, r6, #1
 8006788:	4406      	add	r6, r0
 800678a:	dc1a      	bgt.n	80067c2 <_strtod_l+0x26a>
 800678c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800678e:	230a      	movs	r3, #10
 8006790:	fb03 2301 	mla	r3, r3, r1, r2
 8006794:	9309      	str	r3, [sp, #36]	; 0x24
 8006796:	2300      	movs	r3, #0
 8006798:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800679a:	1c51      	adds	r1, r2, #1
 800679c:	9115      	str	r1, [sp, #84]	; 0x54
 800679e:	7852      	ldrb	r2, [r2, #1]
 80067a0:	4618      	mov	r0, r3
 80067a2:	e7c9      	b.n	8006738 <_strtod_l+0x1e0>
 80067a4:	4658      	mov	r0, fp
 80067a6:	e7d2      	b.n	800674e <_strtod_l+0x1f6>
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	f103 0301 	add.w	r3, r3, #1
 80067ae:	dc03      	bgt.n	80067b8 <_strtod_l+0x260>
 80067b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80067b2:	434f      	muls	r7, r1
 80067b4:	9709      	str	r7, [sp, #36]	; 0x24
 80067b6:	e7e1      	b.n	800677c <_strtod_l+0x224>
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	bfd8      	it	le
 80067bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80067c0:	e7dc      	b.n	800677c <_strtod_l+0x224>
 80067c2:	2e10      	cmp	r6, #16
 80067c4:	bfdc      	itt	le
 80067c6:	230a      	movle	r3, #10
 80067c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80067cc:	e7e3      	b.n	8006796 <_strtod_l+0x23e>
 80067ce:	2300      	movs	r3, #0
 80067d0:	9305      	str	r3, [sp, #20]
 80067d2:	2301      	movs	r3, #1
 80067d4:	e780      	b.n	80066d8 <_strtod_l+0x180>
 80067d6:	f04f 0c00 	mov.w	ip, #0
 80067da:	1caa      	adds	r2, r5, #2
 80067dc:	9215      	str	r2, [sp, #84]	; 0x54
 80067de:	78aa      	ldrb	r2, [r5, #2]
 80067e0:	e788      	b.n	80066f4 <_strtod_l+0x19c>
 80067e2:	f04f 0c01 	mov.w	ip, #1
 80067e6:	e7f8      	b.n	80067da <_strtod_l+0x282>
 80067e8:	08009438 	.word	0x08009438
 80067ec:	08009428 	.word	0x08009428
 80067f0:	7ff00000 	.word	0x7ff00000
 80067f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80067f6:	1c51      	adds	r1, r2, #1
 80067f8:	9115      	str	r1, [sp, #84]	; 0x54
 80067fa:	7852      	ldrb	r2, [r2, #1]
 80067fc:	2a30      	cmp	r2, #48	; 0x30
 80067fe:	d0f9      	beq.n	80067f4 <_strtod_l+0x29c>
 8006800:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006804:	2908      	cmp	r1, #8
 8006806:	f63f af7a 	bhi.w	80066fe <_strtod_l+0x1a6>
 800680a:	3a30      	subs	r2, #48	; 0x30
 800680c:	9208      	str	r2, [sp, #32]
 800680e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006810:	920c      	str	r2, [sp, #48]	; 0x30
 8006812:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006814:	1c57      	adds	r7, r2, #1
 8006816:	9715      	str	r7, [sp, #84]	; 0x54
 8006818:	7852      	ldrb	r2, [r2, #1]
 800681a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800681e:	f1be 0f09 	cmp.w	lr, #9
 8006822:	d938      	bls.n	8006896 <_strtod_l+0x33e>
 8006824:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006826:	1a7f      	subs	r7, r7, r1
 8006828:	2f08      	cmp	r7, #8
 800682a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800682e:	dc03      	bgt.n	8006838 <_strtod_l+0x2e0>
 8006830:	9908      	ldr	r1, [sp, #32]
 8006832:	428f      	cmp	r7, r1
 8006834:	bfa8      	it	ge
 8006836:	460f      	movge	r7, r1
 8006838:	f1bc 0f00 	cmp.w	ip, #0
 800683c:	d000      	beq.n	8006840 <_strtod_l+0x2e8>
 800683e:	427f      	negs	r7, r7
 8006840:	2e00      	cmp	r6, #0
 8006842:	d14f      	bne.n	80068e4 <_strtod_l+0x38c>
 8006844:	9904      	ldr	r1, [sp, #16]
 8006846:	4301      	orrs	r1, r0
 8006848:	f47f aec1 	bne.w	80065ce <_strtod_l+0x76>
 800684c:	2b00      	cmp	r3, #0
 800684e:	f47f aedb 	bne.w	8006608 <_strtod_l+0xb0>
 8006852:	2a69      	cmp	r2, #105	; 0x69
 8006854:	d029      	beq.n	80068aa <_strtod_l+0x352>
 8006856:	dc26      	bgt.n	80068a6 <_strtod_l+0x34e>
 8006858:	2a49      	cmp	r2, #73	; 0x49
 800685a:	d026      	beq.n	80068aa <_strtod_l+0x352>
 800685c:	2a4e      	cmp	r2, #78	; 0x4e
 800685e:	f47f aed3 	bne.w	8006608 <_strtod_l+0xb0>
 8006862:	499b      	ldr	r1, [pc, #620]	; (8006ad0 <_strtod_l+0x578>)
 8006864:	a815      	add	r0, sp, #84	; 0x54
 8006866:	f001 f98d 	bl	8007b84 <__match>
 800686a:	2800      	cmp	r0, #0
 800686c:	f43f aecc 	beq.w	8006608 <_strtod_l+0xb0>
 8006870:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b28      	cmp	r3, #40	; 0x28
 8006876:	d12f      	bne.n	80068d8 <_strtod_l+0x380>
 8006878:	4996      	ldr	r1, [pc, #600]	; (8006ad4 <_strtod_l+0x57c>)
 800687a:	aa18      	add	r2, sp, #96	; 0x60
 800687c:	a815      	add	r0, sp, #84	; 0x54
 800687e:	f001 f995 	bl	8007bac <__hexnan>
 8006882:	2805      	cmp	r0, #5
 8006884:	d128      	bne.n	80068d8 <_strtod_l+0x380>
 8006886:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006888:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800688c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006890:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006894:	e69b      	b.n	80065ce <_strtod_l+0x76>
 8006896:	9f08      	ldr	r7, [sp, #32]
 8006898:	210a      	movs	r1, #10
 800689a:	fb01 2107 	mla	r1, r1, r7, r2
 800689e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80068a2:	9208      	str	r2, [sp, #32]
 80068a4:	e7b5      	b.n	8006812 <_strtod_l+0x2ba>
 80068a6:	2a6e      	cmp	r2, #110	; 0x6e
 80068a8:	e7d9      	b.n	800685e <_strtod_l+0x306>
 80068aa:	498b      	ldr	r1, [pc, #556]	; (8006ad8 <_strtod_l+0x580>)
 80068ac:	a815      	add	r0, sp, #84	; 0x54
 80068ae:	f001 f969 	bl	8007b84 <__match>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	f43f aea8 	beq.w	8006608 <_strtod_l+0xb0>
 80068b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068ba:	4988      	ldr	r1, [pc, #544]	; (8006adc <_strtod_l+0x584>)
 80068bc:	3b01      	subs	r3, #1
 80068be:	a815      	add	r0, sp, #84	; 0x54
 80068c0:	9315      	str	r3, [sp, #84]	; 0x54
 80068c2:	f001 f95f 	bl	8007b84 <__match>
 80068c6:	b910      	cbnz	r0, 80068ce <_strtod_l+0x376>
 80068c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068ca:	3301      	adds	r3, #1
 80068cc:	9315      	str	r3, [sp, #84]	; 0x54
 80068ce:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006aec <_strtod_l+0x594>
 80068d2:	f04f 0800 	mov.w	r8, #0
 80068d6:	e67a      	b.n	80065ce <_strtod_l+0x76>
 80068d8:	4881      	ldr	r0, [pc, #516]	; (8006ae0 <_strtod_l+0x588>)
 80068da:	f000 fe39 	bl	8007550 <nan>
 80068de:	ec59 8b10 	vmov	r8, r9, d0
 80068e2:	e674      	b.n	80065ce <_strtod_l+0x76>
 80068e4:	9b05      	ldr	r3, [sp, #20]
 80068e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068e8:	1afb      	subs	r3, r7, r3
 80068ea:	f1bb 0f00 	cmp.w	fp, #0
 80068ee:	bf08      	it	eq
 80068f0:	46b3      	moveq	fp, r6
 80068f2:	2e10      	cmp	r6, #16
 80068f4:	9308      	str	r3, [sp, #32]
 80068f6:	4635      	mov	r5, r6
 80068f8:	bfa8      	it	ge
 80068fa:	2510      	movge	r5, #16
 80068fc:	f7f9 fe1a 	bl	8000534 <__aeabi_ui2d>
 8006900:	2e09      	cmp	r6, #9
 8006902:	4680      	mov	r8, r0
 8006904:	4689      	mov	r9, r1
 8006906:	dd13      	ble.n	8006930 <_strtod_l+0x3d8>
 8006908:	4b76      	ldr	r3, [pc, #472]	; (8006ae4 <_strtod_l+0x58c>)
 800690a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800690e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006912:	f7f9 fe89 	bl	8000628 <__aeabi_dmul>
 8006916:	4680      	mov	r8, r0
 8006918:	4650      	mov	r0, sl
 800691a:	4689      	mov	r9, r1
 800691c:	f7f9 fe0a 	bl	8000534 <__aeabi_ui2d>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4640      	mov	r0, r8
 8006926:	4649      	mov	r1, r9
 8006928:	f7f9 fcc8 	bl	80002bc <__adddf3>
 800692c:	4680      	mov	r8, r0
 800692e:	4689      	mov	r9, r1
 8006930:	2e0f      	cmp	r6, #15
 8006932:	dc38      	bgt.n	80069a6 <_strtod_l+0x44e>
 8006934:	9b08      	ldr	r3, [sp, #32]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f43f ae49 	beq.w	80065ce <_strtod_l+0x76>
 800693c:	dd24      	ble.n	8006988 <_strtod_l+0x430>
 800693e:	2b16      	cmp	r3, #22
 8006940:	dc0b      	bgt.n	800695a <_strtod_l+0x402>
 8006942:	4968      	ldr	r1, [pc, #416]	; (8006ae4 <_strtod_l+0x58c>)
 8006944:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800694c:	4642      	mov	r2, r8
 800694e:	464b      	mov	r3, r9
 8006950:	f7f9 fe6a 	bl	8000628 <__aeabi_dmul>
 8006954:	4680      	mov	r8, r0
 8006956:	4689      	mov	r9, r1
 8006958:	e639      	b.n	80065ce <_strtod_l+0x76>
 800695a:	9a08      	ldr	r2, [sp, #32]
 800695c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006960:	4293      	cmp	r3, r2
 8006962:	db20      	blt.n	80069a6 <_strtod_l+0x44e>
 8006964:	4c5f      	ldr	r4, [pc, #380]	; (8006ae4 <_strtod_l+0x58c>)
 8006966:	f1c6 060f 	rsb	r6, r6, #15
 800696a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800696e:	4642      	mov	r2, r8
 8006970:	464b      	mov	r3, r9
 8006972:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006976:	f7f9 fe57 	bl	8000628 <__aeabi_dmul>
 800697a:	9b08      	ldr	r3, [sp, #32]
 800697c:	1b9e      	subs	r6, r3, r6
 800697e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006982:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006986:	e7e3      	b.n	8006950 <_strtod_l+0x3f8>
 8006988:	9b08      	ldr	r3, [sp, #32]
 800698a:	3316      	adds	r3, #22
 800698c:	db0b      	blt.n	80069a6 <_strtod_l+0x44e>
 800698e:	9b05      	ldr	r3, [sp, #20]
 8006990:	1bdf      	subs	r7, r3, r7
 8006992:	4b54      	ldr	r3, [pc, #336]	; (8006ae4 <_strtod_l+0x58c>)
 8006994:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800699c:	4640      	mov	r0, r8
 800699e:	4649      	mov	r1, r9
 80069a0:	f7f9 ff6c 	bl	800087c <__aeabi_ddiv>
 80069a4:	e7d6      	b.n	8006954 <_strtod_l+0x3fc>
 80069a6:	9b08      	ldr	r3, [sp, #32]
 80069a8:	1b75      	subs	r5, r6, r5
 80069aa:	441d      	add	r5, r3
 80069ac:	2d00      	cmp	r5, #0
 80069ae:	dd70      	ble.n	8006a92 <_strtod_l+0x53a>
 80069b0:	f015 030f 	ands.w	r3, r5, #15
 80069b4:	d00a      	beq.n	80069cc <_strtod_l+0x474>
 80069b6:	494b      	ldr	r1, [pc, #300]	; (8006ae4 <_strtod_l+0x58c>)
 80069b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069bc:	4642      	mov	r2, r8
 80069be:	464b      	mov	r3, r9
 80069c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069c4:	f7f9 fe30 	bl	8000628 <__aeabi_dmul>
 80069c8:	4680      	mov	r8, r0
 80069ca:	4689      	mov	r9, r1
 80069cc:	f035 050f 	bics.w	r5, r5, #15
 80069d0:	d04d      	beq.n	8006a6e <_strtod_l+0x516>
 80069d2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80069d6:	dd22      	ble.n	8006a1e <_strtod_l+0x4c6>
 80069d8:	2500      	movs	r5, #0
 80069da:	46ab      	mov	fp, r5
 80069dc:	9509      	str	r5, [sp, #36]	; 0x24
 80069de:	9505      	str	r5, [sp, #20]
 80069e0:	2322      	movs	r3, #34	; 0x22
 80069e2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006aec <_strtod_l+0x594>
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	f04f 0800 	mov.w	r8, #0
 80069ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f43f aded 	beq.w	80065ce <_strtod_l+0x76>
 80069f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80069f6:	4620      	mov	r0, r4
 80069f8:	f001 fa7a 	bl	8007ef0 <_Bfree>
 80069fc:	9905      	ldr	r1, [sp, #20]
 80069fe:	4620      	mov	r0, r4
 8006a00:	f001 fa76 	bl	8007ef0 <_Bfree>
 8006a04:	4659      	mov	r1, fp
 8006a06:	4620      	mov	r0, r4
 8006a08:	f001 fa72 	bl	8007ef0 <_Bfree>
 8006a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f001 fa6e 	bl	8007ef0 <_Bfree>
 8006a14:	4629      	mov	r1, r5
 8006a16:	4620      	mov	r0, r4
 8006a18:	f001 fa6a 	bl	8007ef0 <_Bfree>
 8006a1c:	e5d7      	b.n	80065ce <_strtod_l+0x76>
 8006a1e:	4b32      	ldr	r3, [pc, #200]	; (8006ae8 <_strtod_l+0x590>)
 8006a20:	9304      	str	r3, [sp, #16]
 8006a22:	2300      	movs	r3, #0
 8006a24:	112d      	asrs	r5, r5, #4
 8006a26:	4640      	mov	r0, r8
 8006a28:	4649      	mov	r1, r9
 8006a2a:	469a      	mov	sl, r3
 8006a2c:	2d01      	cmp	r5, #1
 8006a2e:	dc21      	bgt.n	8006a74 <_strtod_l+0x51c>
 8006a30:	b10b      	cbz	r3, 8006a36 <_strtod_l+0x4de>
 8006a32:	4680      	mov	r8, r0
 8006a34:	4689      	mov	r9, r1
 8006a36:	492c      	ldr	r1, [pc, #176]	; (8006ae8 <_strtod_l+0x590>)
 8006a38:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006a3c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006a40:	4642      	mov	r2, r8
 8006a42:	464b      	mov	r3, r9
 8006a44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a48:	f7f9 fdee 	bl	8000628 <__aeabi_dmul>
 8006a4c:	4b27      	ldr	r3, [pc, #156]	; (8006aec <_strtod_l+0x594>)
 8006a4e:	460a      	mov	r2, r1
 8006a50:	400b      	ands	r3, r1
 8006a52:	4927      	ldr	r1, [pc, #156]	; (8006af0 <_strtod_l+0x598>)
 8006a54:	428b      	cmp	r3, r1
 8006a56:	4680      	mov	r8, r0
 8006a58:	d8be      	bhi.n	80069d8 <_strtod_l+0x480>
 8006a5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a5e:	428b      	cmp	r3, r1
 8006a60:	bf86      	itte	hi
 8006a62:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006af4 <_strtod_l+0x59c>
 8006a66:	f04f 38ff 	movhi.w	r8, #4294967295
 8006a6a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9304      	str	r3, [sp, #16]
 8006a72:	e07b      	b.n	8006b6c <_strtod_l+0x614>
 8006a74:	07ea      	lsls	r2, r5, #31
 8006a76:	d505      	bpl.n	8006a84 <_strtod_l+0x52c>
 8006a78:	9b04      	ldr	r3, [sp, #16]
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	f7f9 fdd3 	bl	8000628 <__aeabi_dmul>
 8006a82:	2301      	movs	r3, #1
 8006a84:	9a04      	ldr	r2, [sp, #16]
 8006a86:	3208      	adds	r2, #8
 8006a88:	f10a 0a01 	add.w	sl, sl, #1
 8006a8c:	106d      	asrs	r5, r5, #1
 8006a8e:	9204      	str	r2, [sp, #16]
 8006a90:	e7cc      	b.n	8006a2c <_strtod_l+0x4d4>
 8006a92:	d0ec      	beq.n	8006a6e <_strtod_l+0x516>
 8006a94:	426d      	negs	r5, r5
 8006a96:	f015 020f 	ands.w	r2, r5, #15
 8006a9a:	d00a      	beq.n	8006ab2 <_strtod_l+0x55a>
 8006a9c:	4b11      	ldr	r3, [pc, #68]	; (8006ae4 <_strtod_l+0x58c>)
 8006a9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f7f9 fee7 	bl	800087c <__aeabi_ddiv>
 8006aae:	4680      	mov	r8, r0
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	112d      	asrs	r5, r5, #4
 8006ab4:	d0db      	beq.n	8006a6e <_strtod_l+0x516>
 8006ab6:	2d1f      	cmp	r5, #31
 8006ab8:	dd1e      	ble.n	8006af8 <_strtod_l+0x5a0>
 8006aba:	2500      	movs	r5, #0
 8006abc:	46ab      	mov	fp, r5
 8006abe:	9509      	str	r5, [sp, #36]	; 0x24
 8006ac0:	9505      	str	r5, [sp, #20]
 8006ac2:	2322      	movs	r3, #34	; 0x22
 8006ac4:	f04f 0800 	mov.w	r8, #0
 8006ac8:	f04f 0900 	mov.w	r9, #0
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	e78d      	b.n	80069ec <_strtod_l+0x494>
 8006ad0:	08009433 	.word	0x08009433
 8006ad4:	0800944c 	.word	0x0800944c
 8006ad8:	0800942a 	.word	0x0800942a
 8006adc:	0800942d 	.word	0x0800942d
 8006ae0:	0800953c 	.word	0x0800953c
 8006ae4:	08009630 	.word	0x08009630
 8006ae8:	08009608 	.word	0x08009608
 8006aec:	7ff00000 	.word	0x7ff00000
 8006af0:	7ca00000 	.word	0x7ca00000
 8006af4:	7fefffff 	.word	0x7fefffff
 8006af8:	f015 0310 	ands.w	r3, r5, #16
 8006afc:	bf18      	it	ne
 8006afe:	236a      	movne	r3, #106	; 0x6a
 8006b00:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8006ea4 <_strtod_l+0x94c>
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	4640      	mov	r0, r8
 8006b08:	4649      	mov	r1, r9
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	07ea      	lsls	r2, r5, #31
 8006b0e:	d504      	bpl.n	8006b1a <_strtod_l+0x5c2>
 8006b10:	e9da 2300 	ldrd	r2, r3, [sl]
 8006b14:	f7f9 fd88 	bl	8000628 <__aeabi_dmul>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	106d      	asrs	r5, r5, #1
 8006b1c:	f10a 0a08 	add.w	sl, sl, #8
 8006b20:	d1f4      	bne.n	8006b0c <_strtod_l+0x5b4>
 8006b22:	b10b      	cbz	r3, 8006b28 <_strtod_l+0x5d0>
 8006b24:	4680      	mov	r8, r0
 8006b26:	4689      	mov	r9, r1
 8006b28:	9b04      	ldr	r3, [sp, #16]
 8006b2a:	b1bb      	cbz	r3, 8006b5c <_strtod_l+0x604>
 8006b2c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006b30:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	4649      	mov	r1, r9
 8006b38:	dd10      	ble.n	8006b5c <_strtod_l+0x604>
 8006b3a:	2b1f      	cmp	r3, #31
 8006b3c:	f340 811e 	ble.w	8006d7c <_strtod_l+0x824>
 8006b40:	2b34      	cmp	r3, #52	; 0x34
 8006b42:	bfde      	ittt	le
 8006b44:	f04f 33ff 	movle.w	r3, #4294967295
 8006b48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006b4c:	4093      	lslle	r3, r2
 8006b4e:	f04f 0800 	mov.w	r8, #0
 8006b52:	bfcc      	ite	gt
 8006b54:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006b58:	ea03 0901 	andle.w	r9, r3, r1
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2300      	movs	r3, #0
 8006b60:	4640      	mov	r0, r8
 8006b62:	4649      	mov	r1, r9
 8006b64:	f7f9 ffc8 	bl	8000af8 <__aeabi_dcmpeq>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d1a6      	bne.n	8006aba <_strtod_l+0x562>
 8006b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b72:	4633      	mov	r3, r6
 8006b74:	465a      	mov	r2, fp
 8006b76:	4620      	mov	r0, r4
 8006b78:	f001 fa22 	bl	8007fc0 <__s2b>
 8006b7c:	9009      	str	r0, [sp, #36]	; 0x24
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	f43f af2a 	beq.w	80069d8 <_strtod_l+0x480>
 8006b84:	9a08      	ldr	r2, [sp, #32]
 8006b86:	9b05      	ldr	r3, [sp, #20]
 8006b88:	2a00      	cmp	r2, #0
 8006b8a:	eba3 0307 	sub.w	r3, r3, r7
 8006b8e:	bfa8      	it	ge
 8006b90:	2300      	movge	r3, #0
 8006b92:	930c      	str	r3, [sp, #48]	; 0x30
 8006b94:	2500      	movs	r5, #0
 8006b96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006b9a:	9312      	str	r3, [sp, #72]	; 0x48
 8006b9c:	46ab      	mov	fp, r5
 8006b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	6859      	ldr	r1, [r3, #4]
 8006ba4:	f001 f964 	bl	8007e70 <_Balloc>
 8006ba8:	9005      	str	r0, [sp, #20]
 8006baa:	2800      	cmp	r0, #0
 8006bac:	f43f af18 	beq.w	80069e0 <_strtod_l+0x488>
 8006bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	3202      	adds	r2, #2
 8006bb6:	f103 010c 	add.w	r1, r3, #12
 8006bba:	0092      	lsls	r2, r2, #2
 8006bbc:	300c      	adds	r0, #12
 8006bbe:	f000 fcb6 	bl	800752e <memcpy>
 8006bc2:	ec49 8b10 	vmov	d0, r8, r9
 8006bc6:	aa18      	add	r2, sp, #96	; 0x60
 8006bc8:	a917      	add	r1, sp, #92	; 0x5c
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f001 fd2c 	bl	8008628 <__d2b>
 8006bd0:	ec49 8b18 	vmov	d8, r8, r9
 8006bd4:	9016      	str	r0, [sp, #88]	; 0x58
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	f43f af02 	beq.w	80069e0 <_strtod_l+0x488>
 8006bdc:	2101      	movs	r1, #1
 8006bde:	4620      	mov	r0, r4
 8006be0:	f001 fa86 	bl	80080f0 <__i2b>
 8006be4:	4683      	mov	fp, r0
 8006be6:	2800      	cmp	r0, #0
 8006be8:	f43f aefa 	beq.w	80069e0 <_strtod_l+0x488>
 8006bec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006bee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006bf0:	2e00      	cmp	r6, #0
 8006bf2:	bfab      	itete	ge
 8006bf4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006bf6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006bf8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006bfa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006bfe:	bfac      	ite	ge
 8006c00:	eb06 0a03 	addge.w	sl, r6, r3
 8006c04:	1b9f      	sublt	r7, r3, r6
 8006c06:	9b04      	ldr	r3, [sp, #16]
 8006c08:	1af6      	subs	r6, r6, r3
 8006c0a:	4416      	add	r6, r2
 8006c0c:	4ba0      	ldr	r3, [pc, #640]	; (8006e90 <_strtod_l+0x938>)
 8006c0e:	3e01      	subs	r6, #1
 8006c10:	429e      	cmp	r6, r3
 8006c12:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c16:	f280 80c4 	bge.w	8006da2 <_strtod_l+0x84a>
 8006c1a:	1b9b      	subs	r3, r3, r6
 8006c1c:	2b1f      	cmp	r3, #31
 8006c1e:	eba2 0203 	sub.w	r2, r2, r3
 8006c22:	f04f 0101 	mov.w	r1, #1
 8006c26:	f300 80b0 	bgt.w	8006d8a <_strtod_l+0x832>
 8006c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2e:	930e      	str	r3, [sp, #56]	; 0x38
 8006c30:	2300      	movs	r3, #0
 8006c32:	930d      	str	r3, [sp, #52]	; 0x34
 8006c34:	eb0a 0602 	add.w	r6, sl, r2
 8006c38:	9b04      	ldr	r3, [sp, #16]
 8006c3a:	45b2      	cmp	sl, r6
 8006c3c:	4417      	add	r7, r2
 8006c3e:	441f      	add	r7, r3
 8006c40:	4653      	mov	r3, sl
 8006c42:	bfa8      	it	ge
 8006c44:	4633      	movge	r3, r6
 8006c46:	42bb      	cmp	r3, r7
 8006c48:	bfa8      	it	ge
 8006c4a:	463b      	movge	r3, r7
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	bfc2      	ittt	gt
 8006c50:	1af6      	subgt	r6, r6, r3
 8006c52:	1aff      	subgt	r7, r7, r3
 8006c54:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	dd17      	ble.n	8006c8e <_strtod_l+0x736>
 8006c5e:	4659      	mov	r1, fp
 8006c60:	461a      	mov	r2, r3
 8006c62:	4620      	mov	r0, r4
 8006c64:	f001 fb04 	bl	8008270 <__pow5mult>
 8006c68:	4683      	mov	fp, r0
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	f43f aeb8 	beq.w	80069e0 <_strtod_l+0x488>
 8006c70:	4601      	mov	r1, r0
 8006c72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006c74:	4620      	mov	r0, r4
 8006c76:	f001 fa51 	bl	800811c <__multiply>
 8006c7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	f43f aeaf 	beq.w	80069e0 <_strtod_l+0x488>
 8006c82:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006c84:	4620      	mov	r0, r4
 8006c86:	f001 f933 	bl	8007ef0 <_Bfree>
 8006c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c8c:	9316      	str	r3, [sp, #88]	; 0x58
 8006c8e:	2e00      	cmp	r6, #0
 8006c90:	f300 808c 	bgt.w	8006dac <_strtod_l+0x854>
 8006c94:	9b08      	ldr	r3, [sp, #32]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	dd08      	ble.n	8006cac <_strtod_l+0x754>
 8006c9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c9c:	9905      	ldr	r1, [sp, #20]
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f001 fae6 	bl	8008270 <__pow5mult>
 8006ca4:	9005      	str	r0, [sp, #20]
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	f43f ae9a 	beq.w	80069e0 <_strtod_l+0x488>
 8006cac:	2f00      	cmp	r7, #0
 8006cae:	dd08      	ble.n	8006cc2 <_strtod_l+0x76a>
 8006cb0:	9905      	ldr	r1, [sp, #20]
 8006cb2:	463a      	mov	r2, r7
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f001 fb35 	bl	8008324 <__lshift>
 8006cba:	9005      	str	r0, [sp, #20]
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	f43f ae8f 	beq.w	80069e0 <_strtod_l+0x488>
 8006cc2:	f1ba 0f00 	cmp.w	sl, #0
 8006cc6:	dd08      	ble.n	8006cda <_strtod_l+0x782>
 8006cc8:	4659      	mov	r1, fp
 8006cca:	4652      	mov	r2, sl
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f001 fb29 	bl	8008324 <__lshift>
 8006cd2:	4683      	mov	fp, r0
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	f43f ae83 	beq.w	80069e0 <_strtod_l+0x488>
 8006cda:	9a05      	ldr	r2, [sp, #20]
 8006cdc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f001 fba8 	bl	8008434 <__mdiff>
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f43f ae7a 	beq.w	80069e0 <_strtod_l+0x488>
 8006cec:	68c3      	ldr	r3, [r0, #12]
 8006cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60c3      	str	r3, [r0, #12]
 8006cf4:	4659      	mov	r1, fp
 8006cf6:	f001 fb81 	bl	80083fc <__mcmp>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	da60      	bge.n	8006dc0 <_strtod_l+0x868>
 8006cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d00:	ea53 0308 	orrs.w	r3, r3, r8
 8006d04:	f040 8084 	bne.w	8006e10 <_strtod_l+0x8b8>
 8006d08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d17f      	bne.n	8006e10 <_strtod_l+0x8b8>
 8006d10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d14:	0d1b      	lsrs	r3, r3, #20
 8006d16:	051b      	lsls	r3, r3, #20
 8006d18:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d1c:	d978      	bls.n	8006e10 <_strtod_l+0x8b8>
 8006d1e:	696b      	ldr	r3, [r5, #20]
 8006d20:	b913      	cbnz	r3, 8006d28 <_strtod_l+0x7d0>
 8006d22:	692b      	ldr	r3, [r5, #16]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	dd73      	ble.n	8006e10 <_strtod_l+0x8b8>
 8006d28:	4629      	mov	r1, r5
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f001 faf9 	bl	8008324 <__lshift>
 8006d32:	4659      	mov	r1, fp
 8006d34:	4605      	mov	r5, r0
 8006d36:	f001 fb61 	bl	80083fc <__mcmp>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	dd68      	ble.n	8006e10 <_strtod_l+0x8b8>
 8006d3e:	9904      	ldr	r1, [sp, #16]
 8006d40:	4a54      	ldr	r2, [pc, #336]	; (8006e94 <_strtod_l+0x93c>)
 8006d42:	464b      	mov	r3, r9
 8006d44:	2900      	cmp	r1, #0
 8006d46:	f000 8084 	beq.w	8006e52 <_strtod_l+0x8fa>
 8006d4a:	ea02 0109 	and.w	r1, r2, r9
 8006d4e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d52:	dc7e      	bgt.n	8006e52 <_strtod_l+0x8fa>
 8006d54:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d58:	f77f aeb3 	ble.w	8006ac2 <_strtod_l+0x56a>
 8006d5c:	4b4e      	ldr	r3, [pc, #312]	; (8006e98 <_strtod_l+0x940>)
 8006d5e:	4640      	mov	r0, r8
 8006d60:	4649      	mov	r1, r9
 8006d62:	2200      	movs	r2, #0
 8006d64:	f7f9 fc60 	bl	8000628 <__aeabi_dmul>
 8006d68:	4b4a      	ldr	r3, [pc, #296]	; (8006e94 <_strtod_l+0x93c>)
 8006d6a:	400b      	ands	r3, r1
 8006d6c:	4680      	mov	r8, r0
 8006d6e:	4689      	mov	r9, r1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f47f ae3f 	bne.w	80069f4 <_strtod_l+0x49c>
 8006d76:	2322      	movs	r3, #34	; 0x22
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	e63b      	b.n	80069f4 <_strtod_l+0x49c>
 8006d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	ea03 0808 	and.w	r8, r3, r8
 8006d88:	e6e8      	b.n	8006b5c <_strtod_l+0x604>
 8006d8a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006d8e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006d92:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006d96:	36e2      	adds	r6, #226	; 0xe2
 8006d98:	fa01 f306 	lsl.w	r3, r1, r6
 8006d9c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006da0:	e748      	b.n	8006c34 <_strtod_l+0x6dc>
 8006da2:	2100      	movs	r1, #0
 8006da4:	2301      	movs	r3, #1
 8006da6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8006daa:	e743      	b.n	8006c34 <_strtod_l+0x6dc>
 8006dac:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006dae:	4632      	mov	r2, r6
 8006db0:	4620      	mov	r0, r4
 8006db2:	f001 fab7 	bl	8008324 <__lshift>
 8006db6:	9016      	str	r0, [sp, #88]	; 0x58
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f47f af6b 	bne.w	8006c94 <_strtod_l+0x73c>
 8006dbe:	e60f      	b.n	80069e0 <_strtod_l+0x488>
 8006dc0:	46ca      	mov	sl, r9
 8006dc2:	d171      	bne.n	8006ea8 <_strtod_l+0x950>
 8006dc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006dca:	b352      	cbz	r2, 8006e22 <_strtod_l+0x8ca>
 8006dcc:	4a33      	ldr	r2, [pc, #204]	; (8006e9c <_strtod_l+0x944>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d12a      	bne.n	8006e28 <_strtod_l+0x8d0>
 8006dd2:	9b04      	ldr	r3, [sp, #16]
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	b1fb      	cbz	r3, 8006e18 <_strtod_l+0x8c0>
 8006dd8:	4b2e      	ldr	r3, [pc, #184]	; (8006e94 <_strtod_l+0x93c>)
 8006dda:	ea09 0303 	and.w	r3, r9, r3
 8006dde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006de2:	f04f 32ff 	mov.w	r2, #4294967295
 8006de6:	d81a      	bhi.n	8006e1e <_strtod_l+0x8c6>
 8006de8:	0d1b      	lsrs	r3, r3, #20
 8006dea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	4299      	cmp	r1, r3
 8006df4:	d118      	bne.n	8006e28 <_strtod_l+0x8d0>
 8006df6:	4b2a      	ldr	r3, [pc, #168]	; (8006ea0 <_strtod_l+0x948>)
 8006df8:	459a      	cmp	sl, r3
 8006dfa:	d102      	bne.n	8006e02 <_strtod_l+0x8aa>
 8006dfc:	3101      	adds	r1, #1
 8006dfe:	f43f adef 	beq.w	80069e0 <_strtod_l+0x488>
 8006e02:	4b24      	ldr	r3, [pc, #144]	; (8006e94 <_strtod_l+0x93c>)
 8006e04:	ea0a 0303 	and.w	r3, sl, r3
 8006e08:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006e0c:	f04f 0800 	mov.w	r8, #0
 8006e10:	9b04      	ldr	r3, [sp, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1a2      	bne.n	8006d5c <_strtod_l+0x804>
 8006e16:	e5ed      	b.n	80069f4 <_strtod_l+0x49c>
 8006e18:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1c:	e7e9      	b.n	8006df2 <_strtod_l+0x89a>
 8006e1e:	4613      	mov	r3, r2
 8006e20:	e7e7      	b.n	8006df2 <_strtod_l+0x89a>
 8006e22:	ea53 0308 	orrs.w	r3, r3, r8
 8006e26:	d08a      	beq.n	8006d3e <_strtod_l+0x7e6>
 8006e28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e2a:	b1e3      	cbz	r3, 8006e66 <_strtod_l+0x90e>
 8006e2c:	ea13 0f0a 	tst.w	r3, sl
 8006e30:	d0ee      	beq.n	8006e10 <_strtod_l+0x8b8>
 8006e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e34:	9a04      	ldr	r2, [sp, #16]
 8006e36:	4640      	mov	r0, r8
 8006e38:	4649      	mov	r1, r9
 8006e3a:	b1c3      	cbz	r3, 8006e6e <_strtod_l+0x916>
 8006e3c:	f7ff fb6f 	bl	800651e <sulp>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	ec51 0b18 	vmov	r0, r1, d8
 8006e48:	f7f9 fa38 	bl	80002bc <__adddf3>
 8006e4c:	4680      	mov	r8, r0
 8006e4e:	4689      	mov	r9, r1
 8006e50:	e7de      	b.n	8006e10 <_strtod_l+0x8b8>
 8006e52:	4013      	ands	r3, r2
 8006e54:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006e58:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006e5c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006e60:	f04f 38ff 	mov.w	r8, #4294967295
 8006e64:	e7d4      	b.n	8006e10 <_strtod_l+0x8b8>
 8006e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e68:	ea13 0f08 	tst.w	r3, r8
 8006e6c:	e7e0      	b.n	8006e30 <_strtod_l+0x8d8>
 8006e6e:	f7ff fb56 	bl	800651e <sulp>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	ec51 0b18 	vmov	r0, r1, d8
 8006e7a:	f7f9 fa1d 	bl	80002b8 <__aeabi_dsub>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2300      	movs	r3, #0
 8006e82:	4680      	mov	r8, r0
 8006e84:	4689      	mov	r9, r1
 8006e86:	f7f9 fe37 	bl	8000af8 <__aeabi_dcmpeq>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d0c0      	beq.n	8006e10 <_strtod_l+0x8b8>
 8006e8e:	e618      	b.n	8006ac2 <_strtod_l+0x56a>
 8006e90:	fffffc02 	.word	0xfffffc02
 8006e94:	7ff00000 	.word	0x7ff00000
 8006e98:	39500000 	.word	0x39500000
 8006e9c:	000fffff 	.word	0x000fffff
 8006ea0:	7fefffff 	.word	0x7fefffff
 8006ea4:	08009460 	.word	0x08009460
 8006ea8:	4659      	mov	r1, fp
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f001 fc16 	bl	80086dc <__ratio>
 8006eb0:	ec57 6b10 	vmov	r6, r7, d0
 8006eb4:	ee10 0a10 	vmov	r0, s0
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	f7f9 fe2e 	bl	8000b20 <__aeabi_dcmple>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d071      	beq.n	8006fac <_strtod_l+0xa54>
 8006ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d17c      	bne.n	8006fc8 <_strtod_l+0xa70>
 8006ece:	f1b8 0f00 	cmp.w	r8, #0
 8006ed2:	d15a      	bne.n	8006f8a <_strtod_l+0xa32>
 8006ed4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d15d      	bne.n	8006f98 <_strtod_l+0xa40>
 8006edc:	4b90      	ldr	r3, [pc, #576]	; (8007120 <_strtod_l+0xbc8>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	f7f9 fe12 	bl	8000b0c <__aeabi_dcmplt>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d15c      	bne.n	8006fa6 <_strtod_l+0xa4e>
 8006eec:	4630      	mov	r0, r6
 8006eee:	4639      	mov	r1, r7
 8006ef0:	4b8c      	ldr	r3, [pc, #560]	; (8007124 <_strtod_l+0xbcc>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f7f9 fb98 	bl	8000628 <__aeabi_dmul>
 8006ef8:	4606      	mov	r6, r0
 8006efa:	460f      	mov	r7, r1
 8006efc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006f00:	9606      	str	r6, [sp, #24]
 8006f02:	9307      	str	r3, [sp, #28]
 8006f04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006f0c:	4b86      	ldr	r3, [pc, #536]	; (8007128 <_strtod_l+0xbd0>)
 8006f0e:	ea0a 0303 	and.w	r3, sl, r3
 8006f12:	930d      	str	r3, [sp, #52]	; 0x34
 8006f14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f16:	4b85      	ldr	r3, [pc, #532]	; (800712c <_strtod_l+0xbd4>)
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	f040 8090 	bne.w	800703e <_strtod_l+0xae6>
 8006f1e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006f22:	ec49 8b10 	vmov	d0, r8, r9
 8006f26:	f001 fb0f 	bl	8008548 <__ulp>
 8006f2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f2e:	ec51 0b10 	vmov	r0, r1, d0
 8006f32:	f7f9 fb79 	bl	8000628 <__aeabi_dmul>
 8006f36:	4642      	mov	r2, r8
 8006f38:	464b      	mov	r3, r9
 8006f3a:	f7f9 f9bf 	bl	80002bc <__adddf3>
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4979      	ldr	r1, [pc, #484]	; (8007128 <_strtod_l+0xbd0>)
 8006f42:	4a7b      	ldr	r2, [pc, #492]	; (8007130 <_strtod_l+0xbd8>)
 8006f44:	4019      	ands	r1, r3
 8006f46:	4291      	cmp	r1, r2
 8006f48:	4680      	mov	r8, r0
 8006f4a:	d944      	bls.n	8006fd6 <_strtod_l+0xa7e>
 8006f4c:	ee18 2a90 	vmov	r2, s17
 8006f50:	4b78      	ldr	r3, [pc, #480]	; (8007134 <_strtod_l+0xbdc>)
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d104      	bne.n	8006f60 <_strtod_l+0xa08>
 8006f56:	ee18 3a10 	vmov	r3, s16
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	f43f ad40 	beq.w	80069e0 <_strtod_l+0x488>
 8006f60:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007134 <_strtod_l+0xbdc>
 8006f64:	f04f 38ff 	mov.w	r8, #4294967295
 8006f68:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 ffc0 	bl	8007ef0 <_Bfree>
 8006f70:	9905      	ldr	r1, [sp, #20]
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 ffbc 	bl	8007ef0 <_Bfree>
 8006f78:	4659      	mov	r1, fp
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 ffb8 	bl	8007ef0 <_Bfree>
 8006f80:	4629      	mov	r1, r5
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 ffb4 	bl	8007ef0 <_Bfree>
 8006f88:	e609      	b.n	8006b9e <_strtod_l+0x646>
 8006f8a:	f1b8 0f01 	cmp.w	r8, #1
 8006f8e:	d103      	bne.n	8006f98 <_strtod_l+0xa40>
 8006f90:	f1b9 0f00 	cmp.w	r9, #0
 8006f94:	f43f ad95 	beq.w	8006ac2 <_strtod_l+0x56a>
 8006f98:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80070f0 <_strtod_l+0xb98>
 8006f9c:	4f60      	ldr	r7, [pc, #384]	; (8007120 <_strtod_l+0xbc8>)
 8006f9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006fa2:	2600      	movs	r6, #0
 8006fa4:	e7ae      	b.n	8006f04 <_strtod_l+0x9ac>
 8006fa6:	4f5f      	ldr	r7, [pc, #380]	; (8007124 <_strtod_l+0xbcc>)
 8006fa8:	2600      	movs	r6, #0
 8006faa:	e7a7      	b.n	8006efc <_strtod_l+0x9a4>
 8006fac:	4b5d      	ldr	r3, [pc, #372]	; (8007124 <_strtod_l+0xbcc>)
 8006fae:	4630      	mov	r0, r6
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f7f9 fb38 	bl	8000628 <__aeabi_dmul>
 8006fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460f      	mov	r7, r1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d09c      	beq.n	8006efc <_strtod_l+0x9a4>
 8006fc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006fc6:	e79d      	b.n	8006f04 <_strtod_l+0x9ac>
 8006fc8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80070f8 <_strtod_l+0xba0>
 8006fcc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006fd0:	ec57 6b17 	vmov	r6, r7, d7
 8006fd4:	e796      	b.n	8006f04 <_strtod_l+0x9ac>
 8006fd6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006fda:	9b04      	ldr	r3, [sp, #16]
 8006fdc:	46ca      	mov	sl, r9
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1c2      	bne.n	8006f68 <_strtod_l+0xa10>
 8006fe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fe6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fe8:	0d1b      	lsrs	r3, r3, #20
 8006fea:	051b      	lsls	r3, r3, #20
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d1bb      	bne.n	8006f68 <_strtod_l+0xa10>
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	f7f9 fe62 	bl	8000cbc <__aeabi_d2lz>
 8006ff8:	f7f9 fae8 	bl	80005cc <__aeabi_l2d>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4630      	mov	r0, r6
 8007002:	4639      	mov	r1, r7
 8007004:	f7f9 f958 	bl	80002b8 <__aeabi_dsub>
 8007008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800700a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800700e:	ea43 0308 	orr.w	r3, r3, r8
 8007012:	4313      	orrs	r3, r2
 8007014:	4606      	mov	r6, r0
 8007016:	460f      	mov	r7, r1
 8007018:	d054      	beq.n	80070c4 <_strtod_l+0xb6c>
 800701a:	a339      	add	r3, pc, #228	; (adr r3, 8007100 <_strtod_l+0xba8>)
 800701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007020:	f7f9 fd74 	bl	8000b0c <__aeabi_dcmplt>
 8007024:	2800      	cmp	r0, #0
 8007026:	f47f ace5 	bne.w	80069f4 <_strtod_l+0x49c>
 800702a:	a337      	add	r3, pc, #220	; (adr r3, 8007108 <_strtod_l+0xbb0>)
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	4630      	mov	r0, r6
 8007032:	4639      	mov	r1, r7
 8007034:	f7f9 fd88 	bl	8000b48 <__aeabi_dcmpgt>
 8007038:	2800      	cmp	r0, #0
 800703a:	d095      	beq.n	8006f68 <_strtod_l+0xa10>
 800703c:	e4da      	b.n	80069f4 <_strtod_l+0x49c>
 800703e:	9b04      	ldr	r3, [sp, #16]
 8007040:	b333      	cbz	r3, 8007090 <_strtod_l+0xb38>
 8007042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007044:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007048:	d822      	bhi.n	8007090 <_strtod_l+0xb38>
 800704a:	a331      	add	r3, pc, #196	; (adr r3, 8007110 <_strtod_l+0xbb8>)
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	4630      	mov	r0, r6
 8007052:	4639      	mov	r1, r7
 8007054:	f7f9 fd64 	bl	8000b20 <__aeabi_dcmple>
 8007058:	b1a0      	cbz	r0, 8007084 <_strtod_l+0xb2c>
 800705a:	4639      	mov	r1, r7
 800705c:	4630      	mov	r0, r6
 800705e:	f7f9 fda5 	bl	8000bac <__aeabi_d2uiz>
 8007062:	2801      	cmp	r0, #1
 8007064:	bf38      	it	cc
 8007066:	2001      	movcc	r0, #1
 8007068:	f7f9 fa64 	bl	8000534 <__aeabi_ui2d>
 800706c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800706e:	4606      	mov	r6, r0
 8007070:	460f      	mov	r7, r1
 8007072:	bb23      	cbnz	r3, 80070be <_strtod_l+0xb66>
 8007074:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007078:	9010      	str	r0, [sp, #64]	; 0x40
 800707a:	9311      	str	r3, [sp, #68]	; 0x44
 800707c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007080:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007086:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007088:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800708c:	1a9b      	subs	r3, r3, r2
 800708e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007090:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007094:	eeb0 0a48 	vmov.f32	s0, s16
 8007098:	eef0 0a68 	vmov.f32	s1, s17
 800709c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80070a0:	f001 fa52 	bl	8008548 <__ulp>
 80070a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80070a8:	ec53 2b10 	vmov	r2, r3, d0
 80070ac:	f7f9 fabc 	bl	8000628 <__aeabi_dmul>
 80070b0:	ec53 2b18 	vmov	r2, r3, d8
 80070b4:	f7f9 f902 	bl	80002bc <__adddf3>
 80070b8:	4680      	mov	r8, r0
 80070ba:	4689      	mov	r9, r1
 80070bc:	e78d      	b.n	8006fda <_strtod_l+0xa82>
 80070be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80070c2:	e7db      	b.n	800707c <_strtod_l+0xb24>
 80070c4:	a314      	add	r3, pc, #80	; (adr r3, 8007118 <_strtod_l+0xbc0>)
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	f7f9 fd1f 	bl	8000b0c <__aeabi_dcmplt>
 80070ce:	e7b3      	b.n	8007038 <_strtod_l+0xae0>
 80070d0:	2300      	movs	r3, #0
 80070d2:	930a      	str	r3, [sp, #40]	; 0x28
 80070d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	f7ff ba7c 	b.w	80065d6 <_strtod_l+0x7e>
 80070de:	2a65      	cmp	r2, #101	; 0x65
 80070e0:	f43f ab75 	beq.w	80067ce <_strtod_l+0x276>
 80070e4:	2a45      	cmp	r2, #69	; 0x45
 80070e6:	f43f ab72 	beq.w	80067ce <_strtod_l+0x276>
 80070ea:	2301      	movs	r3, #1
 80070ec:	f7ff bbaa 	b.w	8006844 <_strtod_l+0x2ec>
 80070f0:	00000000 	.word	0x00000000
 80070f4:	bff00000 	.word	0xbff00000
 80070f8:	00000000 	.word	0x00000000
 80070fc:	3ff00000 	.word	0x3ff00000
 8007100:	94a03595 	.word	0x94a03595
 8007104:	3fdfffff 	.word	0x3fdfffff
 8007108:	35afe535 	.word	0x35afe535
 800710c:	3fe00000 	.word	0x3fe00000
 8007110:	ffc00000 	.word	0xffc00000
 8007114:	41dfffff 	.word	0x41dfffff
 8007118:	94a03595 	.word	0x94a03595
 800711c:	3fcfffff 	.word	0x3fcfffff
 8007120:	3ff00000 	.word	0x3ff00000
 8007124:	3fe00000 	.word	0x3fe00000
 8007128:	7ff00000 	.word	0x7ff00000
 800712c:	7fe00000 	.word	0x7fe00000
 8007130:	7c9fffff 	.word	0x7c9fffff
 8007134:	7fefffff 	.word	0x7fefffff

08007138 <strtod>:
 8007138:	460a      	mov	r2, r1
 800713a:	4601      	mov	r1, r0
 800713c:	4802      	ldr	r0, [pc, #8]	; (8007148 <strtod+0x10>)
 800713e:	4b03      	ldr	r3, [pc, #12]	; (800714c <strtod+0x14>)
 8007140:	6800      	ldr	r0, [r0, #0]
 8007142:	f7ff ba09 	b.w	8006558 <_strtod_l>
 8007146:	bf00      	nop
 8007148:	200001e0 	.word	0x200001e0
 800714c:	20000028 	.word	0x20000028

08007150 <std>:
 8007150:	2300      	movs	r3, #0
 8007152:	b510      	push	{r4, lr}
 8007154:	4604      	mov	r4, r0
 8007156:	e9c0 3300 	strd	r3, r3, [r0]
 800715a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800715e:	6083      	str	r3, [r0, #8]
 8007160:	8181      	strh	r1, [r0, #12]
 8007162:	6643      	str	r3, [r0, #100]	; 0x64
 8007164:	81c2      	strh	r2, [r0, #14]
 8007166:	6183      	str	r3, [r0, #24]
 8007168:	4619      	mov	r1, r3
 800716a:	2208      	movs	r2, #8
 800716c:	305c      	adds	r0, #92	; 0x5c
 800716e:	f000 f8f4 	bl	800735a <memset>
 8007172:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <std+0x58>)
 8007174:	6263      	str	r3, [r4, #36]	; 0x24
 8007176:	4b0d      	ldr	r3, [pc, #52]	; (80071ac <std+0x5c>)
 8007178:	62a3      	str	r3, [r4, #40]	; 0x28
 800717a:	4b0d      	ldr	r3, [pc, #52]	; (80071b0 <std+0x60>)
 800717c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800717e:	4b0d      	ldr	r3, [pc, #52]	; (80071b4 <std+0x64>)
 8007180:	6323      	str	r3, [r4, #48]	; 0x30
 8007182:	4b0d      	ldr	r3, [pc, #52]	; (80071b8 <std+0x68>)
 8007184:	6224      	str	r4, [r4, #32]
 8007186:	429c      	cmp	r4, r3
 8007188:	d006      	beq.n	8007198 <std+0x48>
 800718a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800718e:	4294      	cmp	r4, r2
 8007190:	d002      	beq.n	8007198 <std+0x48>
 8007192:	33d0      	adds	r3, #208	; 0xd0
 8007194:	429c      	cmp	r4, r3
 8007196:	d105      	bne.n	80071a4 <std+0x54>
 8007198:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800719c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071a0:	f000 b9c2 	b.w	8007528 <__retarget_lock_init_recursive>
 80071a4:	bd10      	pop	{r4, pc}
 80071a6:	bf00      	nop
 80071a8:	080072d5 	.word	0x080072d5
 80071ac:	080072f7 	.word	0x080072f7
 80071b0:	0800732f 	.word	0x0800732f
 80071b4:	08007353 	.word	0x08007353
 80071b8:	2000040c 	.word	0x2000040c

080071bc <stdio_exit_handler>:
 80071bc:	4a02      	ldr	r2, [pc, #8]	; (80071c8 <stdio_exit_handler+0xc>)
 80071be:	4903      	ldr	r1, [pc, #12]	; (80071cc <stdio_exit_handler+0x10>)
 80071c0:	4803      	ldr	r0, [pc, #12]	; (80071d0 <stdio_exit_handler+0x14>)
 80071c2:	f000 b869 	b.w	8007298 <_fwalk_sglue>
 80071c6:	bf00      	nop
 80071c8:	2000001c 	.word	0x2000001c
 80071cc:	080088f1 	.word	0x080088f1
 80071d0:	20000194 	.word	0x20000194

080071d4 <cleanup_stdio>:
 80071d4:	6841      	ldr	r1, [r0, #4]
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <cleanup_stdio+0x34>)
 80071d8:	4299      	cmp	r1, r3
 80071da:	b510      	push	{r4, lr}
 80071dc:	4604      	mov	r4, r0
 80071de:	d001      	beq.n	80071e4 <cleanup_stdio+0x10>
 80071e0:	f001 fb86 	bl	80088f0 <_fflush_r>
 80071e4:	68a1      	ldr	r1, [r4, #8]
 80071e6:	4b09      	ldr	r3, [pc, #36]	; (800720c <cleanup_stdio+0x38>)
 80071e8:	4299      	cmp	r1, r3
 80071ea:	d002      	beq.n	80071f2 <cleanup_stdio+0x1e>
 80071ec:	4620      	mov	r0, r4
 80071ee:	f001 fb7f 	bl	80088f0 <_fflush_r>
 80071f2:	68e1      	ldr	r1, [r4, #12]
 80071f4:	4b06      	ldr	r3, [pc, #24]	; (8007210 <cleanup_stdio+0x3c>)
 80071f6:	4299      	cmp	r1, r3
 80071f8:	d004      	beq.n	8007204 <cleanup_stdio+0x30>
 80071fa:	4620      	mov	r0, r4
 80071fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007200:	f001 bb76 	b.w	80088f0 <_fflush_r>
 8007204:	bd10      	pop	{r4, pc}
 8007206:	bf00      	nop
 8007208:	2000040c 	.word	0x2000040c
 800720c:	20000474 	.word	0x20000474
 8007210:	200004dc 	.word	0x200004dc

08007214 <global_stdio_init.part.0>:
 8007214:	b510      	push	{r4, lr}
 8007216:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <global_stdio_init.part.0+0x30>)
 8007218:	4c0b      	ldr	r4, [pc, #44]	; (8007248 <global_stdio_init.part.0+0x34>)
 800721a:	4a0c      	ldr	r2, [pc, #48]	; (800724c <global_stdio_init.part.0+0x38>)
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	4620      	mov	r0, r4
 8007220:	2200      	movs	r2, #0
 8007222:	2104      	movs	r1, #4
 8007224:	f7ff ff94 	bl	8007150 <std>
 8007228:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800722c:	2201      	movs	r2, #1
 800722e:	2109      	movs	r1, #9
 8007230:	f7ff ff8e 	bl	8007150 <std>
 8007234:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007238:	2202      	movs	r2, #2
 800723a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800723e:	2112      	movs	r1, #18
 8007240:	f7ff bf86 	b.w	8007150 <std>
 8007244:	20000544 	.word	0x20000544
 8007248:	2000040c 	.word	0x2000040c
 800724c:	080071bd 	.word	0x080071bd

08007250 <__sfp_lock_acquire>:
 8007250:	4801      	ldr	r0, [pc, #4]	; (8007258 <__sfp_lock_acquire+0x8>)
 8007252:	f000 b96a 	b.w	800752a <__retarget_lock_acquire_recursive>
 8007256:	bf00      	nop
 8007258:	2000054d 	.word	0x2000054d

0800725c <__sfp_lock_release>:
 800725c:	4801      	ldr	r0, [pc, #4]	; (8007264 <__sfp_lock_release+0x8>)
 800725e:	f000 b965 	b.w	800752c <__retarget_lock_release_recursive>
 8007262:	bf00      	nop
 8007264:	2000054d 	.word	0x2000054d

08007268 <__sinit>:
 8007268:	b510      	push	{r4, lr}
 800726a:	4604      	mov	r4, r0
 800726c:	f7ff fff0 	bl	8007250 <__sfp_lock_acquire>
 8007270:	6a23      	ldr	r3, [r4, #32]
 8007272:	b11b      	cbz	r3, 800727c <__sinit+0x14>
 8007274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007278:	f7ff bff0 	b.w	800725c <__sfp_lock_release>
 800727c:	4b04      	ldr	r3, [pc, #16]	; (8007290 <__sinit+0x28>)
 800727e:	6223      	str	r3, [r4, #32]
 8007280:	4b04      	ldr	r3, [pc, #16]	; (8007294 <__sinit+0x2c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f5      	bne.n	8007274 <__sinit+0xc>
 8007288:	f7ff ffc4 	bl	8007214 <global_stdio_init.part.0>
 800728c:	e7f2      	b.n	8007274 <__sinit+0xc>
 800728e:	bf00      	nop
 8007290:	080071d5 	.word	0x080071d5
 8007294:	20000544 	.word	0x20000544

08007298 <_fwalk_sglue>:
 8007298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800729c:	4607      	mov	r7, r0
 800729e:	4688      	mov	r8, r1
 80072a0:	4614      	mov	r4, r2
 80072a2:	2600      	movs	r6, #0
 80072a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072a8:	f1b9 0901 	subs.w	r9, r9, #1
 80072ac:	d505      	bpl.n	80072ba <_fwalk_sglue+0x22>
 80072ae:	6824      	ldr	r4, [r4, #0]
 80072b0:	2c00      	cmp	r4, #0
 80072b2:	d1f7      	bne.n	80072a4 <_fwalk_sglue+0xc>
 80072b4:	4630      	mov	r0, r6
 80072b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ba:	89ab      	ldrh	r3, [r5, #12]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d907      	bls.n	80072d0 <_fwalk_sglue+0x38>
 80072c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072c4:	3301      	adds	r3, #1
 80072c6:	d003      	beq.n	80072d0 <_fwalk_sglue+0x38>
 80072c8:	4629      	mov	r1, r5
 80072ca:	4638      	mov	r0, r7
 80072cc:	47c0      	blx	r8
 80072ce:	4306      	orrs	r6, r0
 80072d0:	3568      	adds	r5, #104	; 0x68
 80072d2:	e7e9      	b.n	80072a8 <_fwalk_sglue+0x10>

080072d4 <__sread>:
 80072d4:	b510      	push	{r4, lr}
 80072d6:	460c      	mov	r4, r1
 80072d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072dc:	f000 f8d6 	bl	800748c <_read_r>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	bfab      	itete	ge
 80072e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072e6:	89a3      	ldrhlt	r3, [r4, #12]
 80072e8:	181b      	addge	r3, r3, r0
 80072ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072ee:	bfac      	ite	ge
 80072f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80072f2:	81a3      	strhlt	r3, [r4, #12]
 80072f4:	bd10      	pop	{r4, pc}

080072f6 <__swrite>:
 80072f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072fa:	461f      	mov	r7, r3
 80072fc:	898b      	ldrh	r3, [r1, #12]
 80072fe:	05db      	lsls	r3, r3, #23
 8007300:	4605      	mov	r5, r0
 8007302:	460c      	mov	r4, r1
 8007304:	4616      	mov	r6, r2
 8007306:	d505      	bpl.n	8007314 <__swrite+0x1e>
 8007308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800730c:	2302      	movs	r3, #2
 800730e:	2200      	movs	r2, #0
 8007310:	f000 f8aa 	bl	8007468 <_lseek_r>
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800731a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800731e:	81a3      	strh	r3, [r4, #12]
 8007320:	4632      	mov	r2, r6
 8007322:	463b      	mov	r3, r7
 8007324:	4628      	mov	r0, r5
 8007326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800732a:	f000 b8c1 	b.w	80074b0 <_write_r>

0800732e <__sseek>:
 800732e:	b510      	push	{r4, lr}
 8007330:	460c      	mov	r4, r1
 8007332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007336:	f000 f897 	bl	8007468 <_lseek_r>
 800733a:	1c43      	adds	r3, r0, #1
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	bf15      	itete	ne
 8007340:	6560      	strne	r0, [r4, #84]	; 0x54
 8007342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800734a:	81a3      	strheq	r3, [r4, #12]
 800734c:	bf18      	it	ne
 800734e:	81a3      	strhne	r3, [r4, #12]
 8007350:	bd10      	pop	{r4, pc}

08007352 <__sclose>:
 8007352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007356:	f000 b877 	b.w	8007448 <_close_r>

0800735a <memset>:
 800735a:	4402      	add	r2, r0
 800735c:	4603      	mov	r3, r0
 800735e:	4293      	cmp	r3, r2
 8007360:	d100      	bne.n	8007364 <memset+0xa>
 8007362:	4770      	bx	lr
 8007364:	f803 1b01 	strb.w	r1, [r3], #1
 8007368:	e7f9      	b.n	800735e <memset+0x4>

0800736a <strncmp>:
 800736a:	b510      	push	{r4, lr}
 800736c:	b16a      	cbz	r2, 800738a <strncmp+0x20>
 800736e:	3901      	subs	r1, #1
 8007370:	1884      	adds	r4, r0, r2
 8007372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007376:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800737a:	429a      	cmp	r2, r3
 800737c:	d103      	bne.n	8007386 <strncmp+0x1c>
 800737e:	42a0      	cmp	r0, r4
 8007380:	d001      	beq.n	8007386 <strncmp+0x1c>
 8007382:	2a00      	cmp	r2, #0
 8007384:	d1f5      	bne.n	8007372 <strncmp+0x8>
 8007386:	1ad0      	subs	r0, r2, r3
 8007388:	bd10      	pop	{r4, pc}
 800738a:	4610      	mov	r0, r2
 800738c:	e7fc      	b.n	8007388 <strncmp+0x1e>
	...

08007390 <strtok>:
 8007390:	4b16      	ldr	r3, [pc, #88]	; (80073ec <strtok+0x5c>)
 8007392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007394:	681e      	ldr	r6, [r3, #0]
 8007396:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8007398:	4605      	mov	r5, r0
 800739a:	b9fc      	cbnz	r4, 80073dc <strtok+0x4c>
 800739c:	2050      	movs	r0, #80	; 0x50
 800739e:	9101      	str	r1, [sp, #4]
 80073a0:	f000 fca0 	bl	8007ce4 <malloc>
 80073a4:	9901      	ldr	r1, [sp, #4]
 80073a6:	6470      	str	r0, [r6, #68]	; 0x44
 80073a8:	4602      	mov	r2, r0
 80073aa:	b920      	cbnz	r0, 80073b6 <strtok+0x26>
 80073ac:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <strtok+0x60>)
 80073ae:	4811      	ldr	r0, [pc, #68]	; (80073f4 <strtok+0x64>)
 80073b0:	215b      	movs	r1, #91	; 0x5b
 80073b2:	f000 f8d5 	bl	8007560 <__assert_func>
 80073b6:	e9c0 4400 	strd	r4, r4, [r0]
 80073ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80073be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80073c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80073c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80073ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80073ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80073d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80073d6:	6184      	str	r4, [r0, #24]
 80073d8:	7704      	strb	r4, [r0, #28]
 80073da:	6244      	str	r4, [r0, #36]	; 0x24
 80073dc:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80073de:	2301      	movs	r3, #1
 80073e0:	4628      	mov	r0, r5
 80073e2:	b002      	add	sp, #8
 80073e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073e8:	f000 b806 	b.w	80073f8 <__strtok_r>
 80073ec:	200001e0 	.word	0x200001e0
 80073f0:	08009488 	.word	0x08009488
 80073f4:	0800949f 	.word	0x0800949f

080073f8 <__strtok_r>:
 80073f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073fa:	b908      	cbnz	r0, 8007400 <__strtok_r+0x8>
 80073fc:	6810      	ldr	r0, [r2, #0]
 80073fe:	b188      	cbz	r0, 8007424 <__strtok_r+0x2c>
 8007400:	4604      	mov	r4, r0
 8007402:	4620      	mov	r0, r4
 8007404:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007408:	460f      	mov	r7, r1
 800740a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800740e:	b91e      	cbnz	r6, 8007418 <__strtok_r+0x20>
 8007410:	b965      	cbnz	r5, 800742c <__strtok_r+0x34>
 8007412:	6015      	str	r5, [r2, #0]
 8007414:	4628      	mov	r0, r5
 8007416:	e005      	b.n	8007424 <__strtok_r+0x2c>
 8007418:	42b5      	cmp	r5, r6
 800741a:	d1f6      	bne.n	800740a <__strtok_r+0x12>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1f0      	bne.n	8007402 <__strtok_r+0xa>
 8007420:	6014      	str	r4, [r2, #0]
 8007422:	7003      	strb	r3, [r0, #0]
 8007424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007426:	461c      	mov	r4, r3
 8007428:	e00c      	b.n	8007444 <__strtok_r+0x4c>
 800742a:	b915      	cbnz	r5, 8007432 <__strtok_r+0x3a>
 800742c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007430:	460e      	mov	r6, r1
 8007432:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007436:	42ab      	cmp	r3, r5
 8007438:	d1f7      	bne.n	800742a <__strtok_r+0x32>
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0f3      	beq.n	8007426 <__strtok_r+0x2e>
 800743e:	2300      	movs	r3, #0
 8007440:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007444:	6014      	str	r4, [r2, #0]
 8007446:	e7ed      	b.n	8007424 <__strtok_r+0x2c>

08007448 <_close_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4d06      	ldr	r5, [pc, #24]	; (8007464 <_close_r+0x1c>)
 800744c:	2300      	movs	r3, #0
 800744e:	4604      	mov	r4, r0
 8007450:	4608      	mov	r0, r1
 8007452:	602b      	str	r3, [r5, #0]
 8007454:	f7fa ff79 	bl	800234a <_close>
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	d102      	bne.n	8007462 <_close_r+0x1a>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	b103      	cbz	r3, 8007462 <_close_r+0x1a>
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	20000548 	.word	0x20000548

08007468 <_lseek_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d07      	ldr	r5, [pc, #28]	; (8007488 <_lseek_r+0x20>)
 800746c:	4604      	mov	r4, r0
 800746e:	4608      	mov	r0, r1
 8007470:	4611      	mov	r1, r2
 8007472:	2200      	movs	r2, #0
 8007474:	602a      	str	r2, [r5, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	f7fa ff8e 	bl	8002398 <_lseek>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d102      	bne.n	8007486 <_lseek_r+0x1e>
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	b103      	cbz	r3, 8007486 <_lseek_r+0x1e>
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	20000548 	.word	0x20000548

0800748c <_read_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4d07      	ldr	r5, [pc, #28]	; (80074ac <_read_r+0x20>)
 8007490:	4604      	mov	r4, r0
 8007492:	4608      	mov	r0, r1
 8007494:	4611      	mov	r1, r2
 8007496:	2200      	movs	r2, #0
 8007498:	602a      	str	r2, [r5, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	f7fa ff1c 	bl	80022d8 <_read>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d102      	bne.n	80074aa <_read_r+0x1e>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	b103      	cbz	r3, 80074aa <_read_r+0x1e>
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	20000548 	.word	0x20000548

080074b0 <_write_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d07      	ldr	r5, [pc, #28]	; (80074d0 <_write_r+0x20>)
 80074b4:	4604      	mov	r4, r0
 80074b6:	4608      	mov	r0, r1
 80074b8:	4611      	mov	r1, r2
 80074ba:	2200      	movs	r2, #0
 80074bc:	602a      	str	r2, [r5, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	f7fa ff27 	bl	8002312 <_write>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_write_r+0x1e>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_write_r+0x1e>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	20000548 	.word	0x20000548

080074d4 <__errno>:
 80074d4:	4b01      	ldr	r3, [pc, #4]	; (80074dc <__errno+0x8>)
 80074d6:	6818      	ldr	r0, [r3, #0]
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	200001e0 	.word	0x200001e0

080074e0 <__libc_init_array>:
 80074e0:	b570      	push	{r4, r5, r6, lr}
 80074e2:	4d0d      	ldr	r5, [pc, #52]	; (8007518 <__libc_init_array+0x38>)
 80074e4:	4c0d      	ldr	r4, [pc, #52]	; (800751c <__libc_init_array+0x3c>)
 80074e6:	1b64      	subs	r4, r4, r5
 80074e8:	10a4      	asrs	r4, r4, #2
 80074ea:	2600      	movs	r6, #0
 80074ec:	42a6      	cmp	r6, r4
 80074ee:	d109      	bne.n	8007504 <__libc_init_array+0x24>
 80074f0:	4d0b      	ldr	r5, [pc, #44]	; (8007520 <__libc_init_array+0x40>)
 80074f2:	4c0c      	ldr	r4, [pc, #48]	; (8007524 <__libc_init_array+0x44>)
 80074f4:	f001 fedc 	bl	80092b0 <_init>
 80074f8:	1b64      	subs	r4, r4, r5
 80074fa:	10a4      	asrs	r4, r4, #2
 80074fc:	2600      	movs	r6, #0
 80074fe:	42a6      	cmp	r6, r4
 8007500:	d105      	bne.n	800750e <__libc_init_array+0x2e>
 8007502:	bd70      	pop	{r4, r5, r6, pc}
 8007504:	f855 3b04 	ldr.w	r3, [r5], #4
 8007508:	4798      	blx	r3
 800750a:	3601      	adds	r6, #1
 800750c:	e7ee      	b.n	80074ec <__libc_init_array+0xc>
 800750e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007512:	4798      	blx	r3
 8007514:	3601      	adds	r6, #1
 8007516:	e7f2      	b.n	80074fe <__libc_init_array+0x1e>
 8007518:	08009840 	.word	0x08009840
 800751c:	08009840 	.word	0x08009840
 8007520:	08009840 	.word	0x08009840
 8007524:	08009844 	.word	0x08009844

08007528 <__retarget_lock_init_recursive>:
 8007528:	4770      	bx	lr

0800752a <__retarget_lock_acquire_recursive>:
 800752a:	4770      	bx	lr

0800752c <__retarget_lock_release_recursive>:
 800752c:	4770      	bx	lr

0800752e <memcpy>:
 800752e:	440a      	add	r2, r1
 8007530:	4291      	cmp	r1, r2
 8007532:	f100 33ff 	add.w	r3, r0, #4294967295
 8007536:	d100      	bne.n	800753a <memcpy+0xc>
 8007538:	4770      	bx	lr
 800753a:	b510      	push	{r4, lr}
 800753c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007540:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007544:	4291      	cmp	r1, r2
 8007546:	d1f9      	bne.n	800753c <memcpy+0xe>
 8007548:	bd10      	pop	{r4, pc}
 800754a:	0000      	movs	r0, r0
 800754c:	0000      	movs	r0, r0
	...

08007550 <nan>:
 8007550:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007558 <nan+0x8>
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	00000000 	.word	0x00000000
 800755c:	7ff80000 	.word	0x7ff80000

08007560 <__assert_func>:
 8007560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007562:	4614      	mov	r4, r2
 8007564:	461a      	mov	r2, r3
 8007566:	4b09      	ldr	r3, [pc, #36]	; (800758c <__assert_func+0x2c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4605      	mov	r5, r0
 800756c:	68d8      	ldr	r0, [r3, #12]
 800756e:	b14c      	cbz	r4, 8007584 <__assert_func+0x24>
 8007570:	4b07      	ldr	r3, [pc, #28]	; (8007590 <__assert_func+0x30>)
 8007572:	9100      	str	r1, [sp, #0]
 8007574:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007578:	4906      	ldr	r1, [pc, #24]	; (8007594 <__assert_func+0x34>)
 800757a:	462b      	mov	r3, r5
 800757c:	f001 f9e0 	bl	8008940 <fiprintf>
 8007580:	f001 fa00 	bl	8008984 <abort>
 8007584:	4b04      	ldr	r3, [pc, #16]	; (8007598 <__assert_func+0x38>)
 8007586:	461c      	mov	r4, r3
 8007588:	e7f3      	b.n	8007572 <__assert_func+0x12>
 800758a:	bf00      	nop
 800758c:	200001e0 	.word	0x200001e0
 8007590:	08009501 	.word	0x08009501
 8007594:	0800950e 	.word	0x0800950e
 8007598:	0800953c 	.word	0x0800953c

0800759c <_free_r>:
 800759c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800759e:	2900      	cmp	r1, #0
 80075a0:	d044      	beq.n	800762c <_free_r+0x90>
 80075a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a6:	9001      	str	r0, [sp, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f1a1 0404 	sub.w	r4, r1, #4
 80075ae:	bfb8      	it	lt
 80075b0:	18e4      	addlt	r4, r4, r3
 80075b2:	f000 fc51 	bl	8007e58 <__malloc_lock>
 80075b6:	4a1e      	ldr	r2, [pc, #120]	; (8007630 <_free_r+0x94>)
 80075b8:	9801      	ldr	r0, [sp, #4]
 80075ba:	6813      	ldr	r3, [r2, #0]
 80075bc:	b933      	cbnz	r3, 80075cc <_free_r+0x30>
 80075be:	6063      	str	r3, [r4, #4]
 80075c0:	6014      	str	r4, [r2, #0]
 80075c2:	b003      	add	sp, #12
 80075c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075c8:	f000 bc4c 	b.w	8007e64 <__malloc_unlock>
 80075cc:	42a3      	cmp	r3, r4
 80075ce:	d908      	bls.n	80075e2 <_free_r+0x46>
 80075d0:	6825      	ldr	r5, [r4, #0]
 80075d2:	1961      	adds	r1, r4, r5
 80075d4:	428b      	cmp	r3, r1
 80075d6:	bf01      	itttt	eq
 80075d8:	6819      	ldreq	r1, [r3, #0]
 80075da:	685b      	ldreq	r3, [r3, #4]
 80075dc:	1949      	addeq	r1, r1, r5
 80075de:	6021      	streq	r1, [r4, #0]
 80075e0:	e7ed      	b.n	80075be <_free_r+0x22>
 80075e2:	461a      	mov	r2, r3
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	b10b      	cbz	r3, 80075ec <_free_r+0x50>
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	d9fa      	bls.n	80075e2 <_free_r+0x46>
 80075ec:	6811      	ldr	r1, [r2, #0]
 80075ee:	1855      	adds	r5, r2, r1
 80075f0:	42a5      	cmp	r5, r4
 80075f2:	d10b      	bne.n	800760c <_free_r+0x70>
 80075f4:	6824      	ldr	r4, [r4, #0]
 80075f6:	4421      	add	r1, r4
 80075f8:	1854      	adds	r4, r2, r1
 80075fa:	42a3      	cmp	r3, r4
 80075fc:	6011      	str	r1, [r2, #0]
 80075fe:	d1e0      	bne.n	80075c2 <_free_r+0x26>
 8007600:	681c      	ldr	r4, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	6053      	str	r3, [r2, #4]
 8007606:	440c      	add	r4, r1
 8007608:	6014      	str	r4, [r2, #0]
 800760a:	e7da      	b.n	80075c2 <_free_r+0x26>
 800760c:	d902      	bls.n	8007614 <_free_r+0x78>
 800760e:	230c      	movs	r3, #12
 8007610:	6003      	str	r3, [r0, #0]
 8007612:	e7d6      	b.n	80075c2 <_free_r+0x26>
 8007614:	6825      	ldr	r5, [r4, #0]
 8007616:	1961      	adds	r1, r4, r5
 8007618:	428b      	cmp	r3, r1
 800761a:	bf04      	itt	eq
 800761c:	6819      	ldreq	r1, [r3, #0]
 800761e:	685b      	ldreq	r3, [r3, #4]
 8007620:	6063      	str	r3, [r4, #4]
 8007622:	bf04      	itt	eq
 8007624:	1949      	addeq	r1, r1, r5
 8007626:	6021      	streq	r1, [r4, #0]
 8007628:	6054      	str	r4, [r2, #4]
 800762a:	e7ca      	b.n	80075c2 <_free_r+0x26>
 800762c:	b003      	add	sp, #12
 800762e:	bd30      	pop	{r4, r5, pc}
 8007630:	20000550 	.word	0x20000550

08007634 <rshift>:
 8007634:	6903      	ldr	r3, [r0, #16]
 8007636:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800763a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800763e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007642:	f100 0414 	add.w	r4, r0, #20
 8007646:	dd45      	ble.n	80076d4 <rshift+0xa0>
 8007648:	f011 011f 	ands.w	r1, r1, #31
 800764c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007650:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007654:	d10c      	bne.n	8007670 <rshift+0x3c>
 8007656:	f100 0710 	add.w	r7, r0, #16
 800765a:	4629      	mov	r1, r5
 800765c:	42b1      	cmp	r1, r6
 800765e:	d334      	bcc.n	80076ca <rshift+0x96>
 8007660:	1a9b      	subs	r3, r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	1eea      	subs	r2, r5, #3
 8007666:	4296      	cmp	r6, r2
 8007668:	bf38      	it	cc
 800766a:	2300      	movcc	r3, #0
 800766c:	4423      	add	r3, r4
 800766e:	e015      	b.n	800769c <rshift+0x68>
 8007670:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007674:	f1c1 0820 	rsb	r8, r1, #32
 8007678:	40cf      	lsrs	r7, r1
 800767a:	f105 0e04 	add.w	lr, r5, #4
 800767e:	46a1      	mov	r9, r4
 8007680:	4576      	cmp	r6, lr
 8007682:	46f4      	mov	ip, lr
 8007684:	d815      	bhi.n	80076b2 <rshift+0x7e>
 8007686:	1a9a      	subs	r2, r3, r2
 8007688:	0092      	lsls	r2, r2, #2
 800768a:	3a04      	subs	r2, #4
 800768c:	3501      	adds	r5, #1
 800768e:	42ae      	cmp	r6, r5
 8007690:	bf38      	it	cc
 8007692:	2200      	movcc	r2, #0
 8007694:	18a3      	adds	r3, r4, r2
 8007696:	50a7      	str	r7, [r4, r2]
 8007698:	b107      	cbz	r7, 800769c <rshift+0x68>
 800769a:	3304      	adds	r3, #4
 800769c:	1b1a      	subs	r2, r3, r4
 800769e:	42a3      	cmp	r3, r4
 80076a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80076a4:	bf08      	it	eq
 80076a6:	2300      	moveq	r3, #0
 80076a8:	6102      	str	r2, [r0, #16]
 80076aa:	bf08      	it	eq
 80076ac:	6143      	streq	r3, [r0, #20]
 80076ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076b2:	f8dc c000 	ldr.w	ip, [ip]
 80076b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80076ba:	ea4c 0707 	orr.w	r7, ip, r7
 80076be:	f849 7b04 	str.w	r7, [r9], #4
 80076c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80076c6:	40cf      	lsrs	r7, r1
 80076c8:	e7da      	b.n	8007680 <rshift+0x4c>
 80076ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80076ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80076d2:	e7c3      	b.n	800765c <rshift+0x28>
 80076d4:	4623      	mov	r3, r4
 80076d6:	e7e1      	b.n	800769c <rshift+0x68>

080076d8 <__hexdig_fun>:
 80076d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80076dc:	2b09      	cmp	r3, #9
 80076de:	d802      	bhi.n	80076e6 <__hexdig_fun+0xe>
 80076e0:	3820      	subs	r0, #32
 80076e2:	b2c0      	uxtb	r0, r0
 80076e4:	4770      	bx	lr
 80076e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80076ea:	2b05      	cmp	r3, #5
 80076ec:	d801      	bhi.n	80076f2 <__hexdig_fun+0x1a>
 80076ee:	3847      	subs	r0, #71	; 0x47
 80076f0:	e7f7      	b.n	80076e2 <__hexdig_fun+0xa>
 80076f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80076f6:	2b05      	cmp	r3, #5
 80076f8:	d801      	bhi.n	80076fe <__hexdig_fun+0x26>
 80076fa:	3827      	subs	r0, #39	; 0x27
 80076fc:	e7f1      	b.n	80076e2 <__hexdig_fun+0xa>
 80076fe:	2000      	movs	r0, #0
 8007700:	4770      	bx	lr
	...

08007704 <__gethex>:
 8007704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007708:	4617      	mov	r7, r2
 800770a:	680a      	ldr	r2, [r1, #0]
 800770c:	b085      	sub	sp, #20
 800770e:	f102 0b02 	add.w	fp, r2, #2
 8007712:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007716:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800771a:	4681      	mov	r9, r0
 800771c:	468a      	mov	sl, r1
 800771e:	9302      	str	r3, [sp, #8]
 8007720:	32fe      	adds	r2, #254	; 0xfe
 8007722:	eb02 030b 	add.w	r3, r2, fp
 8007726:	46d8      	mov	r8, fp
 8007728:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	2830      	cmp	r0, #48	; 0x30
 8007730:	d0f7      	beq.n	8007722 <__gethex+0x1e>
 8007732:	f7ff ffd1 	bl	80076d8 <__hexdig_fun>
 8007736:	4604      	mov	r4, r0
 8007738:	2800      	cmp	r0, #0
 800773a:	d138      	bne.n	80077ae <__gethex+0xaa>
 800773c:	49a7      	ldr	r1, [pc, #668]	; (80079dc <__gethex+0x2d8>)
 800773e:	2201      	movs	r2, #1
 8007740:	4640      	mov	r0, r8
 8007742:	f7ff fe12 	bl	800736a <strncmp>
 8007746:	4606      	mov	r6, r0
 8007748:	2800      	cmp	r0, #0
 800774a:	d169      	bne.n	8007820 <__gethex+0x11c>
 800774c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007750:	465d      	mov	r5, fp
 8007752:	f7ff ffc1 	bl	80076d8 <__hexdig_fun>
 8007756:	2800      	cmp	r0, #0
 8007758:	d064      	beq.n	8007824 <__gethex+0x120>
 800775a:	465a      	mov	r2, fp
 800775c:	7810      	ldrb	r0, [r2, #0]
 800775e:	2830      	cmp	r0, #48	; 0x30
 8007760:	4690      	mov	r8, r2
 8007762:	f102 0201 	add.w	r2, r2, #1
 8007766:	d0f9      	beq.n	800775c <__gethex+0x58>
 8007768:	f7ff ffb6 	bl	80076d8 <__hexdig_fun>
 800776c:	2301      	movs	r3, #1
 800776e:	fab0 f480 	clz	r4, r0
 8007772:	0964      	lsrs	r4, r4, #5
 8007774:	465e      	mov	r6, fp
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	4642      	mov	r2, r8
 800777a:	4615      	mov	r5, r2
 800777c:	3201      	adds	r2, #1
 800777e:	7828      	ldrb	r0, [r5, #0]
 8007780:	f7ff ffaa 	bl	80076d8 <__hexdig_fun>
 8007784:	2800      	cmp	r0, #0
 8007786:	d1f8      	bne.n	800777a <__gethex+0x76>
 8007788:	4994      	ldr	r1, [pc, #592]	; (80079dc <__gethex+0x2d8>)
 800778a:	2201      	movs	r2, #1
 800778c:	4628      	mov	r0, r5
 800778e:	f7ff fdec 	bl	800736a <strncmp>
 8007792:	b978      	cbnz	r0, 80077b4 <__gethex+0xb0>
 8007794:	b946      	cbnz	r6, 80077a8 <__gethex+0xa4>
 8007796:	1c6e      	adds	r6, r5, #1
 8007798:	4632      	mov	r2, r6
 800779a:	4615      	mov	r5, r2
 800779c:	3201      	adds	r2, #1
 800779e:	7828      	ldrb	r0, [r5, #0]
 80077a0:	f7ff ff9a 	bl	80076d8 <__hexdig_fun>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d1f8      	bne.n	800779a <__gethex+0x96>
 80077a8:	1b73      	subs	r3, r6, r5
 80077aa:	009e      	lsls	r6, r3, #2
 80077ac:	e004      	b.n	80077b8 <__gethex+0xb4>
 80077ae:	2400      	movs	r4, #0
 80077b0:	4626      	mov	r6, r4
 80077b2:	e7e1      	b.n	8007778 <__gethex+0x74>
 80077b4:	2e00      	cmp	r6, #0
 80077b6:	d1f7      	bne.n	80077a8 <__gethex+0xa4>
 80077b8:	782b      	ldrb	r3, [r5, #0]
 80077ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80077be:	2b50      	cmp	r3, #80	; 0x50
 80077c0:	d13d      	bne.n	800783e <__gethex+0x13a>
 80077c2:	786b      	ldrb	r3, [r5, #1]
 80077c4:	2b2b      	cmp	r3, #43	; 0x2b
 80077c6:	d02f      	beq.n	8007828 <__gethex+0x124>
 80077c8:	2b2d      	cmp	r3, #45	; 0x2d
 80077ca:	d031      	beq.n	8007830 <__gethex+0x12c>
 80077cc:	1c69      	adds	r1, r5, #1
 80077ce:	f04f 0b00 	mov.w	fp, #0
 80077d2:	7808      	ldrb	r0, [r1, #0]
 80077d4:	f7ff ff80 	bl	80076d8 <__hexdig_fun>
 80077d8:	1e42      	subs	r2, r0, #1
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	2a18      	cmp	r2, #24
 80077de:	d82e      	bhi.n	800783e <__gethex+0x13a>
 80077e0:	f1a0 0210 	sub.w	r2, r0, #16
 80077e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80077e8:	f7ff ff76 	bl	80076d8 <__hexdig_fun>
 80077ec:	f100 3cff 	add.w	ip, r0, #4294967295
 80077f0:	fa5f fc8c 	uxtb.w	ip, ip
 80077f4:	f1bc 0f18 	cmp.w	ip, #24
 80077f8:	d91d      	bls.n	8007836 <__gethex+0x132>
 80077fa:	f1bb 0f00 	cmp.w	fp, #0
 80077fe:	d000      	beq.n	8007802 <__gethex+0xfe>
 8007800:	4252      	negs	r2, r2
 8007802:	4416      	add	r6, r2
 8007804:	f8ca 1000 	str.w	r1, [sl]
 8007808:	b1dc      	cbz	r4, 8007842 <__gethex+0x13e>
 800780a:	9b01      	ldr	r3, [sp, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	bf14      	ite	ne
 8007810:	f04f 0800 	movne.w	r8, #0
 8007814:	f04f 0806 	moveq.w	r8, #6
 8007818:	4640      	mov	r0, r8
 800781a:	b005      	add	sp, #20
 800781c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007820:	4645      	mov	r5, r8
 8007822:	4626      	mov	r6, r4
 8007824:	2401      	movs	r4, #1
 8007826:	e7c7      	b.n	80077b8 <__gethex+0xb4>
 8007828:	f04f 0b00 	mov.w	fp, #0
 800782c:	1ca9      	adds	r1, r5, #2
 800782e:	e7d0      	b.n	80077d2 <__gethex+0xce>
 8007830:	f04f 0b01 	mov.w	fp, #1
 8007834:	e7fa      	b.n	800782c <__gethex+0x128>
 8007836:	230a      	movs	r3, #10
 8007838:	fb03 0002 	mla	r0, r3, r2, r0
 800783c:	e7d0      	b.n	80077e0 <__gethex+0xdc>
 800783e:	4629      	mov	r1, r5
 8007840:	e7e0      	b.n	8007804 <__gethex+0x100>
 8007842:	eba5 0308 	sub.w	r3, r5, r8
 8007846:	3b01      	subs	r3, #1
 8007848:	4621      	mov	r1, r4
 800784a:	2b07      	cmp	r3, #7
 800784c:	dc0a      	bgt.n	8007864 <__gethex+0x160>
 800784e:	4648      	mov	r0, r9
 8007850:	f000 fb0e 	bl	8007e70 <_Balloc>
 8007854:	4604      	mov	r4, r0
 8007856:	b940      	cbnz	r0, 800786a <__gethex+0x166>
 8007858:	4b61      	ldr	r3, [pc, #388]	; (80079e0 <__gethex+0x2dc>)
 800785a:	4602      	mov	r2, r0
 800785c:	21e4      	movs	r1, #228	; 0xe4
 800785e:	4861      	ldr	r0, [pc, #388]	; (80079e4 <__gethex+0x2e0>)
 8007860:	f7ff fe7e 	bl	8007560 <__assert_func>
 8007864:	3101      	adds	r1, #1
 8007866:	105b      	asrs	r3, r3, #1
 8007868:	e7ef      	b.n	800784a <__gethex+0x146>
 800786a:	f100 0a14 	add.w	sl, r0, #20
 800786e:	2300      	movs	r3, #0
 8007870:	495a      	ldr	r1, [pc, #360]	; (80079dc <__gethex+0x2d8>)
 8007872:	f8cd a004 	str.w	sl, [sp, #4]
 8007876:	469b      	mov	fp, r3
 8007878:	45a8      	cmp	r8, r5
 800787a:	d342      	bcc.n	8007902 <__gethex+0x1fe>
 800787c:	9801      	ldr	r0, [sp, #4]
 800787e:	f840 bb04 	str.w	fp, [r0], #4
 8007882:	eba0 000a 	sub.w	r0, r0, sl
 8007886:	1080      	asrs	r0, r0, #2
 8007888:	6120      	str	r0, [r4, #16]
 800788a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800788e:	4658      	mov	r0, fp
 8007890:	f000 fbe0 	bl	8008054 <__hi0bits>
 8007894:	683d      	ldr	r5, [r7, #0]
 8007896:	eba8 0000 	sub.w	r0, r8, r0
 800789a:	42a8      	cmp	r0, r5
 800789c:	dd59      	ble.n	8007952 <__gethex+0x24e>
 800789e:	eba0 0805 	sub.w	r8, r0, r5
 80078a2:	4641      	mov	r1, r8
 80078a4:	4620      	mov	r0, r4
 80078a6:	f000 ff6f 	bl	8008788 <__any_on>
 80078aa:	4683      	mov	fp, r0
 80078ac:	b1b8      	cbz	r0, 80078de <__gethex+0x1da>
 80078ae:	f108 33ff 	add.w	r3, r8, #4294967295
 80078b2:	1159      	asrs	r1, r3, #5
 80078b4:	f003 021f 	and.w	r2, r3, #31
 80078b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80078bc:	f04f 0b01 	mov.w	fp, #1
 80078c0:	fa0b f202 	lsl.w	r2, fp, r2
 80078c4:	420a      	tst	r2, r1
 80078c6:	d00a      	beq.n	80078de <__gethex+0x1da>
 80078c8:	455b      	cmp	r3, fp
 80078ca:	dd06      	ble.n	80078da <__gethex+0x1d6>
 80078cc:	f1a8 0102 	sub.w	r1, r8, #2
 80078d0:	4620      	mov	r0, r4
 80078d2:	f000 ff59 	bl	8008788 <__any_on>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d138      	bne.n	800794c <__gethex+0x248>
 80078da:	f04f 0b02 	mov.w	fp, #2
 80078de:	4641      	mov	r1, r8
 80078e0:	4620      	mov	r0, r4
 80078e2:	f7ff fea7 	bl	8007634 <rshift>
 80078e6:	4446      	add	r6, r8
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	42b3      	cmp	r3, r6
 80078ec:	da41      	bge.n	8007972 <__gethex+0x26e>
 80078ee:	4621      	mov	r1, r4
 80078f0:	4648      	mov	r0, r9
 80078f2:	f000 fafd 	bl	8007ef0 <_Bfree>
 80078f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078f8:	2300      	movs	r3, #0
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007900:	e78a      	b.n	8007818 <__gethex+0x114>
 8007902:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007906:	2a2e      	cmp	r2, #46	; 0x2e
 8007908:	d014      	beq.n	8007934 <__gethex+0x230>
 800790a:	2b20      	cmp	r3, #32
 800790c:	d106      	bne.n	800791c <__gethex+0x218>
 800790e:	9b01      	ldr	r3, [sp, #4]
 8007910:	f843 bb04 	str.w	fp, [r3], #4
 8007914:	f04f 0b00 	mov.w	fp, #0
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	465b      	mov	r3, fp
 800791c:	7828      	ldrb	r0, [r5, #0]
 800791e:	9303      	str	r3, [sp, #12]
 8007920:	f7ff feda 	bl	80076d8 <__hexdig_fun>
 8007924:	9b03      	ldr	r3, [sp, #12]
 8007926:	f000 000f 	and.w	r0, r0, #15
 800792a:	4098      	lsls	r0, r3
 800792c:	ea4b 0b00 	orr.w	fp, fp, r0
 8007930:	3304      	adds	r3, #4
 8007932:	e7a1      	b.n	8007878 <__gethex+0x174>
 8007934:	45a8      	cmp	r8, r5
 8007936:	d8e8      	bhi.n	800790a <__gethex+0x206>
 8007938:	2201      	movs	r2, #1
 800793a:	4628      	mov	r0, r5
 800793c:	9303      	str	r3, [sp, #12]
 800793e:	f7ff fd14 	bl	800736a <strncmp>
 8007942:	4926      	ldr	r1, [pc, #152]	; (80079dc <__gethex+0x2d8>)
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	2800      	cmp	r0, #0
 8007948:	d1df      	bne.n	800790a <__gethex+0x206>
 800794a:	e795      	b.n	8007878 <__gethex+0x174>
 800794c:	f04f 0b03 	mov.w	fp, #3
 8007950:	e7c5      	b.n	80078de <__gethex+0x1da>
 8007952:	da0b      	bge.n	800796c <__gethex+0x268>
 8007954:	eba5 0800 	sub.w	r8, r5, r0
 8007958:	4621      	mov	r1, r4
 800795a:	4642      	mov	r2, r8
 800795c:	4648      	mov	r0, r9
 800795e:	f000 fce1 	bl	8008324 <__lshift>
 8007962:	eba6 0608 	sub.w	r6, r6, r8
 8007966:	4604      	mov	r4, r0
 8007968:	f100 0a14 	add.w	sl, r0, #20
 800796c:	f04f 0b00 	mov.w	fp, #0
 8007970:	e7ba      	b.n	80078e8 <__gethex+0x1e4>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	42b3      	cmp	r3, r6
 8007976:	dd73      	ble.n	8007a60 <__gethex+0x35c>
 8007978:	1b9e      	subs	r6, r3, r6
 800797a:	42b5      	cmp	r5, r6
 800797c:	dc34      	bgt.n	80079e8 <__gethex+0x2e4>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d023      	beq.n	80079cc <__gethex+0x2c8>
 8007984:	2b03      	cmp	r3, #3
 8007986:	d025      	beq.n	80079d4 <__gethex+0x2d0>
 8007988:	2b01      	cmp	r3, #1
 800798a:	d115      	bne.n	80079b8 <__gethex+0x2b4>
 800798c:	42b5      	cmp	r5, r6
 800798e:	d113      	bne.n	80079b8 <__gethex+0x2b4>
 8007990:	2d01      	cmp	r5, #1
 8007992:	d10b      	bne.n	80079ac <__gethex+0x2a8>
 8007994:	9a02      	ldr	r2, [sp, #8]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	2301      	movs	r3, #1
 800799c:	6123      	str	r3, [r4, #16]
 800799e:	f8ca 3000 	str.w	r3, [sl]
 80079a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079a4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80079a8:	601c      	str	r4, [r3, #0]
 80079aa:	e735      	b.n	8007818 <__gethex+0x114>
 80079ac:	1e69      	subs	r1, r5, #1
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 feea 	bl	8008788 <__any_on>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d1ed      	bne.n	8007994 <__gethex+0x290>
 80079b8:	4621      	mov	r1, r4
 80079ba:	4648      	mov	r0, r9
 80079bc:	f000 fa98 	bl	8007ef0 <_Bfree>
 80079c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079c2:	2300      	movs	r3, #0
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80079ca:	e725      	b.n	8007818 <__gethex+0x114>
 80079cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1f2      	bne.n	80079b8 <__gethex+0x2b4>
 80079d2:	e7df      	b.n	8007994 <__gethex+0x290>
 80079d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1dc      	bne.n	8007994 <__gethex+0x290>
 80079da:	e7ed      	b.n	80079b8 <__gethex+0x2b4>
 80079dc:	08009428 	.word	0x08009428
 80079e0:	0800953d 	.word	0x0800953d
 80079e4:	0800954e 	.word	0x0800954e
 80079e8:	f106 38ff 	add.w	r8, r6, #4294967295
 80079ec:	f1bb 0f00 	cmp.w	fp, #0
 80079f0:	d133      	bne.n	8007a5a <__gethex+0x356>
 80079f2:	f1b8 0f00 	cmp.w	r8, #0
 80079f6:	d004      	beq.n	8007a02 <__gethex+0x2fe>
 80079f8:	4641      	mov	r1, r8
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 fec4 	bl	8008788 <__any_on>
 8007a00:	4683      	mov	fp, r0
 8007a02:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007a06:	2301      	movs	r3, #1
 8007a08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007a0c:	f008 081f 	and.w	r8, r8, #31
 8007a10:	fa03 f308 	lsl.w	r3, r3, r8
 8007a14:	4213      	tst	r3, r2
 8007a16:	4631      	mov	r1, r6
 8007a18:	4620      	mov	r0, r4
 8007a1a:	bf18      	it	ne
 8007a1c:	f04b 0b02 	orrne.w	fp, fp, #2
 8007a20:	1bad      	subs	r5, r5, r6
 8007a22:	f7ff fe07 	bl	8007634 <rshift>
 8007a26:	687e      	ldr	r6, [r7, #4]
 8007a28:	f04f 0802 	mov.w	r8, #2
 8007a2c:	f1bb 0f00 	cmp.w	fp, #0
 8007a30:	d04a      	beq.n	8007ac8 <__gethex+0x3c4>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d016      	beq.n	8007a66 <__gethex+0x362>
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d018      	beq.n	8007a6e <__gethex+0x36a>
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d109      	bne.n	8007a54 <__gethex+0x350>
 8007a40:	f01b 0f02 	tst.w	fp, #2
 8007a44:	d006      	beq.n	8007a54 <__gethex+0x350>
 8007a46:	f8da 3000 	ldr.w	r3, [sl]
 8007a4a:	ea4b 0b03 	orr.w	fp, fp, r3
 8007a4e:	f01b 0f01 	tst.w	fp, #1
 8007a52:	d10f      	bne.n	8007a74 <__gethex+0x370>
 8007a54:	f048 0810 	orr.w	r8, r8, #16
 8007a58:	e036      	b.n	8007ac8 <__gethex+0x3c4>
 8007a5a:	f04f 0b01 	mov.w	fp, #1
 8007a5e:	e7d0      	b.n	8007a02 <__gethex+0x2fe>
 8007a60:	f04f 0801 	mov.w	r8, #1
 8007a64:	e7e2      	b.n	8007a2c <__gethex+0x328>
 8007a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a68:	f1c3 0301 	rsb	r3, r3, #1
 8007a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d0ef      	beq.n	8007a54 <__gethex+0x350>
 8007a74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007a78:	f104 0214 	add.w	r2, r4, #20
 8007a7c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007a86:	2300      	movs	r3, #0
 8007a88:	4694      	mov	ip, r2
 8007a8a:	f852 1b04 	ldr.w	r1, [r2], #4
 8007a8e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007a92:	d01e      	beq.n	8007ad2 <__gethex+0x3ce>
 8007a94:	3101      	adds	r1, #1
 8007a96:	f8cc 1000 	str.w	r1, [ip]
 8007a9a:	f1b8 0f02 	cmp.w	r8, #2
 8007a9e:	f104 0214 	add.w	r2, r4, #20
 8007aa2:	d13d      	bne.n	8007b20 <__gethex+0x41c>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	42ab      	cmp	r3, r5
 8007aaa:	d10b      	bne.n	8007ac4 <__gethex+0x3c0>
 8007aac:	1169      	asrs	r1, r5, #5
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f005 051f 	and.w	r5, r5, #31
 8007ab4:	fa03 f505 	lsl.w	r5, r3, r5
 8007ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007abc:	421d      	tst	r5, r3
 8007abe:	bf18      	it	ne
 8007ac0:	f04f 0801 	movne.w	r8, #1
 8007ac4:	f048 0820 	orr.w	r8, r8, #32
 8007ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aca:	601c      	str	r4, [r3, #0]
 8007acc:	9b02      	ldr	r3, [sp, #8]
 8007ace:	601e      	str	r6, [r3, #0]
 8007ad0:	e6a2      	b.n	8007818 <__gethex+0x114>
 8007ad2:	4290      	cmp	r0, r2
 8007ad4:	f842 3c04 	str.w	r3, [r2, #-4]
 8007ad8:	d8d6      	bhi.n	8007a88 <__gethex+0x384>
 8007ada:	68a2      	ldr	r2, [r4, #8]
 8007adc:	4593      	cmp	fp, r2
 8007ade:	db17      	blt.n	8007b10 <__gethex+0x40c>
 8007ae0:	6861      	ldr	r1, [r4, #4]
 8007ae2:	4648      	mov	r0, r9
 8007ae4:	3101      	adds	r1, #1
 8007ae6:	f000 f9c3 	bl	8007e70 <_Balloc>
 8007aea:	4682      	mov	sl, r0
 8007aec:	b918      	cbnz	r0, 8007af6 <__gethex+0x3f2>
 8007aee:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <__gethex+0x458>)
 8007af0:	4602      	mov	r2, r0
 8007af2:	2184      	movs	r1, #132	; 0x84
 8007af4:	e6b3      	b.n	800785e <__gethex+0x15a>
 8007af6:	6922      	ldr	r2, [r4, #16]
 8007af8:	3202      	adds	r2, #2
 8007afa:	f104 010c 	add.w	r1, r4, #12
 8007afe:	0092      	lsls	r2, r2, #2
 8007b00:	300c      	adds	r0, #12
 8007b02:	f7ff fd14 	bl	800752e <memcpy>
 8007b06:	4621      	mov	r1, r4
 8007b08:	4648      	mov	r0, r9
 8007b0a:	f000 f9f1 	bl	8007ef0 <_Bfree>
 8007b0e:	4654      	mov	r4, sl
 8007b10:	6922      	ldr	r2, [r4, #16]
 8007b12:	1c51      	adds	r1, r2, #1
 8007b14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007b18:	6121      	str	r1, [r4, #16]
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	6151      	str	r1, [r2, #20]
 8007b1e:	e7bc      	b.n	8007a9a <__gethex+0x396>
 8007b20:	6921      	ldr	r1, [r4, #16]
 8007b22:	4559      	cmp	r1, fp
 8007b24:	dd0b      	ble.n	8007b3e <__gethex+0x43a>
 8007b26:	2101      	movs	r1, #1
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7ff fd83 	bl	8007634 <rshift>
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	3601      	adds	r6, #1
 8007b32:	42b3      	cmp	r3, r6
 8007b34:	f6ff aedb 	blt.w	80078ee <__gethex+0x1ea>
 8007b38:	f04f 0801 	mov.w	r8, #1
 8007b3c:	e7c2      	b.n	8007ac4 <__gethex+0x3c0>
 8007b3e:	f015 051f 	ands.w	r5, r5, #31
 8007b42:	d0f9      	beq.n	8007b38 <__gethex+0x434>
 8007b44:	9b01      	ldr	r3, [sp, #4]
 8007b46:	441a      	add	r2, r3
 8007b48:	f1c5 0520 	rsb	r5, r5, #32
 8007b4c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007b50:	f000 fa80 	bl	8008054 <__hi0bits>
 8007b54:	42a8      	cmp	r0, r5
 8007b56:	dbe6      	blt.n	8007b26 <__gethex+0x422>
 8007b58:	e7ee      	b.n	8007b38 <__gethex+0x434>
 8007b5a:	bf00      	nop
 8007b5c:	0800953d 	.word	0x0800953d

08007b60 <L_shift>:
 8007b60:	f1c2 0208 	rsb	r2, r2, #8
 8007b64:	0092      	lsls	r2, r2, #2
 8007b66:	b570      	push	{r4, r5, r6, lr}
 8007b68:	f1c2 0620 	rsb	r6, r2, #32
 8007b6c:	6843      	ldr	r3, [r0, #4]
 8007b6e:	6804      	ldr	r4, [r0, #0]
 8007b70:	fa03 f506 	lsl.w	r5, r3, r6
 8007b74:	432c      	orrs	r4, r5
 8007b76:	40d3      	lsrs	r3, r2
 8007b78:	6004      	str	r4, [r0, #0]
 8007b7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007b7e:	4288      	cmp	r0, r1
 8007b80:	d3f4      	bcc.n	8007b6c <L_shift+0xc>
 8007b82:	bd70      	pop	{r4, r5, r6, pc}

08007b84 <__match>:
 8007b84:	b530      	push	{r4, r5, lr}
 8007b86:	6803      	ldr	r3, [r0, #0]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b8e:	b914      	cbnz	r4, 8007b96 <__match+0x12>
 8007b90:	6003      	str	r3, [r0, #0]
 8007b92:	2001      	movs	r0, #1
 8007b94:	bd30      	pop	{r4, r5, pc}
 8007b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007b9e:	2d19      	cmp	r5, #25
 8007ba0:	bf98      	it	ls
 8007ba2:	3220      	addls	r2, #32
 8007ba4:	42a2      	cmp	r2, r4
 8007ba6:	d0f0      	beq.n	8007b8a <__match+0x6>
 8007ba8:	2000      	movs	r0, #0
 8007baa:	e7f3      	b.n	8007b94 <__match+0x10>

08007bac <__hexnan>:
 8007bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	680b      	ldr	r3, [r1, #0]
 8007bb2:	6801      	ldr	r1, [r0, #0]
 8007bb4:	115e      	asrs	r6, r3, #5
 8007bb6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007bba:	f013 031f 	ands.w	r3, r3, #31
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	bf18      	it	ne
 8007bc2:	3604      	addne	r6, #4
 8007bc4:	2500      	movs	r5, #0
 8007bc6:	1f37      	subs	r7, r6, #4
 8007bc8:	4682      	mov	sl, r0
 8007bca:	4690      	mov	r8, r2
 8007bcc:	9301      	str	r3, [sp, #4]
 8007bce:	f846 5c04 	str.w	r5, [r6, #-4]
 8007bd2:	46b9      	mov	r9, r7
 8007bd4:	463c      	mov	r4, r7
 8007bd6:	9502      	str	r5, [sp, #8]
 8007bd8:	46ab      	mov	fp, r5
 8007bda:	784a      	ldrb	r2, [r1, #1]
 8007bdc:	1c4b      	adds	r3, r1, #1
 8007bde:	9303      	str	r3, [sp, #12]
 8007be0:	b342      	cbz	r2, 8007c34 <__hexnan+0x88>
 8007be2:	4610      	mov	r0, r2
 8007be4:	9105      	str	r1, [sp, #20]
 8007be6:	9204      	str	r2, [sp, #16]
 8007be8:	f7ff fd76 	bl	80076d8 <__hexdig_fun>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d14f      	bne.n	8007c90 <__hexnan+0xe4>
 8007bf0:	9a04      	ldr	r2, [sp, #16]
 8007bf2:	9905      	ldr	r1, [sp, #20]
 8007bf4:	2a20      	cmp	r2, #32
 8007bf6:	d818      	bhi.n	8007c2a <__hexnan+0x7e>
 8007bf8:	9b02      	ldr	r3, [sp, #8]
 8007bfa:	459b      	cmp	fp, r3
 8007bfc:	dd13      	ble.n	8007c26 <__hexnan+0x7a>
 8007bfe:	454c      	cmp	r4, r9
 8007c00:	d206      	bcs.n	8007c10 <__hexnan+0x64>
 8007c02:	2d07      	cmp	r5, #7
 8007c04:	dc04      	bgt.n	8007c10 <__hexnan+0x64>
 8007c06:	462a      	mov	r2, r5
 8007c08:	4649      	mov	r1, r9
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f7ff ffa8 	bl	8007b60 <L_shift>
 8007c10:	4544      	cmp	r4, r8
 8007c12:	d950      	bls.n	8007cb6 <__hexnan+0x10a>
 8007c14:	2300      	movs	r3, #0
 8007c16:	f1a4 0904 	sub.w	r9, r4, #4
 8007c1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c1e:	f8cd b008 	str.w	fp, [sp, #8]
 8007c22:	464c      	mov	r4, r9
 8007c24:	461d      	mov	r5, r3
 8007c26:	9903      	ldr	r1, [sp, #12]
 8007c28:	e7d7      	b.n	8007bda <__hexnan+0x2e>
 8007c2a:	2a29      	cmp	r2, #41	; 0x29
 8007c2c:	d155      	bne.n	8007cda <__hexnan+0x12e>
 8007c2e:	3102      	adds	r1, #2
 8007c30:	f8ca 1000 	str.w	r1, [sl]
 8007c34:	f1bb 0f00 	cmp.w	fp, #0
 8007c38:	d04f      	beq.n	8007cda <__hexnan+0x12e>
 8007c3a:	454c      	cmp	r4, r9
 8007c3c:	d206      	bcs.n	8007c4c <__hexnan+0xa0>
 8007c3e:	2d07      	cmp	r5, #7
 8007c40:	dc04      	bgt.n	8007c4c <__hexnan+0xa0>
 8007c42:	462a      	mov	r2, r5
 8007c44:	4649      	mov	r1, r9
 8007c46:	4620      	mov	r0, r4
 8007c48:	f7ff ff8a 	bl	8007b60 <L_shift>
 8007c4c:	4544      	cmp	r4, r8
 8007c4e:	d934      	bls.n	8007cba <__hexnan+0x10e>
 8007c50:	f1a8 0204 	sub.w	r2, r8, #4
 8007c54:	4623      	mov	r3, r4
 8007c56:	f853 1b04 	ldr.w	r1, [r3], #4
 8007c5a:	f842 1f04 	str.w	r1, [r2, #4]!
 8007c5e:	429f      	cmp	r7, r3
 8007c60:	d2f9      	bcs.n	8007c56 <__hexnan+0xaa>
 8007c62:	1b3b      	subs	r3, r7, r4
 8007c64:	f023 0303 	bic.w	r3, r3, #3
 8007c68:	3304      	adds	r3, #4
 8007c6a:	3e03      	subs	r6, #3
 8007c6c:	3401      	adds	r4, #1
 8007c6e:	42a6      	cmp	r6, r4
 8007c70:	bf38      	it	cc
 8007c72:	2304      	movcc	r3, #4
 8007c74:	4443      	add	r3, r8
 8007c76:	2200      	movs	r2, #0
 8007c78:	f843 2b04 	str.w	r2, [r3], #4
 8007c7c:	429f      	cmp	r7, r3
 8007c7e:	d2fb      	bcs.n	8007c78 <__hexnan+0xcc>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	b91b      	cbnz	r3, 8007c8c <__hexnan+0xe0>
 8007c84:	4547      	cmp	r7, r8
 8007c86:	d126      	bne.n	8007cd6 <__hexnan+0x12a>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	603b      	str	r3, [r7, #0]
 8007c8c:	2005      	movs	r0, #5
 8007c8e:	e025      	b.n	8007cdc <__hexnan+0x130>
 8007c90:	3501      	adds	r5, #1
 8007c92:	2d08      	cmp	r5, #8
 8007c94:	f10b 0b01 	add.w	fp, fp, #1
 8007c98:	dd06      	ble.n	8007ca8 <__hexnan+0xfc>
 8007c9a:	4544      	cmp	r4, r8
 8007c9c:	d9c3      	bls.n	8007c26 <__hexnan+0x7a>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ca4:	2501      	movs	r5, #1
 8007ca6:	3c04      	subs	r4, #4
 8007ca8:	6822      	ldr	r2, [r4, #0]
 8007caa:	f000 000f 	and.w	r0, r0, #15
 8007cae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007cb2:	6020      	str	r0, [r4, #0]
 8007cb4:	e7b7      	b.n	8007c26 <__hexnan+0x7a>
 8007cb6:	2508      	movs	r5, #8
 8007cb8:	e7b5      	b.n	8007c26 <__hexnan+0x7a>
 8007cba:	9b01      	ldr	r3, [sp, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d0df      	beq.n	8007c80 <__hexnan+0xd4>
 8007cc0:	f1c3 0320 	rsb	r3, r3, #32
 8007cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc8:	40da      	lsrs	r2, r3
 8007cca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	f846 3c04 	str.w	r3, [r6, #-4]
 8007cd4:	e7d4      	b.n	8007c80 <__hexnan+0xd4>
 8007cd6:	3f04      	subs	r7, #4
 8007cd8:	e7d2      	b.n	8007c80 <__hexnan+0xd4>
 8007cda:	2004      	movs	r0, #4
 8007cdc:	b007      	add	sp, #28
 8007cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007ce4 <malloc>:
 8007ce4:	4b02      	ldr	r3, [pc, #8]	; (8007cf0 <malloc+0xc>)
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	f000 b823 	b.w	8007d34 <_malloc_r>
 8007cee:	bf00      	nop
 8007cf0:	200001e0 	.word	0x200001e0

08007cf4 <sbrk_aligned>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	4e0e      	ldr	r6, [pc, #56]	; (8007d30 <sbrk_aligned+0x3c>)
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	6831      	ldr	r1, [r6, #0]
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	b911      	cbnz	r1, 8007d06 <sbrk_aligned+0x12>
 8007d00:	f000 fe30 	bl	8008964 <_sbrk_r>
 8007d04:	6030      	str	r0, [r6, #0]
 8007d06:	4621      	mov	r1, r4
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 fe2b 	bl	8008964 <_sbrk_r>
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	d00a      	beq.n	8007d28 <sbrk_aligned+0x34>
 8007d12:	1cc4      	adds	r4, r0, #3
 8007d14:	f024 0403 	bic.w	r4, r4, #3
 8007d18:	42a0      	cmp	r0, r4
 8007d1a:	d007      	beq.n	8007d2c <sbrk_aligned+0x38>
 8007d1c:	1a21      	subs	r1, r4, r0
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f000 fe20 	bl	8008964 <_sbrk_r>
 8007d24:	3001      	adds	r0, #1
 8007d26:	d101      	bne.n	8007d2c <sbrk_aligned+0x38>
 8007d28:	f04f 34ff 	mov.w	r4, #4294967295
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	20000554 	.word	0x20000554

08007d34 <_malloc_r>:
 8007d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d38:	1ccd      	adds	r5, r1, #3
 8007d3a:	f025 0503 	bic.w	r5, r5, #3
 8007d3e:	3508      	adds	r5, #8
 8007d40:	2d0c      	cmp	r5, #12
 8007d42:	bf38      	it	cc
 8007d44:	250c      	movcc	r5, #12
 8007d46:	2d00      	cmp	r5, #0
 8007d48:	4607      	mov	r7, r0
 8007d4a:	db01      	blt.n	8007d50 <_malloc_r+0x1c>
 8007d4c:	42a9      	cmp	r1, r5
 8007d4e:	d905      	bls.n	8007d5c <_malloc_r+0x28>
 8007d50:	230c      	movs	r3, #12
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	2600      	movs	r6, #0
 8007d56:	4630      	mov	r0, r6
 8007d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e30 <_malloc_r+0xfc>
 8007d60:	f000 f87a 	bl	8007e58 <__malloc_lock>
 8007d64:	f8d8 3000 	ldr.w	r3, [r8]
 8007d68:	461c      	mov	r4, r3
 8007d6a:	bb5c      	cbnz	r4, 8007dc4 <_malloc_r+0x90>
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	4638      	mov	r0, r7
 8007d70:	f7ff ffc0 	bl	8007cf4 <sbrk_aligned>
 8007d74:	1c43      	adds	r3, r0, #1
 8007d76:	4604      	mov	r4, r0
 8007d78:	d155      	bne.n	8007e26 <_malloc_r+0xf2>
 8007d7a:	f8d8 4000 	ldr.w	r4, [r8]
 8007d7e:	4626      	mov	r6, r4
 8007d80:	2e00      	cmp	r6, #0
 8007d82:	d145      	bne.n	8007e10 <_malloc_r+0xdc>
 8007d84:	2c00      	cmp	r4, #0
 8007d86:	d048      	beq.n	8007e1a <_malloc_r+0xe6>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	eb04 0903 	add.w	r9, r4, r3
 8007d92:	f000 fde7 	bl	8008964 <_sbrk_r>
 8007d96:	4581      	cmp	r9, r0
 8007d98:	d13f      	bne.n	8007e1a <_malloc_r+0xe6>
 8007d9a:	6821      	ldr	r1, [r4, #0]
 8007d9c:	1a6d      	subs	r5, r5, r1
 8007d9e:	4629      	mov	r1, r5
 8007da0:	4638      	mov	r0, r7
 8007da2:	f7ff ffa7 	bl	8007cf4 <sbrk_aligned>
 8007da6:	3001      	adds	r0, #1
 8007da8:	d037      	beq.n	8007e1a <_malloc_r+0xe6>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	442b      	add	r3, r5
 8007dae:	6023      	str	r3, [r4, #0]
 8007db0:	f8d8 3000 	ldr.w	r3, [r8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d038      	beq.n	8007e2a <_malloc_r+0xf6>
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	42a2      	cmp	r2, r4
 8007dbc:	d12b      	bne.n	8007e16 <_malloc_r+0xe2>
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	605a      	str	r2, [r3, #4]
 8007dc2:	e00f      	b.n	8007de4 <_malloc_r+0xb0>
 8007dc4:	6822      	ldr	r2, [r4, #0]
 8007dc6:	1b52      	subs	r2, r2, r5
 8007dc8:	d41f      	bmi.n	8007e0a <_malloc_r+0xd6>
 8007dca:	2a0b      	cmp	r2, #11
 8007dcc:	d917      	bls.n	8007dfe <_malloc_r+0xca>
 8007dce:	1961      	adds	r1, r4, r5
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	6025      	str	r5, [r4, #0]
 8007dd4:	bf18      	it	ne
 8007dd6:	6059      	strne	r1, [r3, #4]
 8007dd8:	6863      	ldr	r3, [r4, #4]
 8007dda:	bf08      	it	eq
 8007ddc:	f8c8 1000 	streq.w	r1, [r8]
 8007de0:	5162      	str	r2, [r4, r5]
 8007de2:	604b      	str	r3, [r1, #4]
 8007de4:	4638      	mov	r0, r7
 8007de6:	f104 060b 	add.w	r6, r4, #11
 8007dea:	f000 f83b 	bl	8007e64 <__malloc_unlock>
 8007dee:	f026 0607 	bic.w	r6, r6, #7
 8007df2:	1d23      	adds	r3, r4, #4
 8007df4:	1af2      	subs	r2, r6, r3
 8007df6:	d0ae      	beq.n	8007d56 <_malloc_r+0x22>
 8007df8:	1b9b      	subs	r3, r3, r6
 8007dfa:	50a3      	str	r3, [r4, r2]
 8007dfc:	e7ab      	b.n	8007d56 <_malloc_r+0x22>
 8007dfe:	42a3      	cmp	r3, r4
 8007e00:	6862      	ldr	r2, [r4, #4]
 8007e02:	d1dd      	bne.n	8007dc0 <_malloc_r+0x8c>
 8007e04:	f8c8 2000 	str.w	r2, [r8]
 8007e08:	e7ec      	b.n	8007de4 <_malloc_r+0xb0>
 8007e0a:	4623      	mov	r3, r4
 8007e0c:	6864      	ldr	r4, [r4, #4]
 8007e0e:	e7ac      	b.n	8007d6a <_malloc_r+0x36>
 8007e10:	4634      	mov	r4, r6
 8007e12:	6876      	ldr	r6, [r6, #4]
 8007e14:	e7b4      	b.n	8007d80 <_malloc_r+0x4c>
 8007e16:	4613      	mov	r3, r2
 8007e18:	e7cc      	b.n	8007db4 <_malloc_r+0x80>
 8007e1a:	230c      	movs	r3, #12
 8007e1c:	603b      	str	r3, [r7, #0]
 8007e1e:	4638      	mov	r0, r7
 8007e20:	f000 f820 	bl	8007e64 <__malloc_unlock>
 8007e24:	e797      	b.n	8007d56 <_malloc_r+0x22>
 8007e26:	6025      	str	r5, [r4, #0]
 8007e28:	e7dc      	b.n	8007de4 <_malloc_r+0xb0>
 8007e2a:	605b      	str	r3, [r3, #4]
 8007e2c:	deff      	udf	#255	; 0xff
 8007e2e:	bf00      	nop
 8007e30:	20000550 	.word	0x20000550

08007e34 <__ascii_mbtowc>:
 8007e34:	b082      	sub	sp, #8
 8007e36:	b901      	cbnz	r1, 8007e3a <__ascii_mbtowc+0x6>
 8007e38:	a901      	add	r1, sp, #4
 8007e3a:	b142      	cbz	r2, 8007e4e <__ascii_mbtowc+0x1a>
 8007e3c:	b14b      	cbz	r3, 8007e52 <__ascii_mbtowc+0x1e>
 8007e3e:	7813      	ldrb	r3, [r2, #0]
 8007e40:	600b      	str	r3, [r1, #0]
 8007e42:	7812      	ldrb	r2, [r2, #0]
 8007e44:	1e10      	subs	r0, r2, #0
 8007e46:	bf18      	it	ne
 8007e48:	2001      	movne	r0, #1
 8007e4a:	b002      	add	sp, #8
 8007e4c:	4770      	bx	lr
 8007e4e:	4610      	mov	r0, r2
 8007e50:	e7fb      	b.n	8007e4a <__ascii_mbtowc+0x16>
 8007e52:	f06f 0001 	mvn.w	r0, #1
 8007e56:	e7f8      	b.n	8007e4a <__ascii_mbtowc+0x16>

08007e58 <__malloc_lock>:
 8007e58:	4801      	ldr	r0, [pc, #4]	; (8007e60 <__malloc_lock+0x8>)
 8007e5a:	f7ff bb66 	b.w	800752a <__retarget_lock_acquire_recursive>
 8007e5e:	bf00      	nop
 8007e60:	2000054c 	.word	0x2000054c

08007e64 <__malloc_unlock>:
 8007e64:	4801      	ldr	r0, [pc, #4]	; (8007e6c <__malloc_unlock+0x8>)
 8007e66:	f7ff bb61 	b.w	800752c <__retarget_lock_release_recursive>
 8007e6a:	bf00      	nop
 8007e6c:	2000054c 	.word	0x2000054c

08007e70 <_Balloc>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	69c6      	ldr	r6, [r0, #28]
 8007e74:	4604      	mov	r4, r0
 8007e76:	460d      	mov	r5, r1
 8007e78:	b976      	cbnz	r6, 8007e98 <_Balloc+0x28>
 8007e7a:	2010      	movs	r0, #16
 8007e7c:	f7ff ff32 	bl	8007ce4 <malloc>
 8007e80:	4602      	mov	r2, r0
 8007e82:	61e0      	str	r0, [r4, #28]
 8007e84:	b920      	cbnz	r0, 8007e90 <_Balloc+0x20>
 8007e86:	4b18      	ldr	r3, [pc, #96]	; (8007ee8 <_Balloc+0x78>)
 8007e88:	4818      	ldr	r0, [pc, #96]	; (8007eec <_Balloc+0x7c>)
 8007e8a:	216b      	movs	r1, #107	; 0x6b
 8007e8c:	f7ff fb68 	bl	8007560 <__assert_func>
 8007e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e94:	6006      	str	r6, [r0, #0]
 8007e96:	60c6      	str	r6, [r0, #12]
 8007e98:	69e6      	ldr	r6, [r4, #28]
 8007e9a:	68f3      	ldr	r3, [r6, #12]
 8007e9c:	b183      	cbz	r3, 8007ec0 <_Balloc+0x50>
 8007e9e:	69e3      	ldr	r3, [r4, #28]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ea6:	b9b8      	cbnz	r0, 8007ed8 <_Balloc+0x68>
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8007eae:	1d72      	adds	r2, r6, #5
 8007eb0:	0092      	lsls	r2, r2, #2
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 fd6d 	bl	8008992 <_calloc_r>
 8007eb8:	b160      	cbz	r0, 8007ed4 <_Balloc+0x64>
 8007eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ebe:	e00e      	b.n	8007ede <_Balloc+0x6e>
 8007ec0:	2221      	movs	r2, #33	; 0x21
 8007ec2:	2104      	movs	r1, #4
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f000 fd64 	bl	8008992 <_calloc_r>
 8007eca:	69e3      	ldr	r3, [r4, #28]
 8007ecc:	60f0      	str	r0, [r6, #12]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1e4      	bne.n	8007e9e <_Balloc+0x2e>
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}
 8007ed8:	6802      	ldr	r2, [r0, #0]
 8007eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ee4:	e7f7      	b.n	8007ed6 <_Balloc+0x66>
 8007ee6:	bf00      	nop
 8007ee8:	08009488 	.word	0x08009488
 8007eec:	080095ae 	.word	0x080095ae

08007ef0 <_Bfree>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	69c6      	ldr	r6, [r0, #28]
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	b976      	cbnz	r6, 8007f18 <_Bfree+0x28>
 8007efa:	2010      	movs	r0, #16
 8007efc:	f7ff fef2 	bl	8007ce4 <malloc>
 8007f00:	4602      	mov	r2, r0
 8007f02:	61e8      	str	r0, [r5, #28]
 8007f04:	b920      	cbnz	r0, 8007f10 <_Bfree+0x20>
 8007f06:	4b09      	ldr	r3, [pc, #36]	; (8007f2c <_Bfree+0x3c>)
 8007f08:	4809      	ldr	r0, [pc, #36]	; (8007f30 <_Bfree+0x40>)
 8007f0a:	218f      	movs	r1, #143	; 0x8f
 8007f0c:	f7ff fb28 	bl	8007560 <__assert_func>
 8007f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f14:	6006      	str	r6, [r0, #0]
 8007f16:	60c6      	str	r6, [r0, #12]
 8007f18:	b13c      	cbz	r4, 8007f2a <_Bfree+0x3a>
 8007f1a:	69eb      	ldr	r3, [r5, #28]
 8007f1c:	6862      	ldr	r2, [r4, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f24:	6021      	str	r1, [r4, #0]
 8007f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
 8007f2c:	08009488 	.word	0x08009488
 8007f30:	080095ae 	.word	0x080095ae

08007f34 <__multadd>:
 8007f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f38:	690d      	ldr	r5, [r1, #16]
 8007f3a:	4607      	mov	r7, r0
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	461e      	mov	r6, r3
 8007f40:	f101 0c14 	add.w	ip, r1, #20
 8007f44:	2000      	movs	r0, #0
 8007f46:	f8dc 3000 	ldr.w	r3, [ip]
 8007f4a:	b299      	uxth	r1, r3
 8007f4c:	fb02 6101 	mla	r1, r2, r1, r6
 8007f50:	0c1e      	lsrs	r6, r3, #16
 8007f52:	0c0b      	lsrs	r3, r1, #16
 8007f54:	fb02 3306 	mla	r3, r2, r6, r3
 8007f58:	b289      	uxth	r1, r1
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f60:	4285      	cmp	r5, r0
 8007f62:	f84c 1b04 	str.w	r1, [ip], #4
 8007f66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f6a:	dcec      	bgt.n	8007f46 <__multadd+0x12>
 8007f6c:	b30e      	cbz	r6, 8007fb2 <__multadd+0x7e>
 8007f6e:	68a3      	ldr	r3, [r4, #8]
 8007f70:	42ab      	cmp	r3, r5
 8007f72:	dc19      	bgt.n	8007fa8 <__multadd+0x74>
 8007f74:	6861      	ldr	r1, [r4, #4]
 8007f76:	4638      	mov	r0, r7
 8007f78:	3101      	adds	r1, #1
 8007f7a:	f7ff ff79 	bl	8007e70 <_Balloc>
 8007f7e:	4680      	mov	r8, r0
 8007f80:	b928      	cbnz	r0, 8007f8e <__multadd+0x5a>
 8007f82:	4602      	mov	r2, r0
 8007f84:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <__multadd+0x84>)
 8007f86:	480d      	ldr	r0, [pc, #52]	; (8007fbc <__multadd+0x88>)
 8007f88:	21ba      	movs	r1, #186	; 0xba
 8007f8a:	f7ff fae9 	bl	8007560 <__assert_func>
 8007f8e:	6922      	ldr	r2, [r4, #16]
 8007f90:	3202      	adds	r2, #2
 8007f92:	f104 010c 	add.w	r1, r4, #12
 8007f96:	0092      	lsls	r2, r2, #2
 8007f98:	300c      	adds	r0, #12
 8007f9a:	f7ff fac8 	bl	800752e <memcpy>
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	f7ff ffa5 	bl	8007ef0 <_Bfree>
 8007fa6:	4644      	mov	r4, r8
 8007fa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fac:	3501      	adds	r5, #1
 8007fae:	615e      	str	r6, [r3, #20]
 8007fb0:	6125      	str	r5, [r4, #16]
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb8:	0800953d 	.word	0x0800953d
 8007fbc:	080095ae 	.word	0x080095ae

08007fc0 <__s2b>:
 8007fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	4615      	mov	r5, r2
 8007fc8:	461f      	mov	r7, r3
 8007fca:	2209      	movs	r2, #9
 8007fcc:	3308      	adds	r3, #8
 8007fce:	4606      	mov	r6, r0
 8007fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	db09      	blt.n	8007ff0 <__s2b+0x30>
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f7ff ff47 	bl	8007e70 <_Balloc>
 8007fe2:	b940      	cbnz	r0, 8007ff6 <__s2b+0x36>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	4b19      	ldr	r3, [pc, #100]	; (800804c <__s2b+0x8c>)
 8007fe8:	4819      	ldr	r0, [pc, #100]	; (8008050 <__s2b+0x90>)
 8007fea:	21d3      	movs	r1, #211	; 0xd3
 8007fec:	f7ff fab8 	bl	8007560 <__assert_func>
 8007ff0:	0052      	lsls	r2, r2, #1
 8007ff2:	3101      	adds	r1, #1
 8007ff4:	e7f0      	b.n	8007fd8 <__s2b+0x18>
 8007ff6:	9b08      	ldr	r3, [sp, #32]
 8007ff8:	6143      	str	r3, [r0, #20]
 8007ffa:	2d09      	cmp	r5, #9
 8007ffc:	f04f 0301 	mov.w	r3, #1
 8008000:	6103      	str	r3, [r0, #16]
 8008002:	dd16      	ble.n	8008032 <__s2b+0x72>
 8008004:	f104 0909 	add.w	r9, r4, #9
 8008008:	46c8      	mov	r8, r9
 800800a:	442c      	add	r4, r5
 800800c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008010:	4601      	mov	r1, r0
 8008012:	3b30      	subs	r3, #48	; 0x30
 8008014:	220a      	movs	r2, #10
 8008016:	4630      	mov	r0, r6
 8008018:	f7ff ff8c 	bl	8007f34 <__multadd>
 800801c:	45a0      	cmp	r8, r4
 800801e:	d1f5      	bne.n	800800c <__s2b+0x4c>
 8008020:	f1a5 0408 	sub.w	r4, r5, #8
 8008024:	444c      	add	r4, r9
 8008026:	1b2d      	subs	r5, r5, r4
 8008028:	1963      	adds	r3, r4, r5
 800802a:	42bb      	cmp	r3, r7
 800802c:	db04      	blt.n	8008038 <__s2b+0x78>
 800802e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008032:	340a      	adds	r4, #10
 8008034:	2509      	movs	r5, #9
 8008036:	e7f6      	b.n	8008026 <__s2b+0x66>
 8008038:	f814 3b01 	ldrb.w	r3, [r4], #1
 800803c:	4601      	mov	r1, r0
 800803e:	3b30      	subs	r3, #48	; 0x30
 8008040:	220a      	movs	r2, #10
 8008042:	4630      	mov	r0, r6
 8008044:	f7ff ff76 	bl	8007f34 <__multadd>
 8008048:	e7ee      	b.n	8008028 <__s2b+0x68>
 800804a:	bf00      	nop
 800804c:	0800953d 	.word	0x0800953d
 8008050:	080095ae 	.word	0x080095ae

08008054 <__hi0bits>:
 8008054:	0c03      	lsrs	r3, r0, #16
 8008056:	041b      	lsls	r3, r3, #16
 8008058:	b9d3      	cbnz	r3, 8008090 <__hi0bits+0x3c>
 800805a:	0400      	lsls	r0, r0, #16
 800805c:	2310      	movs	r3, #16
 800805e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008062:	bf04      	itt	eq
 8008064:	0200      	lsleq	r0, r0, #8
 8008066:	3308      	addeq	r3, #8
 8008068:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800806c:	bf04      	itt	eq
 800806e:	0100      	lsleq	r0, r0, #4
 8008070:	3304      	addeq	r3, #4
 8008072:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008076:	bf04      	itt	eq
 8008078:	0080      	lsleq	r0, r0, #2
 800807a:	3302      	addeq	r3, #2
 800807c:	2800      	cmp	r0, #0
 800807e:	db05      	blt.n	800808c <__hi0bits+0x38>
 8008080:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008084:	f103 0301 	add.w	r3, r3, #1
 8008088:	bf08      	it	eq
 800808a:	2320      	moveq	r3, #32
 800808c:	4618      	mov	r0, r3
 800808e:	4770      	bx	lr
 8008090:	2300      	movs	r3, #0
 8008092:	e7e4      	b.n	800805e <__hi0bits+0xa>

08008094 <__lo0bits>:
 8008094:	6803      	ldr	r3, [r0, #0]
 8008096:	f013 0207 	ands.w	r2, r3, #7
 800809a:	d00c      	beq.n	80080b6 <__lo0bits+0x22>
 800809c:	07d9      	lsls	r1, r3, #31
 800809e:	d422      	bmi.n	80080e6 <__lo0bits+0x52>
 80080a0:	079a      	lsls	r2, r3, #30
 80080a2:	bf49      	itett	mi
 80080a4:	085b      	lsrmi	r3, r3, #1
 80080a6:	089b      	lsrpl	r3, r3, #2
 80080a8:	6003      	strmi	r3, [r0, #0]
 80080aa:	2201      	movmi	r2, #1
 80080ac:	bf5c      	itt	pl
 80080ae:	6003      	strpl	r3, [r0, #0]
 80080b0:	2202      	movpl	r2, #2
 80080b2:	4610      	mov	r0, r2
 80080b4:	4770      	bx	lr
 80080b6:	b299      	uxth	r1, r3
 80080b8:	b909      	cbnz	r1, 80080be <__lo0bits+0x2a>
 80080ba:	0c1b      	lsrs	r3, r3, #16
 80080bc:	2210      	movs	r2, #16
 80080be:	b2d9      	uxtb	r1, r3
 80080c0:	b909      	cbnz	r1, 80080c6 <__lo0bits+0x32>
 80080c2:	3208      	adds	r2, #8
 80080c4:	0a1b      	lsrs	r3, r3, #8
 80080c6:	0719      	lsls	r1, r3, #28
 80080c8:	bf04      	itt	eq
 80080ca:	091b      	lsreq	r3, r3, #4
 80080cc:	3204      	addeq	r2, #4
 80080ce:	0799      	lsls	r1, r3, #30
 80080d0:	bf04      	itt	eq
 80080d2:	089b      	lsreq	r3, r3, #2
 80080d4:	3202      	addeq	r2, #2
 80080d6:	07d9      	lsls	r1, r3, #31
 80080d8:	d403      	bmi.n	80080e2 <__lo0bits+0x4e>
 80080da:	085b      	lsrs	r3, r3, #1
 80080dc:	f102 0201 	add.w	r2, r2, #1
 80080e0:	d003      	beq.n	80080ea <__lo0bits+0x56>
 80080e2:	6003      	str	r3, [r0, #0]
 80080e4:	e7e5      	b.n	80080b2 <__lo0bits+0x1e>
 80080e6:	2200      	movs	r2, #0
 80080e8:	e7e3      	b.n	80080b2 <__lo0bits+0x1e>
 80080ea:	2220      	movs	r2, #32
 80080ec:	e7e1      	b.n	80080b2 <__lo0bits+0x1e>
	...

080080f0 <__i2b>:
 80080f0:	b510      	push	{r4, lr}
 80080f2:	460c      	mov	r4, r1
 80080f4:	2101      	movs	r1, #1
 80080f6:	f7ff febb 	bl	8007e70 <_Balloc>
 80080fa:	4602      	mov	r2, r0
 80080fc:	b928      	cbnz	r0, 800810a <__i2b+0x1a>
 80080fe:	4b05      	ldr	r3, [pc, #20]	; (8008114 <__i2b+0x24>)
 8008100:	4805      	ldr	r0, [pc, #20]	; (8008118 <__i2b+0x28>)
 8008102:	f240 1145 	movw	r1, #325	; 0x145
 8008106:	f7ff fa2b 	bl	8007560 <__assert_func>
 800810a:	2301      	movs	r3, #1
 800810c:	6144      	str	r4, [r0, #20]
 800810e:	6103      	str	r3, [r0, #16]
 8008110:	bd10      	pop	{r4, pc}
 8008112:	bf00      	nop
 8008114:	0800953d 	.word	0x0800953d
 8008118:	080095ae 	.word	0x080095ae

0800811c <__multiply>:
 800811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	4691      	mov	r9, r2
 8008122:	690a      	ldr	r2, [r1, #16]
 8008124:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008128:	429a      	cmp	r2, r3
 800812a:	bfb8      	it	lt
 800812c:	460b      	movlt	r3, r1
 800812e:	460c      	mov	r4, r1
 8008130:	bfbc      	itt	lt
 8008132:	464c      	movlt	r4, r9
 8008134:	4699      	movlt	r9, r3
 8008136:	6927      	ldr	r7, [r4, #16]
 8008138:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800813c:	68a3      	ldr	r3, [r4, #8]
 800813e:	6861      	ldr	r1, [r4, #4]
 8008140:	eb07 060a 	add.w	r6, r7, sl
 8008144:	42b3      	cmp	r3, r6
 8008146:	b085      	sub	sp, #20
 8008148:	bfb8      	it	lt
 800814a:	3101      	addlt	r1, #1
 800814c:	f7ff fe90 	bl	8007e70 <_Balloc>
 8008150:	b930      	cbnz	r0, 8008160 <__multiply+0x44>
 8008152:	4602      	mov	r2, r0
 8008154:	4b44      	ldr	r3, [pc, #272]	; (8008268 <__multiply+0x14c>)
 8008156:	4845      	ldr	r0, [pc, #276]	; (800826c <__multiply+0x150>)
 8008158:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800815c:	f7ff fa00 	bl	8007560 <__assert_func>
 8008160:	f100 0514 	add.w	r5, r0, #20
 8008164:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008168:	462b      	mov	r3, r5
 800816a:	2200      	movs	r2, #0
 800816c:	4543      	cmp	r3, r8
 800816e:	d321      	bcc.n	80081b4 <__multiply+0x98>
 8008170:	f104 0314 	add.w	r3, r4, #20
 8008174:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008178:	f109 0314 	add.w	r3, r9, #20
 800817c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008180:	9202      	str	r2, [sp, #8]
 8008182:	1b3a      	subs	r2, r7, r4
 8008184:	3a15      	subs	r2, #21
 8008186:	f022 0203 	bic.w	r2, r2, #3
 800818a:	3204      	adds	r2, #4
 800818c:	f104 0115 	add.w	r1, r4, #21
 8008190:	428f      	cmp	r7, r1
 8008192:	bf38      	it	cc
 8008194:	2204      	movcc	r2, #4
 8008196:	9201      	str	r2, [sp, #4]
 8008198:	9a02      	ldr	r2, [sp, #8]
 800819a:	9303      	str	r3, [sp, #12]
 800819c:	429a      	cmp	r2, r3
 800819e:	d80c      	bhi.n	80081ba <__multiply+0x9e>
 80081a0:	2e00      	cmp	r6, #0
 80081a2:	dd03      	ble.n	80081ac <__multiply+0x90>
 80081a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d05b      	beq.n	8008264 <__multiply+0x148>
 80081ac:	6106      	str	r6, [r0, #16]
 80081ae:	b005      	add	sp, #20
 80081b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b4:	f843 2b04 	str.w	r2, [r3], #4
 80081b8:	e7d8      	b.n	800816c <__multiply+0x50>
 80081ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80081be:	f1ba 0f00 	cmp.w	sl, #0
 80081c2:	d024      	beq.n	800820e <__multiply+0xf2>
 80081c4:	f104 0e14 	add.w	lr, r4, #20
 80081c8:	46a9      	mov	r9, r5
 80081ca:	f04f 0c00 	mov.w	ip, #0
 80081ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081d2:	f8d9 1000 	ldr.w	r1, [r9]
 80081d6:	fa1f fb82 	uxth.w	fp, r2
 80081da:	b289      	uxth	r1, r1
 80081dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80081e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80081e4:	f8d9 2000 	ldr.w	r2, [r9]
 80081e8:	4461      	add	r1, ip
 80081ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80081f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081f6:	b289      	uxth	r1, r1
 80081f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081fc:	4577      	cmp	r7, lr
 80081fe:	f849 1b04 	str.w	r1, [r9], #4
 8008202:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008206:	d8e2      	bhi.n	80081ce <__multiply+0xb2>
 8008208:	9a01      	ldr	r2, [sp, #4]
 800820a:	f845 c002 	str.w	ip, [r5, r2]
 800820e:	9a03      	ldr	r2, [sp, #12]
 8008210:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008214:	3304      	adds	r3, #4
 8008216:	f1b9 0f00 	cmp.w	r9, #0
 800821a:	d021      	beq.n	8008260 <__multiply+0x144>
 800821c:	6829      	ldr	r1, [r5, #0]
 800821e:	f104 0c14 	add.w	ip, r4, #20
 8008222:	46ae      	mov	lr, r5
 8008224:	f04f 0a00 	mov.w	sl, #0
 8008228:	f8bc b000 	ldrh.w	fp, [ip]
 800822c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008230:	fb09 220b 	mla	r2, r9, fp, r2
 8008234:	4452      	add	r2, sl
 8008236:	b289      	uxth	r1, r1
 8008238:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800823c:	f84e 1b04 	str.w	r1, [lr], #4
 8008240:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008244:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008248:	f8be 1000 	ldrh.w	r1, [lr]
 800824c:	fb09 110a 	mla	r1, r9, sl, r1
 8008250:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008254:	4567      	cmp	r7, ip
 8008256:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800825a:	d8e5      	bhi.n	8008228 <__multiply+0x10c>
 800825c:	9a01      	ldr	r2, [sp, #4]
 800825e:	50a9      	str	r1, [r5, r2]
 8008260:	3504      	adds	r5, #4
 8008262:	e799      	b.n	8008198 <__multiply+0x7c>
 8008264:	3e01      	subs	r6, #1
 8008266:	e79b      	b.n	80081a0 <__multiply+0x84>
 8008268:	0800953d 	.word	0x0800953d
 800826c:	080095ae 	.word	0x080095ae

08008270 <__pow5mult>:
 8008270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008274:	4615      	mov	r5, r2
 8008276:	f012 0203 	ands.w	r2, r2, #3
 800827a:	4606      	mov	r6, r0
 800827c:	460f      	mov	r7, r1
 800827e:	d007      	beq.n	8008290 <__pow5mult+0x20>
 8008280:	4c25      	ldr	r4, [pc, #148]	; (8008318 <__pow5mult+0xa8>)
 8008282:	3a01      	subs	r2, #1
 8008284:	2300      	movs	r3, #0
 8008286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800828a:	f7ff fe53 	bl	8007f34 <__multadd>
 800828e:	4607      	mov	r7, r0
 8008290:	10ad      	asrs	r5, r5, #2
 8008292:	d03d      	beq.n	8008310 <__pow5mult+0xa0>
 8008294:	69f4      	ldr	r4, [r6, #28]
 8008296:	b97c      	cbnz	r4, 80082b8 <__pow5mult+0x48>
 8008298:	2010      	movs	r0, #16
 800829a:	f7ff fd23 	bl	8007ce4 <malloc>
 800829e:	4602      	mov	r2, r0
 80082a0:	61f0      	str	r0, [r6, #28]
 80082a2:	b928      	cbnz	r0, 80082b0 <__pow5mult+0x40>
 80082a4:	4b1d      	ldr	r3, [pc, #116]	; (800831c <__pow5mult+0xac>)
 80082a6:	481e      	ldr	r0, [pc, #120]	; (8008320 <__pow5mult+0xb0>)
 80082a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80082ac:	f7ff f958 	bl	8007560 <__assert_func>
 80082b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082b4:	6004      	str	r4, [r0, #0]
 80082b6:	60c4      	str	r4, [r0, #12]
 80082b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80082bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082c0:	b94c      	cbnz	r4, 80082d6 <__pow5mult+0x66>
 80082c2:	f240 2171 	movw	r1, #625	; 0x271
 80082c6:	4630      	mov	r0, r6
 80082c8:	f7ff ff12 	bl	80080f0 <__i2b>
 80082cc:	2300      	movs	r3, #0
 80082ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80082d2:	4604      	mov	r4, r0
 80082d4:	6003      	str	r3, [r0, #0]
 80082d6:	f04f 0900 	mov.w	r9, #0
 80082da:	07eb      	lsls	r3, r5, #31
 80082dc:	d50a      	bpl.n	80082f4 <__pow5mult+0x84>
 80082de:	4639      	mov	r1, r7
 80082e0:	4622      	mov	r2, r4
 80082e2:	4630      	mov	r0, r6
 80082e4:	f7ff ff1a 	bl	800811c <__multiply>
 80082e8:	4639      	mov	r1, r7
 80082ea:	4680      	mov	r8, r0
 80082ec:	4630      	mov	r0, r6
 80082ee:	f7ff fdff 	bl	8007ef0 <_Bfree>
 80082f2:	4647      	mov	r7, r8
 80082f4:	106d      	asrs	r5, r5, #1
 80082f6:	d00b      	beq.n	8008310 <__pow5mult+0xa0>
 80082f8:	6820      	ldr	r0, [r4, #0]
 80082fa:	b938      	cbnz	r0, 800830c <__pow5mult+0x9c>
 80082fc:	4622      	mov	r2, r4
 80082fe:	4621      	mov	r1, r4
 8008300:	4630      	mov	r0, r6
 8008302:	f7ff ff0b 	bl	800811c <__multiply>
 8008306:	6020      	str	r0, [r4, #0]
 8008308:	f8c0 9000 	str.w	r9, [r0]
 800830c:	4604      	mov	r4, r0
 800830e:	e7e4      	b.n	80082da <__pow5mult+0x6a>
 8008310:	4638      	mov	r0, r7
 8008312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008316:	bf00      	nop
 8008318:	080096f8 	.word	0x080096f8
 800831c:	08009488 	.word	0x08009488
 8008320:	080095ae 	.word	0x080095ae

08008324 <__lshift>:
 8008324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008328:	460c      	mov	r4, r1
 800832a:	6849      	ldr	r1, [r1, #4]
 800832c:	6923      	ldr	r3, [r4, #16]
 800832e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008332:	68a3      	ldr	r3, [r4, #8]
 8008334:	4607      	mov	r7, r0
 8008336:	4691      	mov	r9, r2
 8008338:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800833c:	f108 0601 	add.w	r6, r8, #1
 8008340:	42b3      	cmp	r3, r6
 8008342:	db0b      	blt.n	800835c <__lshift+0x38>
 8008344:	4638      	mov	r0, r7
 8008346:	f7ff fd93 	bl	8007e70 <_Balloc>
 800834a:	4605      	mov	r5, r0
 800834c:	b948      	cbnz	r0, 8008362 <__lshift+0x3e>
 800834e:	4602      	mov	r2, r0
 8008350:	4b28      	ldr	r3, [pc, #160]	; (80083f4 <__lshift+0xd0>)
 8008352:	4829      	ldr	r0, [pc, #164]	; (80083f8 <__lshift+0xd4>)
 8008354:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008358:	f7ff f902 	bl	8007560 <__assert_func>
 800835c:	3101      	adds	r1, #1
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	e7ee      	b.n	8008340 <__lshift+0x1c>
 8008362:	2300      	movs	r3, #0
 8008364:	f100 0114 	add.w	r1, r0, #20
 8008368:	f100 0210 	add.w	r2, r0, #16
 800836c:	4618      	mov	r0, r3
 800836e:	4553      	cmp	r3, sl
 8008370:	db33      	blt.n	80083da <__lshift+0xb6>
 8008372:	6920      	ldr	r0, [r4, #16]
 8008374:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008378:	f104 0314 	add.w	r3, r4, #20
 800837c:	f019 091f 	ands.w	r9, r9, #31
 8008380:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008384:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008388:	d02b      	beq.n	80083e2 <__lshift+0xbe>
 800838a:	f1c9 0e20 	rsb	lr, r9, #32
 800838e:	468a      	mov	sl, r1
 8008390:	2200      	movs	r2, #0
 8008392:	6818      	ldr	r0, [r3, #0]
 8008394:	fa00 f009 	lsl.w	r0, r0, r9
 8008398:	4310      	orrs	r0, r2
 800839a:	f84a 0b04 	str.w	r0, [sl], #4
 800839e:	f853 2b04 	ldr.w	r2, [r3], #4
 80083a2:	459c      	cmp	ip, r3
 80083a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80083a8:	d8f3      	bhi.n	8008392 <__lshift+0x6e>
 80083aa:	ebac 0304 	sub.w	r3, ip, r4
 80083ae:	3b15      	subs	r3, #21
 80083b0:	f023 0303 	bic.w	r3, r3, #3
 80083b4:	3304      	adds	r3, #4
 80083b6:	f104 0015 	add.w	r0, r4, #21
 80083ba:	4584      	cmp	ip, r0
 80083bc:	bf38      	it	cc
 80083be:	2304      	movcc	r3, #4
 80083c0:	50ca      	str	r2, [r1, r3]
 80083c2:	b10a      	cbz	r2, 80083c8 <__lshift+0xa4>
 80083c4:	f108 0602 	add.w	r6, r8, #2
 80083c8:	3e01      	subs	r6, #1
 80083ca:	4638      	mov	r0, r7
 80083cc:	612e      	str	r6, [r5, #16]
 80083ce:	4621      	mov	r1, r4
 80083d0:	f7ff fd8e 	bl	8007ef0 <_Bfree>
 80083d4:	4628      	mov	r0, r5
 80083d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083da:	f842 0f04 	str.w	r0, [r2, #4]!
 80083de:	3301      	adds	r3, #1
 80083e0:	e7c5      	b.n	800836e <__lshift+0x4a>
 80083e2:	3904      	subs	r1, #4
 80083e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80083ec:	459c      	cmp	ip, r3
 80083ee:	d8f9      	bhi.n	80083e4 <__lshift+0xc0>
 80083f0:	e7ea      	b.n	80083c8 <__lshift+0xa4>
 80083f2:	bf00      	nop
 80083f4:	0800953d 	.word	0x0800953d
 80083f8:	080095ae 	.word	0x080095ae

080083fc <__mcmp>:
 80083fc:	b530      	push	{r4, r5, lr}
 80083fe:	6902      	ldr	r2, [r0, #16]
 8008400:	690c      	ldr	r4, [r1, #16]
 8008402:	1b12      	subs	r2, r2, r4
 8008404:	d10e      	bne.n	8008424 <__mcmp+0x28>
 8008406:	f100 0314 	add.w	r3, r0, #20
 800840a:	3114      	adds	r1, #20
 800840c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008410:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008414:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008418:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800841c:	42a5      	cmp	r5, r4
 800841e:	d003      	beq.n	8008428 <__mcmp+0x2c>
 8008420:	d305      	bcc.n	800842e <__mcmp+0x32>
 8008422:	2201      	movs	r2, #1
 8008424:	4610      	mov	r0, r2
 8008426:	bd30      	pop	{r4, r5, pc}
 8008428:	4283      	cmp	r3, r0
 800842a:	d3f3      	bcc.n	8008414 <__mcmp+0x18>
 800842c:	e7fa      	b.n	8008424 <__mcmp+0x28>
 800842e:	f04f 32ff 	mov.w	r2, #4294967295
 8008432:	e7f7      	b.n	8008424 <__mcmp+0x28>

08008434 <__mdiff>:
 8008434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	460c      	mov	r4, r1
 800843a:	4606      	mov	r6, r0
 800843c:	4611      	mov	r1, r2
 800843e:	4620      	mov	r0, r4
 8008440:	4690      	mov	r8, r2
 8008442:	f7ff ffdb 	bl	80083fc <__mcmp>
 8008446:	1e05      	subs	r5, r0, #0
 8008448:	d110      	bne.n	800846c <__mdiff+0x38>
 800844a:	4629      	mov	r1, r5
 800844c:	4630      	mov	r0, r6
 800844e:	f7ff fd0f 	bl	8007e70 <_Balloc>
 8008452:	b930      	cbnz	r0, 8008462 <__mdiff+0x2e>
 8008454:	4b3a      	ldr	r3, [pc, #232]	; (8008540 <__mdiff+0x10c>)
 8008456:	4602      	mov	r2, r0
 8008458:	f240 2137 	movw	r1, #567	; 0x237
 800845c:	4839      	ldr	r0, [pc, #228]	; (8008544 <__mdiff+0x110>)
 800845e:	f7ff f87f 	bl	8007560 <__assert_func>
 8008462:	2301      	movs	r3, #1
 8008464:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846c:	bfa4      	itt	ge
 800846e:	4643      	movge	r3, r8
 8008470:	46a0      	movge	r8, r4
 8008472:	4630      	mov	r0, r6
 8008474:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008478:	bfa6      	itte	ge
 800847a:	461c      	movge	r4, r3
 800847c:	2500      	movge	r5, #0
 800847e:	2501      	movlt	r5, #1
 8008480:	f7ff fcf6 	bl	8007e70 <_Balloc>
 8008484:	b920      	cbnz	r0, 8008490 <__mdiff+0x5c>
 8008486:	4b2e      	ldr	r3, [pc, #184]	; (8008540 <__mdiff+0x10c>)
 8008488:	4602      	mov	r2, r0
 800848a:	f240 2145 	movw	r1, #581	; 0x245
 800848e:	e7e5      	b.n	800845c <__mdiff+0x28>
 8008490:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008494:	6926      	ldr	r6, [r4, #16]
 8008496:	60c5      	str	r5, [r0, #12]
 8008498:	f104 0914 	add.w	r9, r4, #20
 800849c:	f108 0514 	add.w	r5, r8, #20
 80084a0:	f100 0e14 	add.w	lr, r0, #20
 80084a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80084a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80084ac:	f108 0210 	add.w	r2, r8, #16
 80084b0:	46f2      	mov	sl, lr
 80084b2:	2100      	movs	r1, #0
 80084b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80084b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80084bc:	fa11 f88b 	uxtah	r8, r1, fp
 80084c0:	b299      	uxth	r1, r3
 80084c2:	0c1b      	lsrs	r3, r3, #16
 80084c4:	eba8 0801 	sub.w	r8, r8, r1
 80084c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80084d0:	fa1f f888 	uxth.w	r8, r8
 80084d4:	1419      	asrs	r1, r3, #16
 80084d6:	454e      	cmp	r6, r9
 80084d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80084dc:	f84a 3b04 	str.w	r3, [sl], #4
 80084e0:	d8e8      	bhi.n	80084b4 <__mdiff+0x80>
 80084e2:	1b33      	subs	r3, r6, r4
 80084e4:	3b15      	subs	r3, #21
 80084e6:	f023 0303 	bic.w	r3, r3, #3
 80084ea:	3304      	adds	r3, #4
 80084ec:	3415      	adds	r4, #21
 80084ee:	42a6      	cmp	r6, r4
 80084f0:	bf38      	it	cc
 80084f2:	2304      	movcc	r3, #4
 80084f4:	441d      	add	r5, r3
 80084f6:	4473      	add	r3, lr
 80084f8:	469e      	mov	lr, r3
 80084fa:	462e      	mov	r6, r5
 80084fc:	4566      	cmp	r6, ip
 80084fe:	d30e      	bcc.n	800851e <__mdiff+0xea>
 8008500:	f10c 0203 	add.w	r2, ip, #3
 8008504:	1b52      	subs	r2, r2, r5
 8008506:	f022 0203 	bic.w	r2, r2, #3
 800850a:	3d03      	subs	r5, #3
 800850c:	45ac      	cmp	ip, r5
 800850e:	bf38      	it	cc
 8008510:	2200      	movcc	r2, #0
 8008512:	4413      	add	r3, r2
 8008514:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008518:	b17a      	cbz	r2, 800853a <__mdiff+0x106>
 800851a:	6107      	str	r7, [r0, #16]
 800851c:	e7a4      	b.n	8008468 <__mdiff+0x34>
 800851e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008522:	fa11 f288 	uxtah	r2, r1, r8
 8008526:	1414      	asrs	r4, r2, #16
 8008528:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800852c:	b292      	uxth	r2, r2
 800852e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008532:	f84e 2b04 	str.w	r2, [lr], #4
 8008536:	1421      	asrs	r1, r4, #16
 8008538:	e7e0      	b.n	80084fc <__mdiff+0xc8>
 800853a:	3f01      	subs	r7, #1
 800853c:	e7ea      	b.n	8008514 <__mdiff+0xe0>
 800853e:	bf00      	nop
 8008540:	0800953d 	.word	0x0800953d
 8008544:	080095ae 	.word	0x080095ae

08008548 <__ulp>:
 8008548:	b082      	sub	sp, #8
 800854a:	ed8d 0b00 	vstr	d0, [sp]
 800854e:	9a01      	ldr	r2, [sp, #4]
 8008550:	4b0f      	ldr	r3, [pc, #60]	; (8008590 <__ulp+0x48>)
 8008552:	4013      	ands	r3, r2
 8008554:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008558:	2b00      	cmp	r3, #0
 800855a:	dc08      	bgt.n	800856e <__ulp+0x26>
 800855c:	425b      	negs	r3, r3
 800855e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008562:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008566:	da04      	bge.n	8008572 <__ulp+0x2a>
 8008568:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800856c:	4113      	asrs	r3, r2
 800856e:	2200      	movs	r2, #0
 8008570:	e008      	b.n	8008584 <__ulp+0x3c>
 8008572:	f1a2 0314 	sub.w	r3, r2, #20
 8008576:	2b1e      	cmp	r3, #30
 8008578:	bfda      	itte	le
 800857a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800857e:	40da      	lsrle	r2, r3
 8008580:	2201      	movgt	r2, #1
 8008582:	2300      	movs	r3, #0
 8008584:	4619      	mov	r1, r3
 8008586:	4610      	mov	r0, r2
 8008588:	ec41 0b10 	vmov	d0, r0, r1
 800858c:	b002      	add	sp, #8
 800858e:	4770      	bx	lr
 8008590:	7ff00000 	.word	0x7ff00000

08008594 <__b2d>:
 8008594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008598:	6906      	ldr	r6, [r0, #16]
 800859a:	f100 0814 	add.w	r8, r0, #20
 800859e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80085a2:	1f37      	subs	r7, r6, #4
 80085a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7ff fd53 	bl	8008054 <__hi0bits>
 80085ae:	f1c0 0320 	rsb	r3, r0, #32
 80085b2:	280a      	cmp	r0, #10
 80085b4:	600b      	str	r3, [r1, #0]
 80085b6:	491b      	ldr	r1, [pc, #108]	; (8008624 <__b2d+0x90>)
 80085b8:	dc15      	bgt.n	80085e6 <__b2d+0x52>
 80085ba:	f1c0 0c0b 	rsb	ip, r0, #11
 80085be:	fa22 f30c 	lsr.w	r3, r2, ip
 80085c2:	45b8      	cmp	r8, r7
 80085c4:	ea43 0501 	orr.w	r5, r3, r1
 80085c8:	bf34      	ite	cc
 80085ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80085ce:	2300      	movcs	r3, #0
 80085d0:	3015      	adds	r0, #21
 80085d2:	fa02 f000 	lsl.w	r0, r2, r0
 80085d6:	fa23 f30c 	lsr.w	r3, r3, ip
 80085da:	4303      	orrs	r3, r0
 80085dc:	461c      	mov	r4, r3
 80085de:	ec45 4b10 	vmov	d0, r4, r5
 80085e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e6:	45b8      	cmp	r8, r7
 80085e8:	bf3a      	itte	cc
 80085ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80085ee:	f1a6 0708 	subcc.w	r7, r6, #8
 80085f2:	2300      	movcs	r3, #0
 80085f4:	380b      	subs	r0, #11
 80085f6:	d012      	beq.n	800861e <__b2d+0x8a>
 80085f8:	f1c0 0120 	rsb	r1, r0, #32
 80085fc:	fa23 f401 	lsr.w	r4, r3, r1
 8008600:	4082      	lsls	r2, r0
 8008602:	4322      	orrs	r2, r4
 8008604:	4547      	cmp	r7, r8
 8008606:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800860a:	bf8c      	ite	hi
 800860c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008610:	2200      	movls	r2, #0
 8008612:	4083      	lsls	r3, r0
 8008614:	40ca      	lsrs	r2, r1
 8008616:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800861a:	4313      	orrs	r3, r2
 800861c:	e7de      	b.n	80085dc <__b2d+0x48>
 800861e:	ea42 0501 	orr.w	r5, r2, r1
 8008622:	e7db      	b.n	80085dc <__b2d+0x48>
 8008624:	3ff00000 	.word	0x3ff00000

08008628 <__d2b>:
 8008628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800862c:	460f      	mov	r7, r1
 800862e:	2101      	movs	r1, #1
 8008630:	ec59 8b10 	vmov	r8, r9, d0
 8008634:	4616      	mov	r6, r2
 8008636:	f7ff fc1b 	bl	8007e70 <_Balloc>
 800863a:	4604      	mov	r4, r0
 800863c:	b930      	cbnz	r0, 800864c <__d2b+0x24>
 800863e:	4602      	mov	r2, r0
 8008640:	4b24      	ldr	r3, [pc, #144]	; (80086d4 <__d2b+0xac>)
 8008642:	4825      	ldr	r0, [pc, #148]	; (80086d8 <__d2b+0xb0>)
 8008644:	f240 310f 	movw	r1, #783	; 0x30f
 8008648:	f7fe ff8a 	bl	8007560 <__assert_func>
 800864c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008654:	bb2d      	cbnz	r5, 80086a2 <__d2b+0x7a>
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	f1b8 0300 	subs.w	r3, r8, #0
 800865c:	d026      	beq.n	80086ac <__d2b+0x84>
 800865e:	4668      	mov	r0, sp
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	f7ff fd17 	bl	8008094 <__lo0bits>
 8008666:	e9dd 1200 	ldrd	r1, r2, [sp]
 800866a:	b1e8      	cbz	r0, 80086a8 <__d2b+0x80>
 800866c:	f1c0 0320 	rsb	r3, r0, #32
 8008670:	fa02 f303 	lsl.w	r3, r2, r3
 8008674:	430b      	orrs	r3, r1
 8008676:	40c2      	lsrs	r2, r0
 8008678:	6163      	str	r3, [r4, #20]
 800867a:	9201      	str	r2, [sp, #4]
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	61a3      	str	r3, [r4, #24]
 8008680:	2b00      	cmp	r3, #0
 8008682:	bf14      	ite	ne
 8008684:	2202      	movne	r2, #2
 8008686:	2201      	moveq	r2, #1
 8008688:	6122      	str	r2, [r4, #16]
 800868a:	b1bd      	cbz	r5, 80086bc <__d2b+0x94>
 800868c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008690:	4405      	add	r5, r0
 8008692:	603d      	str	r5, [r7, #0]
 8008694:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008698:	6030      	str	r0, [r6, #0]
 800869a:	4620      	mov	r0, r4
 800869c:	b003      	add	sp, #12
 800869e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086a6:	e7d6      	b.n	8008656 <__d2b+0x2e>
 80086a8:	6161      	str	r1, [r4, #20]
 80086aa:	e7e7      	b.n	800867c <__d2b+0x54>
 80086ac:	a801      	add	r0, sp, #4
 80086ae:	f7ff fcf1 	bl	8008094 <__lo0bits>
 80086b2:	9b01      	ldr	r3, [sp, #4]
 80086b4:	6163      	str	r3, [r4, #20]
 80086b6:	3020      	adds	r0, #32
 80086b8:	2201      	movs	r2, #1
 80086ba:	e7e5      	b.n	8008688 <__d2b+0x60>
 80086bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086c4:	6038      	str	r0, [r7, #0]
 80086c6:	6918      	ldr	r0, [r3, #16]
 80086c8:	f7ff fcc4 	bl	8008054 <__hi0bits>
 80086cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086d0:	e7e2      	b.n	8008698 <__d2b+0x70>
 80086d2:	bf00      	nop
 80086d4:	0800953d 	.word	0x0800953d
 80086d8:	080095ae 	.word	0x080095ae

080086dc <__ratio>:
 80086dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e0:	4688      	mov	r8, r1
 80086e2:	4669      	mov	r1, sp
 80086e4:	4681      	mov	r9, r0
 80086e6:	f7ff ff55 	bl	8008594 <__b2d>
 80086ea:	a901      	add	r1, sp, #4
 80086ec:	4640      	mov	r0, r8
 80086ee:	ec55 4b10 	vmov	r4, r5, d0
 80086f2:	f7ff ff4f 	bl	8008594 <__b2d>
 80086f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80086fe:	eba3 0c02 	sub.w	ip, r3, r2
 8008702:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800870c:	ec51 0b10 	vmov	r0, r1, d0
 8008710:	2b00      	cmp	r3, #0
 8008712:	bfd6      	itet	le
 8008714:	460a      	movle	r2, r1
 8008716:	462a      	movgt	r2, r5
 8008718:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800871c:	468b      	mov	fp, r1
 800871e:	462f      	mov	r7, r5
 8008720:	bfd4      	ite	le
 8008722:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008726:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800872a:	4620      	mov	r0, r4
 800872c:	ee10 2a10 	vmov	r2, s0
 8008730:	465b      	mov	r3, fp
 8008732:	4639      	mov	r1, r7
 8008734:	f7f8 f8a2 	bl	800087c <__aeabi_ddiv>
 8008738:	ec41 0b10 	vmov	d0, r0, r1
 800873c:	b003      	add	sp, #12
 800873e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008742 <__copybits>:
 8008742:	3901      	subs	r1, #1
 8008744:	b570      	push	{r4, r5, r6, lr}
 8008746:	1149      	asrs	r1, r1, #5
 8008748:	6914      	ldr	r4, [r2, #16]
 800874a:	3101      	adds	r1, #1
 800874c:	f102 0314 	add.w	r3, r2, #20
 8008750:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008754:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008758:	1f05      	subs	r5, r0, #4
 800875a:	42a3      	cmp	r3, r4
 800875c:	d30c      	bcc.n	8008778 <__copybits+0x36>
 800875e:	1aa3      	subs	r3, r4, r2
 8008760:	3b11      	subs	r3, #17
 8008762:	f023 0303 	bic.w	r3, r3, #3
 8008766:	3211      	adds	r2, #17
 8008768:	42a2      	cmp	r2, r4
 800876a:	bf88      	it	hi
 800876c:	2300      	movhi	r3, #0
 800876e:	4418      	add	r0, r3
 8008770:	2300      	movs	r3, #0
 8008772:	4288      	cmp	r0, r1
 8008774:	d305      	bcc.n	8008782 <__copybits+0x40>
 8008776:	bd70      	pop	{r4, r5, r6, pc}
 8008778:	f853 6b04 	ldr.w	r6, [r3], #4
 800877c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008780:	e7eb      	b.n	800875a <__copybits+0x18>
 8008782:	f840 3b04 	str.w	r3, [r0], #4
 8008786:	e7f4      	b.n	8008772 <__copybits+0x30>

08008788 <__any_on>:
 8008788:	f100 0214 	add.w	r2, r0, #20
 800878c:	6900      	ldr	r0, [r0, #16]
 800878e:	114b      	asrs	r3, r1, #5
 8008790:	4298      	cmp	r0, r3
 8008792:	b510      	push	{r4, lr}
 8008794:	db11      	blt.n	80087ba <__any_on+0x32>
 8008796:	dd0a      	ble.n	80087ae <__any_on+0x26>
 8008798:	f011 011f 	ands.w	r1, r1, #31
 800879c:	d007      	beq.n	80087ae <__any_on+0x26>
 800879e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80087a2:	fa24 f001 	lsr.w	r0, r4, r1
 80087a6:	fa00 f101 	lsl.w	r1, r0, r1
 80087aa:	428c      	cmp	r4, r1
 80087ac:	d10b      	bne.n	80087c6 <__any_on+0x3e>
 80087ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d803      	bhi.n	80087be <__any_on+0x36>
 80087b6:	2000      	movs	r0, #0
 80087b8:	bd10      	pop	{r4, pc}
 80087ba:	4603      	mov	r3, r0
 80087bc:	e7f7      	b.n	80087ae <__any_on+0x26>
 80087be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087c2:	2900      	cmp	r1, #0
 80087c4:	d0f5      	beq.n	80087b2 <__any_on+0x2a>
 80087c6:	2001      	movs	r0, #1
 80087c8:	e7f6      	b.n	80087b8 <__any_on+0x30>

080087ca <__ascii_wctomb>:
 80087ca:	b149      	cbz	r1, 80087e0 <__ascii_wctomb+0x16>
 80087cc:	2aff      	cmp	r2, #255	; 0xff
 80087ce:	bf85      	ittet	hi
 80087d0:	238a      	movhi	r3, #138	; 0x8a
 80087d2:	6003      	strhi	r3, [r0, #0]
 80087d4:	700a      	strbls	r2, [r1, #0]
 80087d6:	f04f 30ff 	movhi.w	r0, #4294967295
 80087da:	bf98      	it	ls
 80087dc:	2001      	movls	r0, #1
 80087de:	4770      	bx	lr
 80087e0:	4608      	mov	r0, r1
 80087e2:	4770      	bx	lr

080087e4 <__sflush_r>:
 80087e4:	898a      	ldrh	r2, [r1, #12]
 80087e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ea:	4605      	mov	r5, r0
 80087ec:	0710      	lsls	r0, r2, #28
 80087ee:	460c      	mov	r4, r1
 80087f0:	d458      	bmi.n	80088a4 <__sflush_r+0xc0>
 80087f2:	684b      	ldr	r3, [r1, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	dc05      	bgt.n	8008804 <__sflush_r+0x20>
 80087f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	dc02      	bgt.n	8008804 <__sflush_r+0x20>
 80087fe:	2000      	movs	r0, #0
 8008800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008806:	2e00      	cmp	r6, #0
 8008808:	d0f9      	beq.n	80087fe <__sflush_r+0x1a>
 800880a:	2300      	movs	r3, #0
 800880c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008810:	682f      	ldr	r7, [r5, #0]
 8008812:	6a21      	ldr	r1, [r4, #32]
 8008814:	602b      	str	r3, [r5, #0]
 8008816:	d032      	beq.n	800887e <__sflush_r+0x9a>
 8008818:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	075a      	lsls	r2, r3, #29
 800881e:	d505      	bpl.n	800882c <__sflush_r+0x48>
 8008820:	6863      	ldr	r3, [r4, #4]
 8008822:	1ac0      	subs	r0, r0, r3
 8008824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008826:	b10b      	cbz	r3, 800882c <__sflush_r+0x48>
 8008828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800882a:	1ac0      	subs	r0, r0, r3
 800882c:	2300      	movs	r3, #0
 800882e:	4602      	mov	r2, r0
 8008830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008832:	6a21      	ldr	r1, [r4, #32]
 8008834:	4628      	mov	r0, r5
 8008836:	47b0      	blx	r6
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	d106      	bne.n	800884c <__sflush_r+0x68>
 800883e:	6829      	ldr	r1, [r5, #0]
 8008840:	291d      	cmp	r1, #29
 8008842:	d82b      	bhi.n	800889c <__sflush_r+0xb8>
 8008844:	4a29      	ldr	r2, [pc, #164]	; (80088ec <__sflush_r+0x108>)
 8008846:	410a      	asrs	r2, r1
 8008848:	07d6      	lsls	r6, r2, #31
 800884a:	d427      	bmi.n	800889c <__sflush_r+0xb8>
 800884c:	2200      	movs	r2, #0
 800884e:	6062      	str	r2, [r4, #4]
 8008850:	04d9      	lsls	r1, r3, #19
 8008852:	6922      	ldr	r2, [r4, #16]
 8008854:	6022      	str	r2, [r4, #0]
 8008856:	d504      	bpl.n	8008862 <__sflush_r+0x7e>
 8008858:	1c42      	adds	r2, r0, #1
 800885a:	d101      	bne.n	8008860 <__sflush_r+0x7c>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b903      	cbnz	r3, 8008862 <__sflush_r+0x7e>
 8008860:	6560      	str	r0, [r4, #84]	; 0x54
 8008862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008864:	602f      	str	r7, [r5, #0]
 8008866:	2900      	cmp	r1, #0
 8008868:	d0c9      	beq.n	80087fe <__sflush_r+0x1a>
 800886a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800886e:	4299      	cmp	r1, r3
 8008870:	d002      	beq.n	8008878 <__sflush_r+0x94>
 8008872:	4628      	mov	r0, r5
 8008874:	f7fe fe92 	bl	800759c <_free_r>
 8008878:	2000      	movs	r0, #0
 800887a:	6360      	str	r0, [r4, #52]	; 0x34
 800887c:	e7c0      	b.n	8008800 <__sflush_r+0x1c>
 800887e:	2301      	movs	r3, #1
 8008880:	4628      	mov	r0, r5
 8008882:	47b0      	blx	r6
 8008884:	1c41      	adds	r1, r0, #1
 8008886:	d1c8      	bne.n	800881a <__sflush_r+0x36>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0c5      	beq.n	800881a <__sflush_r+0x36>
 800888e:	2b1d      	cmp	r3, #29
 8008890:	d001      	beq.n	8008896 <__sflush_r+0xb2>
 8008892:	2b16      	cmp	r3, #22
 8008894:	d101      	bne.n	800889a <__sflush_r+0xb6>
 8008896:	602f      	str	r7, [r5, #0]
 8008898:	e7b1      	b.n	80087fe <__sflush_r+0x1a>
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a0:	81a3      	strh	r3, [r4, #12]
 80088a2:	e7ad      	b.n	8008800 <__sflush_r+0x1c>
 80088a4:	690f      	ldr	r7, [r1, #16]
 80088a6:	2f00      	cmp	r7, #0
 80088a8:	d0a9      	beq.n	80087fe <__sflush_r+0x1a>
 80088aa:	0793      	lsls	r3, r2, #30
 80088ac:	680e      	ldr	r6, [r1, #0]
 80088ae:	bf08      	it	eq
 80088b0:	694b      	ldreq	r3, [r1, #20]
 80088b2:	600f      	str	r7, [r1, #0]
 80088b4:	bf18      	it	ne
 80088b6:	2300      	movne	r3, #0
 80088b8:	eba6 0807 	sub.w	r8, r6, r7
 80088bc:	608b      	str	r3, [r1, #8]
 80088be:	f1b8 0f00 	cmp.w	r8, #0
 80088c2:	dd9c      	ble.n	80087fe <__sflush_r+0x1a>
 80088c4:	6a21      	ldr	r1, [r4, #32]
 80088c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088c8:	4643      	mov	r3, r8
 80088ca:	463a      	mov	r2, r7
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b0      	blx	r6
 80088d0:	2800      	cmp	r0, #0
 80088d2:	dc06      	bgt.n	80088e2 <__sflush_r+0xfe>
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	e78e      	b.n	8008800 <__sflush_r+0x1c>
 80088e2:	4407      	add	r7, r0
 80088e4:	eba8 0800 	sub.w	r8, r8, r0
 80088e8:	e7e9      	b.n	80088be <__sflush_r+0xda>
 80088ea:	bf00      	nop
 80088ec:	dfbffffe 	.word	0xdfbffffe

080088f0 <_fflush_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	690b      	ldr	r3, [r1, #16]
 80088f4:	4605      	mov	r5, r0
 80088f6:	460c      	mov	r4, r1
 80088f8:	b913      	cbnz	r3, 8008900 <_fflush_r+0x10>
 80088fa:	2500      	movs	r5, #0
 80088fc:	4628      	mov	r0, r5
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	b118      	cbz	r0, 800890a <_fflush_r+0x1a>
 8008902:	6a03      	ldr	r3, [r0, #32]
 8008904:	b90b      	cbnz	r3, 800890a <_fflush_r+0x1a>
 8008906:	f7fe fcaf 	bl	8007268 <__sinit>
 800890a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0f3      	beq.n	80088fa <_fflush_r+0xa>
 8008912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008914:	07d0      	lsls	r0, r2, #31
 8008916:	d404      	bmi.n	8008922 <_fflush_r+0x32>
 8008918:	0599      	lsls	r1, r3, #22
 800891a:	d402      	bmi.n	8008922 <_fflush_r+0x32>
 800891c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800891e:	f7fe fe04 	bl	800752a <__retarget_lock_acquire_recursive>
 8008922:	4628      	mov	r0, r5
 8008924:	4621      	mov	r1, r4
 8008926:	f7ff ff5d 	bl	80087e4 <__sflush_r>
 800892a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800892c:	07da      	lsls	r2, r3, #31
 800892e:	4605      	mov	r5, r0
 8008930:	d4e4      	bmi.n	80088fc <_fflush_r+0xc>
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	059b      	lsls	r3, r3, #22
 8008936:	d4e1      	bmi.n	80088fc <_fflush_r+0xc>
 8008938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800893a:	f7fe fdf7 	bl	800752c <__retarget_lock_release_recursive>
 800893e:	e7dd      	b.n	80088fc <_fflush_r+0xc>

08008940 <fiprintf>:
 8008940:	b40e      	push	{r1, r2, r3}
 8008942:	b503      	push	{r0, r1, lr}
 8008944:	4601      	mov	r1, r0
 8008946:	ab03      	add	r3, sp, #12
 8008948:	4805      	ldr	r0, [pc, #20]	; (8008960 <fiprintf+0x20>)
 800894a:	f853 2b04 	ldr.w	r2, [r3], #4
 800894e:	6800      	ldr	r0, [r0, #0]
 8008950:	9301      	str	r3, [sp, #4]
 8008952:	f000 f85d 	bl	8008a10 <_vfiprintf_r>
 8008956:	b002      	add	sp, #8
 8008958:	f85d eb04 	ldr.w	lr, [sp], #4
 800895c:	b003      	add	sp, #12
 800895e:	4770      	bx	lr
 8008960:	200001e0 	.word	0x200001e0

08008964 <_sbrk_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	4d06      	ldr	r5, [pc, #24]	; (8008980 <_sbrk_r+0x1c>)
 8008968:	2300      	movs	r3, #0
 800896a:	4604      	mov	r4, r0
 800896c:	4608      	mov	r0, r1
 800896e:	602b      	str	r3, [r5, #0]
 8008970:	f7f9 fd20 	bl	80023b4 <_sbrk>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	d102      	bne.n	800897e <_sbrk_r+0x1a>
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	b103      	cbz	r3, 800897e <_sbrk_r+0x1a>
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	20000548 	.word	0x20000548

08008984 <abort>:
 8008984:	b508      	push	{r3, lr}
 8008986:	2006      	movs	r0, #6
 8008988:	f000 fbaa 	bl	80090e0 <raise>
 800898c:	2001      	movs	r0, #1
 800898e:	f7f9 fc99 	bl	80022c4 <_exit>

08008992 <_calloc_r>:
 8008992:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008994:	fba1 2402 	umull	r2, r4, r1, r2
 8008998:	b94c      	cbnz	r4, 80089ae <_calloc_r+0x1c>
 800899a:	4611      	mov	r1, r2
 800899c:	9201      	str	r2, [sp, #4]
 800899e:	f7ff f9c9 	bl	8007d34 <_malloc_r>
 80089a2:	9a01      	ldr	r2, [sp, #4]
 80089a4:	4605      	mov	r5, r0
 80089a6:	b930      	cbnz	r0, 80089b6 <_calloc_r+0x24>
 80089a8:	4628      	mov	r0, r5
 80089aa:	b003      	add	sp, #12
 80089ac:	bd30      	pop	{r4, r5, pc}
 80089ae:	220c      	movs	r2, #12
 80089b0:	6002      	str	r2, [r0, #0]
 80089b2:	2500      	movs	r5, #0
 80089b4:	e7f8      	b.n	80089a8 <_calloc_r+0x16>
 80089b6:	4621      	mov	r1, r4
 80089b8:	f7fe fccf 	bl	800735a <memset>
 80089bc:	e7f4      	b.n	80089a8 <_calloc_r+0x16>

080089be <__sfputc_r>:
 80089be:	6893      	ldr	r3, [r2, #8]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	b410      	push	{r4}
 80089c6:	6093      	str	r3, [r2, #8]
 80089c8:	da08      	bge.n	80089dc <__sfputc_r+0x1e>
 80089ca:	6994      	ldr	r4, [r2, #24]
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	db01      	blt.n	80089d4 <__sfputc_r+0x16>
 80089d0:	290a      	cmp	r1, #10
 80089d2:	d103      	bne.n	80089dc <__sfputc_r+0x1e>
 80089d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089d8:	f000 bac4 	b.w	8008f64 <__swbuf_r>
 80089dc:	6813      	ldr	r3, [r2, #0]
 80089de:	1c58      	adds	r0, r3, #1
 80089e0:	6010      	str	r0, [r2, #0]
 80089e2:	7019      	strb	r1, [r3, #0]
 80089e4:	4608      	mov	r0, r1
 80089e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <__sfputs_r>:
 80089ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ee:	4606      	mov	r6, r0
 80089f0:	460f      	mov	r7, r1
 80089f2:	4614      	mov	r4, r2
 80089f4:	18d5      	adds	r5, r2, r3
 80089f6:	42ac      	cmp	r4, r5
 80089f8:	d101      	bne.n	80089fe <__sfputs_r+0x12>
 80089fa:	2000      	movs	r0, #0
 80089fc:	e007      	b.n	8008a0e <__sfputs_r+0x22>
 80089fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a02:	463a      	mov	r2, r7
 8008a04:	4630      	mov	r0, r6
 8008a06:	f7ff ffda 	bl	80089be <__sfputc_r>
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	d1f3      	bne.n	80089f6 <__sfputs_r+0xa>
 8008a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a10 <_vfiprintf_r>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	460d      	mov	r5, r1
 8008a16:	b09d      	sub	sp, #116	; 0x74
 8008a18:	4614      	mov	r4, r2
 8008a1a:	4698      	mov	r8, r3
 8008a1c:	4606      	mov	r6, r0
 8008a1e:	b118      	cbz	r0, 8008a28 <_vfiprintf_r+0x18>
 8008a20:	6a03      	ldr	r3, [r0, #32]
 8008a22:	b90b      	cbnz	r3, 8008a28 <_vfiprintf_r+0x18>
 8008a24:	f7fe fc20 	bl	8007268 <__sinit>
 8008a28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a2a:	07d9      	lsls	r1, r3, #31
 8008a2c:	d405      	bmi.n	8008a3a <_vfiprintf_r+0x2a>
 8008a2e:	89ab      	ldrh	r3, [r5, #12]
 8008a30:	059a      	lsls	r2, r3, #22
 8008a32:	d402      	bmi.n	8008a3a <_vfiprintf_r+0x2a>
 8008a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a36:	f7fe fd78 	bl	800752a <__retarget_lock_acquire_recursive>
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	071b      	lsls	r3, r3, #28
 8008a3e:	d501      	bpl.n	8008a44 <_vfiprintf_r+0x34>
 8008a40:	692b      	ldr	r3, [r5, #16]
 8008a42:	b99b      	cbnz	r3, 8008a6c <_vfiprintf_r+0x5c>
 8008a44:	4629      	mov	r1, r5
 8008a46:	4630      	mov	r0, r6
 8008a48:	f000 faca 	bl	8008fe0 <__swsetup_r>
 8008a4c:	b170      	cbz	r0, 8008a6c <_vfiprintf_r+0x5c>
 8008a4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a50:	07dc      	lsls	r4, r3, #31
 8008a52:	d504      	bpl.n	8008a5e <_vfiprintf_r+0x4e>
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	b01d      	add	sp, #116	; 0x74
 8008a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	0598      	lsls	r0, r3, #22
 8008a62:	d4f7      	bmi.n	8008a54 <_vfiprintf_r+0x44>
 8008a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a66:	f7fe fd61 	bl	800752c <__retarget_lock_release_recursive>
 8008a6a:	e7f3      	b.n	8008a54 <_vfiprintf_r+0x44>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a70:	2320      	movs	r3, #32
 8008a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a76:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a7a:	2330      	movs	r3, #48	; 0x30
 8008a7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008c30 <_vfiprintf_r+0x220>
 8008a80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a84:	f04f 0901 	mov.w	r9, #1
 8008a88:	4623      	mov	r3, r4
 8008a8a:	469a      	mov	sl, r3
 8008a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a90:	b10a      	cbz	r2, 8008a96 <_vfiprintf_r+0x86>
 8008a92:	2a25      	cmp	r2, #37	; 0x25
 8008a94:	d1f9      	bne.n	8008a8a <_vfiprintf_r+0x7a>
 8008a96:	ebba 0b04 	subs.w	fp, sl, r4
 8008a9a:	d00b      	beq.n	8008ab4 <_vfiprintf_r+0xa4>
 8008a9c:	465b      	mov	r3, fp
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff ffa2 	bl	80089ec <__sfputs_r>
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	f000 80a9 	beq.w	8008c00 <_vfiprintf_r+0x1f0>
 8008aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ab0:	445a      	add	r2, fp
 8008ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 80a1 	beq.w	8008c00 <_vfiprintf_r+0x1f0>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ac8:	f10a 0a01 	add.w	sl, sl, #1
 8008acc:	9304      	str	r3, [sp, #16]
 8008ace:	9307      	str	r3, [sp, #28]
 8008ad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ad4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ad6:	4654      	mov	r4, sl
 8008ad8:	2205      	movs	r2, #5
 8008ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ade:	4854      	ldr	r0, [pc, #336]	; (8008c30 <_vfiprintf_r+0x220>)
 8008ae0:	f7f7 fb96 	bl	8000210 <memchr>
 8008ae4:	9a04      	ldr	r2, [sp, #16]
 8008ae6:	b9d8      	cbnz	r0, 8008b20 <_vfiprintf_r+0x110>
 8008ae8:	06d1      	lsls	r1, r2, #27
 8008aea:	bf44      	itt	mi
 8008aec:	2320      	movmi	r3, #32
 8008aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008af2:	0713      	lsls	r3, r2, #28
 8008af4:	bf44      	itt	mi
 8008af6:	232b      	movmi	r3, #43	; 0x2b
 8008af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008afc:	f89a 3000 	ldrb.w	r3, [sl]
 8008b00:	2b2a      	cmp	r3, #42	; 0x2a
 8008b02:	d015      	beq.n	8008b30 <_vfiprintf_r+0x120>
 8008b04:	9a07      	ldr	r2, [sp, #28]
 8008b06:	4654      	mov	r4, sl
 8008b08:	2000      	movs	r0, #0
 8008b0a:	f04f 0c0a 	mov.w	ip, #10
 8008b0e:	4621      	mov	r1, r4
 8008b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b14:	3b30      	subs	r3, #48	; 0x30
 8008b16:	2b09      	cmp	r3, #9
 8008b18:	d94d      	bls.n	8008bb6 <_vfiprintf_r+0x1a6>
 8008b1a:	b1b0      	cbz	r0, 8008b4a <_vfiprintf_r+0x13a>
 8008b1c:	9207      	str	r2, [sp, #28]
 8008b1e:	e014      	b.n	8008b4a <_vfiprintf_r+0x13a>
 8008b20:	eba0 0308 	sub.w	r3, r0, r8
 8008b24:	fa09 f303 	lsl.w	r3, r9, r3
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	46a2      	mov	sl, r4
 8008b2e:	e7d2      	b.n	8008ad6 <_vfiprintf_r+0xc6>
 8008b30:	9b03      	ldr	r3, [sp, #12]
 8008b32:	1d19      	adds	r1, r3, #4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	9103      	str	r1, [sp, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bfbb      	ittet	lt
 8008b3c:	425b      	neglt	r3, r3
 8008b3e:	f042 0202 	orrlt.w	r2, r2, #2
 8008b42:	9307      	strge	r3, [sp, #28]
 8008b44:	9307      	strlt	r3, [sp, #28]
 8008b46:	bfb8      	it	lt
 8008b48:	9204      	strlt	r2, [sp, #16]
 8008b4a:	7823      	ldrb	r3, [r4, #0]
 8008b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8008b4e:	d10c      	bne.n	8008b6a <_vfiprintf_r+0x15a>
 8008b50:	7863      	ldrb	r3, [r4, #1]
 8008b52:	2b2a      	cmp	r3, #42	; 0x2a
 8008b54:	d134      	bne.n	8008bc0 <_vfiprintf_r+0x1b0>
 8008b56:	9b03      	ldr	r3, [sp, #12]
 8008b58:	1d1a      	adds	r2, r3, #4
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	9203      	str	r2, [sp, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	bfb8      	it	lt
 8008b62:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b66:	3402      	adds	r4, #2
 8008b68:	9305      	str	r3, [sp, #20]
 8008b6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008c40 <_vfiprintf_r+0x230>
 8008b6e:	7821      	ldrb	r1, [r4, #0]
 8008b70:	2203      	movs	r2, #3
 8008b72:	4650      	mov	r0, sl
 8008b74:	f7f7 fb4c 	bl	8000210 <memchr>
 8008b78:	b138      	cbz	r0, 8008b8a <_vfiprintf_r+0x17a>
 8008b7a:	9b04      	ldr	r3, [sp, #16]
 8008b7c:	eba0 000a 	sub.w	r0, r0, sl
 8008b80:	2240      	movs	r2, #64	; 0x40
 8008b82:	4082      	lsls	r2, r0
 8008b84:	4313      	orrs	r3, r2
 8008b86:	3401      	adds	r4, #1
 8008b88:	9304      	str	r3, [sp, #16]
 8008b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b8e:	4829      	ldr	r0, [pc, #164]	; (8008c34 <_vfiprintf_r+0x224>)
 8008b90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b94:	2206      	movs	r2, #6
 8008b96:	f7f7 fb3b 	bl	8000210 <memchr>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d03f      	beq.n	8008c1e <_vfiprintf_r+0x20e>
 8008b9e:	4b26      	ldr	r3, [pc, #152]	; (8008c38 <_vfiprintf_r+0x228>)
 8008ba0:	bb1b      	cbnz	r3, 8008bea <_vfiprintf_r+0x1da>
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	3307      	adds	r3, #7
 8008ba6:	f023 0307 	bic.w	r3, r3, #7
 8008baa:	3308      	adds	r3, #8
 8008bac:	9303      	str	r3, [sp, #12]
 8008bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb0:	443b      	add	r3, r7
 8008bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb4:	e768      	b.n	8008a88 <_vfiprintf_r+0x78>
 8008bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bba:	460c      	mov	r4, r1
 8008bbc:	2001      	movs	r0, #1
 8008bbe:	e7a6      	b.n	8008b0e <_vfiprintf_r+0xfe>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	3401      	adds	r4, #1
 8008bc4:	9305      	str	r3, [sp, #20]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	f04f 0c0a 	mov.w	ip, #10
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bd2:	3a30      	subs	r2, #48	; 0x30
 8008bd4:	2a09      	cmp	r2, #9
 8008bd6:	d903      	bls.n	8008be0 <_vfiprintf_r+0x1d0>
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0c6      	beq.n	8008b6a <_vfiprintf_r+0x15a>
 8008bdc:	9105      	str	r1, [sp, #20]
 8008bde:	e7c4      	b.n	8008b6a <_vfiprintf_r+0x15a>
 8008be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008be4:	4604      	mov	r4, r0
 8008be6:	2301      	movs	r3, #1
 8008be8:	e7f0      	b.n	8008bcc <_vfiprintf_r+0x1bc>
 8008bea:	ab03      	add	r3, sp, #12
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	462a      	mov	r2, r5
 8008bf0:	4b12      	ldr	r3, [pc, #72]	; (8008c3c <_vfiprintf_r+0x22c>)
 8008bf2:	a904      	add	r1, sp, #16
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	f3af 8000 	nop.w
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	1c78      	adds	r0, r7, #1
 8008bfe:	d1d6      	bne.n	8008bae <_vfiprintf_r+0x19e>
 8008c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c02:	07d9      	lsls	r1, r3, #31
 8008c04:	d405      	bmi.n	8008c12 <_vfiprintf_r+0x202>
 8008c06:	89ab      	ldrh	r3, [r5, #12]
 8008c08:	059a      	lsls	r2, r3, #22
 8008c0a:	d402      	bmi.n	8008c12 <_vfiprintf_r+0x202>
 8008c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c0e:	f7fe fc8d 	bl	800752c <__retarget_lock_release_recursive>
 8008c12:	89ab      	ldrh	r3, [r5, #12]
 8008c14:	065b      	lsls	r3, r3, #25
 8008c16:	f53f af1d 	bmi.w	8008a54 <_vfiprintf_r+0x44>
 8008c1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c1c:	e71c      	b.n	8008a58 <_vfiprintf_r+0x48>
 8008c1e:	ab03      	add	r3, sp, #12
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	462a      	mov	r2, r5
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <_vfiprintf_r+0x22c>)
 8008c26:	a904      	add	r1, sp, #16
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f000 f879 	bl	8008d20 <_printf_i>
 8008c2e:	e7e4      	b.n	8008bfa <_vfiprintf_r+0x1ea>
 8008c30:	08009805 	.word	0x08009805
 8008c34:	0800980f 	.word	0x0800980f
 8008c38:	00000000 	.word	0x00000000
 8008c3c:	080089ed 	.word	0x080089ed
 8008c40:	0800980b 	.word	0x0800980b

08008c44 <_printf_common>:
 8008c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c48:	4616      	mov	r6, r2
 8008c4a:	4699      	mov	r9, r3
 8008c4c:	688a      	ldr	r2, [r1, #8]
 8008c4e:	690b      	ldr	r3, [r1, #16]
 8008c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c54:	4293      	cmp	r3, r2
 8008c56:	bfb8      	it	lt
 8008c58:	4613      	movlt	r3, r2
 8008c5a:	6033      	str	r3, [r6, #0]
 8008c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c60:	4607      	mov	r7, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	b10a      	cbz	r2, 8008c6a <_printf_common+0x26>
 8008c66:	3301      	adds	r3, #1
 8008c68:	6033      	str	r3, [r6, #0]
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	0699      	lsls	r1, r3, #26
 8008c6e:	bf42      	ittt	mi
 8008c70:	6833      	ldrmi	r3, [r6, #0]
 8008c72:	3302      	addmi	r3, #2
 8008c74:	6033      	strmi	r3, [r6, #0]
 8008c76:	6825      	ldr	r5, [r4, #0]
 8008c78:	f015 0506 	ands.w	r5, r5, #6
 8008c7c:	d106      	bne.n	8008c8c <_printf_common+0x48>
 8008c7e:	f104 0a19 	add.w	sl, r4, #25
 8008c82:	68e3      	ldr	r3, [r4, #12]
 8008c84:	6832      	ldr	r2, [r6, #0]
 8008c86:	1a9b      	subs	r3, r3, r2
 8008c88:	42ab      	cmp	r3, r5
 8008c8a:	dc26      	bgt.n	8008cda <_printf_common+0x96>
 8008c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c90:	1e13      	subs	r3, r2, #0
 8008c92:	6822      	ldr	r2, [r4, #0]
 8008c94:	bf18      	it	ne
 8008c96:	2301      	movne	r3, #1
 8008c98:	0692      	lsls	r2, r2, #26
 8008c9a:	d42b      	bmi.n	8008cf4 <_printf_common+0xb0>
 8008c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ca0:	4649      	mov	r1, r9
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	47c0      	blx	r8
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	d01e      	beq.n	8008ce8 <_printf_common+0xa4>
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	6922      	ldr	r2, [r4, #16]
 8008cae:	f003 0306 	and.w	r3, r3, #6
 8008cb2:	2b04      	cmp	r3, #4
 8008cb4:	bf02      	ittt	eq
 8008cb6:	68e5      	ldreq	r5, [r4, #12]
 8008cb8:	6833      	ldreq	r3, [r6, #0]
 8008cba:	1aed      	subeq	r5, r5, r3
 8008cbc:	68a3      	ldr	r3, [r4, #8]
 8008cbe:	bf0c      	ite	eq
 8008cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cc4:	2500      	movne	r5, #0
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	bfc4      	itt	gt
 8008cca:	1a9b      	subgt	r3, r3, r2
 8008ccc:	18ed      	addgt	r5, r5, r3
 8008cce:	2600      	movs	r6, #0
 8008cd0:	341a      	adds	r4, #26
 8008cd2:	42b5      	cmp	r5, r6
 8008cd4:	d11a      	bne.n	8008d0c <_printf_common+0xc8>
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	e008      	b.n	8008cec <_printf_common+0xa8>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	4652      	mov	r2, sl
 8008cde:	4649      	mov	r1, r9
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	47c0      	blx	r8
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d103      	bne.n	8008cf0 <_printf_common+0xac>
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf0:	3501      	adds	r5, #1
 8008cf2:	e7c6      	b.n	8008c82 <_printf_common+0x3e>
 8008cf4:	18e1      	adds	r1, r4, r3
 8008cf6:	1c5a      	adds	r2, r3, #1
 8008cf8:	2030      	movs	r0, #48	; 0x30
 8008cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cfe:	4422      	add	r2, r4
 8008d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d08:	3302      	adds	r3, #2
 8008d0a:	e7c7      	b.n	8008c9c <_printf_common+0x58>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	4622      	mov	r2, r4
 8008d10:	4649      	mov	r1, r9
 8008d12:	4638      	mov	r0, r7
 8008d14:	47c0      	blx	r8
 8008d16:	3001      	adds	r0, #1
 8008d18:	d0e6      	beq.n	8008ce8 <_printf_common+0xa4>
 8008d1a:	3601      	adds	r6, #1
 8008d1c:	e7d9      	b.n	8008cd2 <_printf_common+0x8e>
	...

08008d20 <_printf_i>:
 8008d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d24:	7e0f      	ldrb	r7, [r1, #24]
 8008d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d28:	2f78      	cmp	r7, #120	; 0x78
 8008d2a:	4691      	mov	r9, r2
 8008d2c:	4680      	mov	r8, r0
 8008d2e:	460c      	mov	r4, r1
 8008d30:	469a      	mov	sl, r3
 8008d32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d36:	d807      	bhi.n	8008d48 <_printf_i+0x28>
 8008d38:	2f62      	cmp	r7, #98	; 0x62
 8008d3a:	d80a      	bhi.n	8008d52 <_printf_i+0x32>
 8008d3c:	2f00      	cmp	r7, #0
 8008d3e:	f000 80d4 	beq.w	8008eea <_printf_i+0x1ca>
 8008d42:	2f58      	cmp	r7, #88	; 0x58
 8008d44:	f000 80c0 	beq.w	8008ec8 <_printf_i+0x1a8>
 8008d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d50:	e03a      	b.n	8008dc8 <_printf_i+0xa8>
 8008d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d56:	2b15      	cmp	r3, #21
 8008d58:	d8f6      	bhi.n	8008d48 <_printf_i+0x28>
 8008d5a:	a101      	add	r1, pc, #4	; (adr r1, 8008d60 <_printf_i+0x40>)
 8008d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d60:	08008db9 	.word	0x08008db9
 8008d64:	08008dcd 	.word	0x08008dcd
 8008d68:	08008d49 	.word	0x08008d49
 8008d6c:	08008d49 	.word	0x08008d49
 8008d70:	08008d49 	.word	0x08008d49
 8008d74:	08008d49 	.word	0x08008d49
 8008d78:	08008dcd 	.word	0x08008dcd
 8008d7c:	08008d49 	.word	0x08008d49
 8008d80:	08008d49 	.word	0x08008d49
 8008d84:	08008d49 	.word	0x08008d49
 8008d88:	08008d49 	.word	0x08008d49
 8008d8c:	08008ed1 	.word	0x08008ed1
 8008d90:	08008df9 	.word	0x08008df9
 8008d94:	08008e8b 	.word	0x08008e8b
 8008d98:	08008d49 	.word	0x08008d49
 8008d9c:	08008d49 	.word	0x08008d49
 8008da0:	08008ef3 	.word	0x08008ef3
 8008da4:	08008d49 	.word	0x08008d49
 8008da8:	08008df9 	.word	0x08008df9
 8008dac:	08008d49 	.word	0x08008d49
 8008db0:	08008d49 	.word	0x08008d49
 8008db4:	08008e93 	.word	0x08008e93
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	1d1a      	adds	r2, r3, #4
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	602a      	str	r2, [r5, #0]
 8008dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e09f      	b.n	8008f0c <_printf_i+0x1ec>
 8008dcc:	6820      	ldr	r0, [r4, #0]
 8008dce:	682b      	ldr	r3, [r5, #0]
 8008dd0:	0607      	lsls	r7, r0, #24
 8008dd2:	f103 0104 	add.w	r1, r3, #4
 8008dd6:	6029      	str	r1, [r5, #0]
 8008dd8:	d501      	bpl.n	8008dde <_printf_i+0xbe>
 8008dda:	681e      	ldr	r6, [r3, #0]
 8008ddc:	e003      	b.n	8008de6 <_printf_i+0xc6>
 8008dde:	0646      	lsls	r6, r0, #25
 8008de0:	d5fb      	bpl.n	8008dda <_printf_i+0xba>
 8008de2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008de6:	2e00      	cmp	r6, #0
 8008de8:	da03      	bge.n	8008df2 <_printf_i+0xd2>
 8008dea:	232d      	movs	r3, #45	; 0x2d
 8008dec:	4276      	negs	r6, r6
 8008dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008df2:	485a      	ldr	r0, [pc, #360]	; (8008f5c <_printf_i+0x23c>)
 8008df4:	230a      	movs	r3, #10
 8008df6:	e012      	b.n	8008e1e <_printf_i+0xfe>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	6820      	ldr	r0, [r4, #0]
 8008dfc:	1d19      	adds	r1, r3, #4
 8008dfe:	6029      	str	r1, [r5, #0]
 8008e00:	0605      	lsls	r5, r0, #24
 8008e02:	d501      	bpl.n	8008e08 <_printf_i+0xe8>
 8008e04:	681e      	ldr	r6, [r3, #0]
 8008e06:	e002      	b.n	8008e0e <_printf_i+0xee>
 8008e08:	0641      	lsls	r1, r0, #25
 8008e0a:	d5fb      	bpl.n	8008e04 <_printf_i+0xe4>
 8008e0c:	881e      	ldrh	r6, [r3, #0]
 8008e0e:	4853      	ldr	r0, [pc, #332]	; (8008f5c <_printf_i+0x23c>)
 8008e10:	2f6f      	cmp	r7, #111	; 0x6f
 8008e12:	bf0c      	ite	eq
 8008e14:	2308      	moveq	r3, #8
 8008e16:	230a      	movne	r3, #10
 8008e18:	2100      	movs	r1, #0
 8008e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e1e:	6865      	ldr	r5, [r4, #4]
 8008e20:	60a5      	str	r5, [r4, #8]
 8008e22:	2d00      	cmp	r5, #0
 8008e24:	bfa2      	ittt	ge
 8008e26:	6821      	ldrge	r1, [r4, #0]
 8008e28:	f021 0104 	bicge.w	r1, r1, #4
 8008e2c:	6021      	strge	r1, [r4, #0]
 8008e2e:	b90e      	cbnz	r6, 8008e34 <_printf_i+0x114>
 8008e30:	2d00      	cmp	r5, #0
 8008e32:	d04b      	beq.n	8008ecc <_printf_i+0x1ac>
 8008e34:	4615      	mov	r5, r2
 8008e36:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e3a:	fb03 6711 	mls	r7, r3, r1, r6
 8008e3e:	5dc7      	ldrb	r7, [r0, r7]
 8008e40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e44:	4637      	mov	r7, r6
 8008e46:	42bb      	cmp	r3, r7
 8008e48:	460e      	mov	r6, r1
 8008e4a:	d9f4      	bls.n	8008e36 <_printf_i+0x116>
 8008e4c:	2b08      	cmp	r3, #8
 8008e4e:	d10b      	bne.n	8008e68 <_printf_i+0x148>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	07de      	lsls	r6, r3, #31
 8008e54:	d508      	bpl.n	8008e68 <_printf_i+0x148>
 8008e56:	6923      	ldr	r3, [r4, #16]
 8008e58:	6861      	ldr	r1, [r4, #4]
 8008e5a:	4299      	cmp	r1, r3
 8008e5c:	bfde      	ittt	le
 8008e5e:	2330      	movle	r3, #48	; 0x30
 8008e60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e68:	1b52      	subs	r2, r2, r5
 8008e6a:	6122      	str	r2, [r4, #16]
 8008e6c:	f8cd a000 	str.w	sl, [sp]
 8008e70:	464b      	mov	r3, r9
 8008e72:	aa03      	add	r2, sp, #12
 8008e74:	4621      	mov	r1, r4
 8008e76:	4640      	mov	r0, r8
 8008e78:	f7ff fee4 	bl	8008c44 <_printf_common>
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	d14a      	bne.n	8008f16 <_printf_i+0x1f6>
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295
 8008e84:	b004      	add	sp, #16
 8008e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	f043 0320 	orr.w	r3, r3, #32
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	4833      	ldr	r0, [pc, #204]	; (8008f60 <_printf_i+0x240>)
 8008e94:	2778      	movs	r7, #120	; 0x78
 8008e96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	6829      	ldr	r1, [r5, #0]
 8008e9e:	061f      	lsls	r7, r3, #24
 8008ea0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ea4:	d402      	bmi.n	8008eac <_printf_i+0x18c>
 8008ea6:	065f      	lsls	r7, r3, #25
 8008ea8:	bf48      	it	mi
 8008eaa:	b2b6      	uxthmi	r6, r6
 8008eac:	07df      	lsls	r7, r3, #31
 8008eae:	bf48      	it	mi
 8008eb0:	f043 0320 	orrmi.w	r3, r3, #32
 8008eb4:	6029      	str	r1, [r5, #0]
 8008eb6:	bf48      	it	mi
 8008eb8:	6023      	strmi	r3, [r4, #0]
 8008eba:	b91e      	cbnz	r6, 8008ec4 <_printf_i+0x1a4>
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	f023 0320 	bic.w	r3, r3, #32
 8008ec2:	6023      	str	r3, [r4, #0]
 8008ec4:	2310      	movs	r3, #16
 8008ec6:	e7a7      	b.n	8008e18 <_printf_i+0xf8>
 8008ec8:	4824      	ldr	r0, [pc, #144]	; (8008f5c <_printf_i+0x23c>)
 8008eca:	e7e4      	b.n	8008e96 <_printf_i+0x176>
 8008ecc:	4615      	mov	r5, r2
 8008ece:	e7bd      	b.n	8008e4c <_printf_i+0x12c>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	6826      	ldr	r6, [r4, #0]
 8008ed4:	6961      	ldr	r1, [r4, #20]
 8008ed6:	1d18      	adds	r0, r3, #4
 8008ed8:	6028      	str	r0, [r5, #0]
 8008eda:	0635      	lsls	r5, r6, #24
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	d501      	bpl.n	8008ee4 <_printf_i+0x1c4>
 8008ee0:	6019      	str	r1, [r3, #0]
 8008ee2:	e002      	b.n	8008eea <_printf_i+0x1ca>
 8008ee4:	0670      	lsls	r0, r6, #25
 8008ee6:	d5fb      	bpl.n	8008ee0 <_printf_i+0x1c0>
 8008ee8:	8019      	strh	r1, [r3, #0]
 8008eea:	2300      	movs	r3, #0
 8008eec:	6123      	str	r3, [r4, #16]
 8008eee:	4615      	mov	r5, r2
 8008ef0:	e7bc      	b.n	8008e6c <_printf_i+0x14c>
 8008ef2:	682b      	ldr	r3, [r5, #0]
 8008ef4:	1d1a      	adds	r2, r3, #4
 8008ef6:	602a      	str	r2, [r5, #0]
 8008ef8:	681d      	ldr	r5, [r3, #0]
 8008efa:	6862      	ldr	r2, [r4, #4]
 8008efc:	2100      	movs	r1, #0
 8008efe:	4628      	mov	r0, r5
 8008f00:	f7f7 f986 	bl	8000210 <memchr>
 8008f04:	b108      	cbz	r0, 8008f0a <_printf_i+0x1ea>
 8008f06:	1b40      	subs	r0, r0, r5
 8008f08:	6060      	str	r0, [r4, #4]
 8008f0a:	6863      	ldr	r3, [r4, #4]
 8008f0c:	6123      	str	r3, [r4, #16]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f14:	e7aa      	b.n	8008e6c <_printf_i+0x14c>
 8008f16:	6923      	ldr	r3, [r4, #16]
 8008f18:	462a      	mov	r2, r5
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	47d0      	blx	sl
 8008f20:	3001      	adds	r0, #1
 8008f22:	d0ad      	beq.n	8008e80 <_printf_i+0x160>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	079b      	lsls	r3, r3, #30
 8008f28:	d413      	bmi.n	8008f52 <_printf_i+0x232>
 8008f2a:	68e0      	ldr	r0, [r4, #12]
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	4298      	cmp	r0, r3
 8008f30:	bfb8      	it	lt
 8008f32:	4618      	movlt	r0, r3
 8008f34:	e7a6      	b.n	8008e84 <_printf_i+0x164>
 8008f36:	2301      	movs	r3, #1
 8008f38:	4632      	mov	r2, r6
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	4640      	mov	r0, r8
 8008f3e:	47d0      	blx	sl
 8008f40:	3001      	adds	r0, #1
 8008f42:	d09d      	beq.n	8008e80 <_printf_i+0x160>
 8008f44:	3501      	adds	r5, #1
 8008f46:	68e3      	ldr	r3, [r4, #12]
 8008f48:	9903      	ldr	r1, [sp, #12]
 8008f4a:	1a5b      	subs	r3, r3, r1
 8008f4c:	42ab      	cmp	r3, r5
 8008f4e:	dcf2      	bgt.n	8008f36 <_printf_i+0x216>
 8008f50:	e7eb      	b.n	8008f2a <_printf_i+0x20a>
 8008f52:	2500      	movs	r5, #0
 8008f54:	f104 0619 	add.w	r6, r4, #25
 8008f58:	e7f5      	b.n	8008f46 <_printf_i+0x226>
 8008f5a:	bf00      	nop
 8008f5c:	08009816 	.word	0x08009816
 8008f60:	08009827 	.word	0x08009827

08008f64 <__swbuf_r>:
 8008f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f66:	460e      	mov	r6, r1
 8008f68:	4614      	mov	r4, r2
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	b118      	cbz	r0, 8008f76 <__swbuf_r+0x12>
 8008f6e:	6a03      	ldr	r3, [r0, #32]
 8008f70:	b90b      	cbnz	r3, 8008f76 <__swbuf_r+0x12>
 8008f72:	f7fe f979 	bl	8007268 <__sinit>
 8008f76:	69a3      	ldr	r3, [r4, #24]
 8008f78:	60a3      	str	r3, [r4, #8]
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	071a      	lsls	r2, r3, #28
 8008f7e:	d525      	bpl.n	8008fcc <__swbuf_r+0x68>
 8008f80:	6923      	ldr	r3, [r4, #16]
 8008f82:	b31b      	cbz	r3, 8008fcc <__swbuf_r+0x68>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	6922      	ldr	r2, [r4, #16]
 8008f88:	1a98      	subs	r0, r3, r2
 8008f8a:	6963      	ldr	r3, [r4, #20]
 8008f8c:	b2f6      	uxtb	r6, r6
 8008f8e:	4283      	cmp	r3, r0
 8008f90:	4637      	mov	r7, r6
 8008f92:	dc04      	bgt.n	8008f9e <__swbuf_r+0x3a>
 8008f94:	4621      	mov	r1, r4
 8008f96:	4628      	mov	r0, r5
 8008f98:	f7ff fcaa 	bl	80088f0 <_fflush_r>
 8008f9c:	b9e0      	cbnz	r0, 8008fd8 <__swbuf_r+0x74>
 8008f9e:	68a3      	ldr	r3, [r4, #8]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	60a3      	str	r3, [r4, #8]
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	1c5a      	adds	r2, r3, #1
 8008fa8:	6022      	str	r2, [r4, #0]
 8008faa:	701e      	strb	r6, [r3, #0]
 8008fac:	6962      	ldr	r2, [r4, #20]
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d004      	beq.n	8008fbe <__swbuf_r+0x5a>
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	07db      	lsls	r3, r3, #31
 8008fb8:	d506      	bpl.n	8008fc8 <__swbuf_r+0x64>
 8008fba:	2e0a      	cmp	r6, #10
 8008fbc:	d104      	bne.n	8008fc8 <__swbuf_r+0x64>
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	f7ff fc95 	bl	80088f0 <_fflush_r>
 8008fc6:	b938      	cbnz	r0, 8008fd8 <__swbuf_r+0x74>
 8008fc8:	4638      	mov	r0, r7
 8008fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fcc:	4621      	mov	r1, r4
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f000 f806 	bl	8008fe0 <__swsetup_r>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d0d5      	beq.n	8008f84 <__swbuf_r+0x20>
 8008fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8008fdc:	e7f4      	b.n	8008fc8 <__swbuf_r+0x64>
	...

08008fe0 <__swsetup_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	4b2a      	ldr	r3, [pc, #168]	; (800908c <__swsetup_r+0xac>)
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	460c      	mov	r4, r1
 8008fea:	b118      	cbz	r0, 8008ff4 <__swsetup_r+0x14>
 8008fec:	6a03      	ldr	r3, [r0, #32]
 8008fee:	b90b      	cbnz	r3, 8008ff4 <__swsetup_r+0x14>
 8008ff0:	f7fe f93a 	bl	8007268 <__sinit>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ffa:	0718      	lsls	r0, r3, #28
 8008ffc:	d422      	bmi.n	8009044 <__swsetup_r+0x64>
 8008ffe:	06d9      	lsls	r1, r3, #27
 8009000:	d407      	bmi.n	8009012 <__swsetup_r+0x32>
 8009002:	2309      	movs	r3, #9
 8009004:	602b      	str	r3, [r5, #0]
 8009006:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800900a:	81a3      	strh	r3, [r4, #12]
 800900c:	f04f 30ff 	mov.w	r0, #4294967295
 8009010:	e034      	b.n	800907c <__swsetup_r+0x9c>
 8009012:	0758      	lsls	r0, r3, #29
 8009014:	d512      	bpl.n	800903c <__swsetup_r+0x5c>
 8009016:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009018:	b141      	cbz	r1, 800902c <__swsetup_r+0x4c>
 800901a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800901e:	4299      	cmp	r1, r3
 8009020:	d002      	beq.n	8009028 <__swsetup_r+0x48>
 8009022:	4628      	mov	r0, r5
 8009024:	f7fe faba 	bl	800759c <_free_r>
 8009028:	2300      	movs	r3, #0
 800902a:	6363      	str	r3, [r4, #52]	; 0x34
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009032:	81a3      	strh	r3, [r4, #12]
 8009034:	2300      	movs	r3, #0
 8009036:	6063      	str	r3, [r4, #4]
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	f043 0308 	orr.w	r3, r3, #8
 8009042:	81a3      	strh	r3, [r4, #12]
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	b94b      	cbnz	r3, 800905c <__swsetup_r+0x7c>
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800904e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009052:	d003      	beq.n	800905c <__swsetup_r+0x7c>
 8009054:	4621      	mov	r1, r4
 8009056:	4628      	mov	r0, r5
 8009058:	f000 f884 	bl	8009164 <__smakebuf_r>
 800905c:	89a0      	ldrh	r0, [r4, #12]
 800905e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009062:	f010 0301 	ands.w	r3, r0, #1
 8009066:	d00a      	beq.n	800907e <__swsetup_r+0x9e>
 8009068:	2300      	movs	r3, #0
 800906a:	60a3      	str	r3, [r4, #8]
 800906c:	6963      	ldr	r3, [r4, #20]
 800906e:	425b      	negs	r3, r3
 8009070:	61a3      	str	r3, [r4, #24]
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	b943      	cbnz	r3, 8009088 <__swsetup_r+0xa8>
 8009076:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800907a:	d1c4      	bne.n	8009006 <__swsetup_r+0x26>
 800907c:	bd38      	pop	{r3, r4, r5, pc}
 800907e:	0781      	lsls	r1, r0, #30
 8009080:	bf58      	it	pl
 8009082:	6963      	ldrpl	r3, [r4, #20]
 8009084:	60a3      	str	r3, [r4, #8]
 8009086:	e7f4      	b.n	8009072 <__swsetup_r+0x92>
 8009088:	2000      	movs	r0, #0
 800908a:	e7f7      	b.n	800907c <__swsetup_r+0x9c>
 800908c:	200001e0 	.word	0x200001e0

08009090 <_raise_r>:
 8009090:	291f      	cmp	r1, #31
 8009092:	b538      	push	{r3, r4, r5, lr}
 8009094:	4604      	mov	r4, r0
 8009096:	460d      	mov	r5, r1
 8009098:	d904      	bls.n	80090a4 <_raise_r+0x14>
 800909a:	2316      	movs	r3, #22
 800909c:	6003      	str	r3, [r0, #0]
 800909e:	f04f 30ff 	mov.w	r0, #4294967295
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80090a6:	b112      	cbz	r2, 80090ae <_raise_r+0x1e>
 80090a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090ac:	b94b      	cbnz	r3, 80090c2 <_raise_r+0x32>
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 f830 	bl	8009114 <_getpid_r>
 80090b4:	462a      	mov	r2, r5
 80090b6:	4601      	mov	r1, r0
 80090b8:	4620      	mov	r0, r4
 80090ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090be:	f000 b817 	b.w	80090f0 <_kill_r>
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d00a      	beq.n	80090dc <_raise_r+0x4c>
 80090c6:	1c59      	adds	r1, r3, #1
 80090c8:	d103      	bne.n	80090d2 <_raise_r+0x42>
 80090ca:	2316      	movs	r3, #22
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	2001      	movs	r0, #1
 80090d0:	e7e7      	b.n	80090a2 <_raise_r+0x12>
 80090d2:	2400      	movs	r4, #0
 80090d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090d8:	4628      	mov	r0, r5
 80090da:	4798      	blx	r3
 80090dc:	2000      	movs	r0, #0
 80090de:	e7e0      	b.n	80090a2 <_raise_r+0x12>

080090e0 <raise>:
 80090e0:	4b02      	ldr	r3, [pc, #8]	; (80090ec <raise+0xc>)
 80090e2:	4601      	mov	r1, r0
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	f7ff bfd3 	b.w	8009090 <_raise_r>
 80090ea:	bf00      	nop
 80090ec:	200001e0 	.word	0x200001e0

080090f0 <_kill_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4d07      	ldr	r5, [pc, #28]	; (8009110 <_kill_r+0x20>)
 80090f4:	2300      	movs	r3, #0
 80090f6:	4604      	mov	r4, r0
 80090f8:	4608      	mov	r0, r1
 80090fa:	4611      	mov	r1, r2
 80090fc:	602b      	str	r3, [r5, #0]
 80090fe:	f7f9 f8d1 	bl	80022a4 <_kill>
 8009102:	1c43      	adds	r3, r0, #1
 8009104:	d102      	bne.n	800910c <_kill_r+0x1c>
 8009106:	682b      	ldr	r3, [r5, #0]
 8009108:	b103      	cbz	r3, 800910c <_kill_r+0x1c>
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	bd38      	pop	{r3, r4, r5, pc}
 800910e:	bf00      	nop
 8009110:	20000548 	.word	0x20000548

08009114 <_getpid_r>:
 8009114:	f7f9 b8be 	b.w	8002294 <_getpid>

08009118 <__swhatbuf_r>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	460c      	mov	r4, r1
 800911c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009120:	2900      	cmp	r1, #0
 8009122:	b096      	sub	sp, #88	; 0x58
 8009124:	4615      	mov	r5, r2
 8009126:	461e      	mov	r6, r3
 8009128:	da0d      	bge.n	8009146 <__swhatbuf_r+0x2e>
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009130:	f04f 0100 	mov.w	r1, #0
 8009134:	bf0c      	ite	eq
 8009136:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800913a:	2340      	movne	r3, #64	; 0x40
 800913c:	2000      	movs	r0, #0
 800913e:	6031      	str	r1, [r6, #0]
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	b016      	add	sp, #88	; 0x58
 8009144:	bd70      	pop	{r4, r5, r6, pc}
 8009146:	466a      	mov	r2, sp
 8009148:	f000 f848 	bl	80091dc <_fstat_r>
 800914c:	2800      	cmp	r0, #0
 800914e:	dbec      	blt.n	800912a <__swhatbuf_r+0x12>
 8009150:	9901      	ldr	r1, [sp, #4]
 8009152:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009156:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800915a:	4259      	negs	r1, r3
 800915c:	4159      	adcs	r1, r3
 800915e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009162:	e7eb      	b.n	800913c <__swhatbuf_r+0x24>

08009164 <__smakebuf_r>:
 8009164:	898b      	ldrh	r3, [r1, #12]
 8009166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009168:	079d      	lsls	r5, r3, #30
 800916a:	4606      	mov	r6, r0
 800916c:	460c      	mov	r4, r1
 800916e:	d507      	bpl.n	8009180 <__smakebuf_r+0x1c>
 8009170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	6123      	str	r3, [r4, #16]
 8009178:	2301      	movs	r3, #1
 800917a:	6163      	str	r3, [r4, #20]
 800917c:	b002      	add	sp, #8
 800917e:	bd70      	pop	{r4, r5, r6, pc}
 8009180:	ab01      	add	r3, sp, #4
 8009182:	466a      	mov	r2, sp
 8009184:	f7ff ffc8 	bl	8009118 <__swhatbuf_r>
 8009188:	9900      	ldr	r1, [sp, #0]
 800918a:	4605      	mov	r5, r0
 800918c:	4630      	mov	r0, r6
 800918e:	f7fe fdd1 	bl	8007d34 <_malloc_r>
 8009192:	b948      	cbnz	r0, 80091a8 <__smakebuf_r+0x44>
 8009194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009198:	059a      	lsls	r2, r3, #22
 800919a:	d4ef      	bmi.n	800917c <__smakebuf_r+0x18>
 800919c:	f023 0303 	bic.w	r3, r3, #3
 80091a0:	f043 0302 	orr.w	r3, r3, #2
 80091a4:	81a3      	strh	r3, [r4, #12]
 80091a6:	e7e3      	b.n	8009170 <__smakebuf_r+0xc>
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	6020      	str	r0, [r4, #0]
 80091ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b0:	81a3      	strh	r3, [r4, #12]
 80091b2:	9b00      	ldr	r3, [sp, #0]
 80091b4:	6163      	str	r3, [r4, #20]
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	6120      	str	r0, [r4, #16]
 80091ba:	b15b      	cbz	r3, 80091d4 <__smakebuf_r+0x70>
 80091bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091c0:	4630      	mov	r0, r6
 80091c2:	f000 f81d 	bl	8009200 <_isatty_r>
 80091c6:	b128      	cbz	r0, 80091d4 <__smakebuf_r+0x70>
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	f023 0303 	bic.w	r3, r3, #3
 80091ce:	f043 0301 	orr.w	r3, r3, #1
 80091d2:	81a3      	strh	r3, [r4, #12]
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	431d      	orrs	r5, r3
 80091d8:	81a5      	strh	r5, [r4, #12]
 80091da:	e7cf      	b.n	800917c <__smakebuf_r+0x18>

080091dc <_fstat_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d07      	ldr	r5, [pc, #28]	; (80091fc <_fstat_r+0x20>)
 80091e0:	2300      	movs	r3, #0
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	4611      	mov	r1, r2
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	f7f9 f8ba 	bl	8002362 <_fstat>
 80091ee:	1c43      	adds	r3, r0, #1
 80091f0:	d102      	bne.n	80091f8 <_fstat_r+0x1c>
 80091f2:	682b      	ldr	r3, [r5, #0]
 80091f4:	b103      	cbz	r3, 80091f8 <_fstat_r+0x1c>
 80091f6:	6023      	str	r3, [r4, #0]
 80091f8:	bd38      	pop	{r3, r4, r5, pc}
 80091fa:	bf00      	nop
 80091fc:	20000548 	.word	0x20000548

08009200 <_isatty_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4d06      	ldr	r5, [pc, #24]	; (800921c <_isatty_r+0x1c>)
 8009204:	2300      	movs	r3, #0
 8009206:	4604      	mov	r4, r0
 8009208:	4608      	mov	r0, r1
 800920a:	602b      	str	r3, [r5, #0]
 800920c:	f7f9 f8b9 	bl	8002382 <_isatty>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_isatty_r+0x1a>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_isatty_r+0x1a>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	20000548 	.word	0x20000548

08009220 <round>:
 8009220:	ec53 2b10 	vmov	r2, r3, d0
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800922a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800922e:	2813      	cmp	r0, #19
 8009230:	ee10 5a10 	vmov	r5, s0
 8009234:	4619      	mov	r1, r3
 8009236:	dc18      	bgt.n	800926a <round+0x4a>
 8009238:	2800      	cmp	r0, #0
 800923a:	da09      	bge.n	8009250 <round+0x30>
 800923c:	3001      	adds	r0, #1
 800923e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8009242:	d103      	bne.n	800924c <round+0x2c>
 8009244:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8009248:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800924c:	2300      	movs	r3, #0
 800924e:	e02a      	b.n	80092a6 <round+0x86>
 8009250:	4c16      	ldr	r4, [pc, #88]	; (80092ac <round+0x8c>)
 8009252:	4104      	asrs	r4, r0
 8009254:	ea03 0604 	and.w	r6, r3, r4
 8009258:	4316      	orrs	r6, r2
 800925a:	d011      	beq.n	8009280 <round+0x60>
 800925c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009260:	4103      	asrs	r3, r0
 8009262:	440b      	add	r3, r1
 8009264:	ea23 0104 	bic.w	r1, r3, r4
 8009268:	e7f0      	b.n	800924c <round+0x2c>
 800926a:	2833      	cmp	r0, #51	; 0x33
 800926c:	dd0b      	ble.n	8009286 <round+0x66>
 800926e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009272:	d105      	bne.n	8009280 <round+0x60>
 8009274:	ee10 0a10 	vmov	r0, s0
 8009278:	f7f7 f820 	bl	80002bc <__adddf3>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	ec43 2b10 	vmov	d0, r2, r3
 8009284:	bd70      	pop	{r4, r5, r6, pc}
 8009286:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800928a:	f04f 34ff 	mov.w	r4, #4294967295
 800928e:	40f4      	lsrs	r4, r6
 8009290:	4214      	tst	r4, r2
 8009292:	d0f5      	beq.n	8009280 <round+0x60>
 8009294:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8009298:	2301      	movs	r3, #1
 800929a:	4083      	lsls	r3, r0
 800929c:	195b      	adds	r3, r3, r5
 800929e:	bf28      	it	cs
 80092a0:	3101      	addcs	r1, #1
 80092a2:	ea23 0304 	bic.w	r3, r3, r4
 80092a6:	461a      	mov	r2, r3
 80092a8:	460b      	mov	r3, r1
 80092aa:	e7e9      	b.n	8009280 <round+0x60>
 80092ac:	000fffff 	.word	0x000fffff

080092b0 <_init>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	bf00      	nop
 80092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b6:	bc08      	pop	{r3}
 80092b8:	469e      	mov	lr, r3
 80092ba:	4770      	bx	lr

080092bc <_fini>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	bf00      	nop
 80092c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c2:	bc08      	pop	{r3}
 80092c4:	469e      	mov	lr, r3
 80092c6:	4770      	bx	lr
